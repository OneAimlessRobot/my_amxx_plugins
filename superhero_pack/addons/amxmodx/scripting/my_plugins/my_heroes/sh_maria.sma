

#include "../my_include/superheromod.inc"
#include "sh_aux_stuff/sh_aux_inc.inc"

#define MARIA_HEAL_TASKID 2219926
#define MARIA_STATS_TASKID 7219926
#define MARIA_HUD_TASKID 82219926

#define MARIA_REMOVE_GLOW_TASKID 12812810

// GLOBAL VARIABLES
//new gHeroID
new const gHeroName[] = "Maria"
new bool:gHasMaria[SH_MAXSLOTS+1]
new g_maria_points[SH_MAXSLOTS+1]
new Float:g_base_radius[SH_MAXSLOTS+1]
new Float:g_normal_radius[SH_MAXSLOTS+1]


new base_points
new max_points
new Float:points_heal_coeff
new Float:points_radius_pct
new Float:dmg_points_pct
new Float:selfless_index
new Float:max_radius
new Float:base_radius
new Float:base_heal
new Float:heal_period
new maria_alpha


//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Maria!", "1.0", "Adriano Valente")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("maria_level", "8")
	register_cvar("maria_points_radius_pct", "0.1")
	register_cvar("maria_base_radius", "500")
	register_cvar("maria_max_radius", "1000")
	register_cvar("maria_base_points", "1000")
	register_cvar("maria_base_heal", "1000")
	register_cvar("maria_heal_alpha", "60")
	register_cvar("maria_max_points", "1000")
	register_cvar("maria_dmg_points_pct", "0.1")
	register_cvar("maria_selfless_index", "0.9")
	register_cvar("maria_points_heal_coeff", "4")
	register_cvar("maria_heal_period", "0.33")
	
	
	register_event("ResetHUD","newRound","b")
	shCreateHero(gHeroName, "Maria", "Martyr! Heal nearby teamates & become transparent", false, "maria_level" )
	
	register_forward(FM_TraceLine,"fw_traceline");
	register_event("Damage", "maria_damage", "b", "2!0")
	
	register_srvcmd("maria_init", "maria_init")
	shRegHeroInit(gHeroName, "maria_init")
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	
	//gHeroLevel=get_cvar_num("maria_level")
	dmg_points_pct=get_cvar_float("maria_dmg_points_pct")
	base_radius=get_cvar_float("maria_base_radius")
	max_radius=get_cvar_float("maria_max_radius")
	max_points=get_cvar_num("maria_max_points")
	maria_alpha=get_cvar_num("maria_heal_alpha")
	selfless_index=get_cvar_float("maria_selfless_index")
	points_radius_pct=get_cvar_float("maria_points_radius_pct")
	points_heal_coeff=get_cvar_float("maria_points_heal_coeff")
	base_points=get_cvar_num("maria_base_points")
	base_heal=get_cvar_float("maria_base_heal")
	heal_period=get_cvar_float("maria_heal_period")
}

public remove_glow_task(id){

id-=MARIA_REMOVE_GLOW_TASKID
if(!sh_is_active()||!is_user_connected(id)||!is_user_alive(id)) return

set_user_rendering(id,kRenderFxGlowShell, 0, 0, 0, _,_)

}
public maria_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasMaria[id]=(hasPowers!=0)
	if(gHasMaria[id]){
		
		g_maria_points[id]=base_points;
		g_base_radius[id]=base_radius
		set_task(heal_period, "maria_heal_loop", id+MARIA_HEAL_TASKID, "", 0, "b")
		set_task(heal_period, "maria_hud", id+MARIA_HUD_TASKID, "", 0, "b")
		set_task(heal_period, "maria_loop", id+MARIA_STATS_TASKID, "", 0, "b")
	}
	else{
		g_maria_points[id]=0;
		g_base_radius[id]=0.0
		remove_task(id+MARIA_HUD_TASKID)
		remove_task(id+MARIA_STATS_TASKID)
		remove_task(id+MARIA_HEAL_TASKID)
	}
	
	
}
add_points(id,Float:damage){
	
	g_maria_points[id]=min(max_points,g_maria_points[id]+(floatround(damage*dmg_points_pct)))
	
	
}

calculate_healing(id,Float:values[2]){

new Float: maria_health=float(get_user_health(id))
new Float:value=heal_period*base_heal*selfless_index*(float(g_maria_points[id])/float(max_points));
values[1]=maria_health;
values[0]=(maria_health>value)?value:0.0;

}


bool:heal_teamate(id,i){
	if(!sh_is_active()||!client_hittable(i)||!client_hittable(id)||!hasRoundStarted()){
		
		
		return false
	}
	if(!gHasMaria[id]){
		
		
		return false
	}
	new Float:mate_health=float(get_user_health(i))
	if(mate_health>=sh_get_max_hp(i)){
		return false
	
	}
	new Float:values[2]
	calculate_healing(id,values)
	new Float: new_health=floatadd(mate_health,values[0]*points_heal_coeff)
	set_user_health(i,min(sh_get_max_hp(i),floatround(new_health)))
	sh_extra_damage(id,id,floatround(values[0]),"Selflessness",0)
	setScreenFlash(i,LineColors[LTGREEN][0],LineColors[LTGREEN][1],LineColors[LTGREEN][2],3,100)
	set_task(heal_period*2,"remove_glow_task",i+MARIA_REMOVE_GLOW_TASKID,"", 0,  "a",1)
	sh_set_rendering(i, LineColors[LTGREEN][0],LineColors[LTGREEN][1],LineColors[LTGREEN][2],255,kRenderFxGlowShell, kRenderTransAlpha)
	heal_stream(id,i)
	return true

}

public maria_heal_loop(id){

id-=MARIA_HEAL_TASKID
if(!sh_is_active()||!client_hittable(id)){
		
		
	return
}
if(!gHasMaria[id]){
	
	
	return
}
new client_origin[3],teamate_origin[3],distance
get_user_origin(id,client_origin);
new CsTeams:user_team= cs_get_user_team(id)
new bool:healed=false;
for(new i=1;i<=SH_MAXSLOTS;i++){
	if(!client_hittable(id)){
	
		return
	
	}
	if(!gHasMaria[id]){
		
		return
		
	}
	if((i==id)||!client_hittable(i)){
		
		
	}
	else if(is_user_alive(i)){
		new CsTeams:other_user_team=cs_get_user_team(i)
		if((user_team==other_user_team)){
			get_user_origin(i,teamate_origin)
			distance=get_distance(client_origin,teamate_origin)
			if(distance<g_normal_radius[id]){
				if(float(get_user_health(id))>(sh_get_max_hp(id)*(1-selfless_index))){
					healed=heal_teamate(id,i)
					
				}
			}
		}
	}
	
	
}
if(healed){

	setScreenFlash(id,LineColors[LTGREEN][0],LineColors[LTGREEN][1],LineColors[LTGREEN][2],3,100)	
	sh_set_rendering(id, LineColors[LTGREEN][0],LineColors[LTGREEN][1],LineColors[LTGREEN][2],maria_alpha,kRenderTransAlpha, kRenderTransAlpha)
	set_task(heal_period,"remove_glow_task",id+MARIA_REMOVE_GLOW_TASKID,"", 0,  "a",1)	
	aura(id,LineColorsWithAlpha[WHITE])

}
make_shockwave(client_origin,g_normal_radius[id],LineColorsWithAlpha[LTGREEN],1,3,2,20)

}
public maria_damage(id)
{
	if ( !shModActive() || !is_user_alive(id)||!is_user_connected(id) ||!gHasMaria[id]) return
	
	new  Float:damage= float(read_data(2))
	
	add_points(id,damage)
}
public fw_traceline(Float:v1[3],Float:v2[3],noMonsters,id)
{
	if( !sh_is_active() || !is_user_alive(id) ||!gHasMaria[id] )
		return FMRES_IGNORED;
	
	
	
	// get crosshair aim
	static iMyAim[3], Float:flMyAim[3];
	get_user_origin(id, iMyAim, 3);
	IVecFVec(iMyAim, flMyAim);
	
	// set crosshair aim
	set_tr(TR_vecEndPos, flMyAim);
	
	// get ent looking at
	static ent, body;
	get_user_aiming(id, ent, body);
	
	// if looking at something
	if( pev_valid(ent))
	{
		if((pev(ent,pev_solid)==SOLID_SLIDEBOX)&&(get_user_team(id)==get_user_team(ent))){
			new hud_msg[128]
			new client_name[127]
			get_user_name(ent,client_name,127)
			new client_health=get_user_health(ent)
			format(hud_msg,127,"[SH] %s: HP of %s: %d/%d",gHeroName,client_name,client_health,sh_get_max_hp(ent))
			client_print(id,print_center,"%s",hud_msg)
			
		}	
		
	}	
	return FMRES_IGNORED;
}
public maria_loop(id){
	
	id-=MARIA_STATS_TASKID;
	
	if(gHasMaria[id]){
		
		update_stats(id)
		
		
	}
	
	
}
update_stats(id){
	
	if(gHasMaria[id]){
		g_normal_radius[id]=floatmin(floatadd(g_base_radius[id],floatmul(float(g_maria_points[id]),points_radius_pct)),max_radius);
		
	}
	
	
}

//----------------------------------------------------------------------------------------------
public newRound(id)
{	
	if(is_user_alive(id) && shModActive()){
		if ( gHasMaria[id]) {
			g_maria_points[id]=base_points;
		}
	}
	return PLUGIN_HANDLED
	
}
public plugin_precache()
{
	precache_explosion_fx()
	
}



#include "../my_include/superheromod.inc"

#define MARIA_HEAL_TASKID 2219926
#define MARIA_STATS_TASKID 7219926
#define MARIA_HUD_TASKID 82219926

#define MARIA_HEAL_PERIOD 0.1
#define MARIA_REMOVE_GLOW_TASKID 12812810

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Maria"
new bool:gHasMaria[SH_MAXSLOTS+1]
//new g_base_points[SH_MAXSLOTS+1]
new g_maria_points[SH_MAXSLOTS+1]
new Float:g_base_radius[SH_MAXSLOTS+1]
new Float:g_normal_radius[SH_MAXSLOTS+1]

new const hud_color[4]={111,255,111,0}
//new const love_color[4]={250, 92, 163,50}
new const heal_color[4]={250,250,210, 100}

new m_spriteTexture,sprite1
new base_points
new max_points
new Float:points_heal_coeff
new Float:points_radius_pct
new Float:dmg_points_pct
new Float:selfless_index
new Float:max_radius
new Float:base_radius
new Float:base_heal
new maria_alpha
//new pCvarSpeed
new hud_sync
new hud_sync_health
new gHeroLevel


//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Maria!", "1.0", "Adriano Valente")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("maria_level", "8")
	register_cvar("maria_points_radius_pct", "0.1")
	register_cvar("maria_base_radius", "500")
	register_cvar("maria_max_radius", "1000")
	register_cvar("maria_base_points", "1000")
	register_cvar("maria_base_heal", "1000")
	register_cvar("maria_heal_alpha", "60")
	register_cvar("maria_max_points", "1000")
	register_cvar("maria_dmg_points_pct", "0.1")
	register_cvar("maria_selfless_index", "0.9")
	register_cvar("maria_points_heal_coeff", "4")
	
	
	hud_sync=CreateHudSyncObj()
	hud_sync_health=CreateHudSyncObj()
	register_event("ResetHUD","newRound","b")
	gHeroID=shCreateHero(gHeroName, "Maria", "Martyr! Heal nearby teamates & become transparent", false, "maria_level" )
	
	register_forward(FM_TraceLine,"fw_traceline");
	register_event("Damage", "maria_damage", "b", "2!0")
	register_event("DeathMsg","death","a")
	
	register_srvcmd("maria_init", "maria_init")
	shRegHeroInit(gHeroName, "maria_init")
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	
	gHeroLevel=get_cvar_num("maria_level")
	dmg_points_pct=get_cvar_float("maria_dmg_points_pct")
	base_radius=get_cvar_float("maria_base_radius")
	max_radius=get_cvar_float("maria_max_radius")
	max_points=get_cvar_num("maria_max_points")
	maria_alpha=get_cvar_num("maria_heal_alpha")
	selfless_index=get_cvar_float("maria_selfless_index")
	points_radius_pct=get_cvar_float("maria_points_radius_pct")
	points_heal_coeff=get_cvar_float("maria_points_heal_coeff")
	base_points=get_cvar_num("maria_base_points")
	base_heal=get_cvar_float("maria_base_heal")
}

public remove_glow_task(id){

id-=MARIA_REMOVE_GLOW_TASKID
if(!sh_is_active()||!is_user_connected(id)||!is_user_alive(id)) return

set_user_rendering(id,kRenderFxGlowShell, 0, 0, 0, _,_)

}
public maria_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasMaria[id]=(hasPowers!=0)
	if(gHasMaria[id]){
		
		g_maria_points[id]=base_points;
		g_base_radius[id]=base_radius
		set_task(MARIA_HEAL_PERIOD, "maria_heal_loop", id+MARIA_HEAL_TASKID, "", 0, "b")
		set_task(MARIA_HEAL_PERIOD, "maria_hud", id+MARIA_HUD_TASKID, "", 0, "b")
		set_task(MARIA_HEAL_PERIOD, "maria_loop", id+MARIA_STATS_TASKID, "", 0, "b")
	}
	else{
		g_maria_points[id]=0;
		g_base_radius[id]=0.0
		remove_task(id+MARIA_HUD_TASKID)
		remove_task(id+MARIA_STATS_TASKID)
		remove_task(id+MARIA_HEAL_TASKID)
	}
	
	
}
add_points(id,Float:damage){
	
	g_maria_points[id]=min(max_points,g_maria_points[id]+(floatround(damage*dmg_points_pct)))
	
	
}

calculate_healing(id,Float:values[2]){

new Float: maria_health=float(get_user_health(id))
values[0]=MARIA_HEAL_PERIOD*base_heal*selfless_index*(float(g_maria_points[id])/float(max_points))
values[1]=maria_health;

}


bool:heal_teamate(id,i){
	
	new Float:mate_health=float(get_user_health(i))
	if(mate_health>=sh_get_max_hp(i)){
		return false
	
	}
	new Float:values[2]
	calculate_healing(id,values)
	new Float: new_health=floatadd(mate_health,values[0]*points_heal_coeff)
	set_user_health(i,min(sh_get_max_hp(i),floatround(new_health)))
	sh_extra_damage(id,id,floatround(values[0]),"Selflessness",0)
	setScreenFlash(i,heal_color[0],heal_color[1],heal_color[2],3,100)
	set_task(MARIA_HEAL_PERIOD,"remove_glow_task",i+MARIA_REMOVE_GLOW_TASKID,"", 0,  "a",1)
	sh_set_rendering(i, heal_color[0],heal_color[1],heal_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)
	heal_stream(id,i)
	return true

}

public maria_heal_loop(id){

id-=MARIA_HEAL_TASKID
if(!sh_is_active()||!is_user_alive(id)) return

new client_origin[3],teamate_origin[3],distance
get_user_origin(id,client_origin);
new CsTeams:user_team= cs_get_user_team(id)
new bool:healed=false;
for(new i=1;i<=SH_MAXSLOTS;i++){
	
	if((i==id)||!is_user_connected(i)){
		
		
	}
	else if(is_user_alive(i)){
		new CsTeams:other_user_team=cs_get_user_team(i)
		if((user_team==other_user_team)){
			get_user_origin(i,teamate_origin)
			distance=get_distance(client_origin,teamate_origin)
			if(distance<g_normal_radius[id]){
				if(float(get_user_health(id))>(sh_get_max_hp(id)*(1-selfless_index))){
					healed=heal_teamate(id,i)
					
				}
			}
		}
	}
	
	
}
if(healed){

	setScreenFlash(id,heal_color[0],heal_color[1],heal_color[2],3,100)	
	sh_set_rendering(id, heal_color[0],heal_color[1],heal_color[2],(float(maria_alpha)/float(255)),kRenderTrans, kRenderTransAlpha)
	set_task(MARIA_HEAL_PERIOD,"remove_glow_task",id+MARIA_REMOVE_GLOW_TASKID,"", 0,  "a",1)	
	heal_aura(id)

}
make_shockwave(id,client_origin)

}
public heal_aura(id){
	
	new origin[3]
	
	get_user_origin(id, origin, 1)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(27)
	write_coord(origin[0])	//pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(15)
	write_byte( hud_color[0] )				// r, g, b
	write_byte( hud_color[1] )				// r, g, b
	write_byte( hud_color[2] )				// r, g, b
	write_byte(3)			// life
	write_byte(1)			// decay
	message_end()
	
}

public make_shockwave(id,point[3]){
	
	
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 21 )
	write_coord(point[0])
	write_coord(point[1])
	write_coord(point[2]-10)
	write_coord(point[0])
	write_coord(point[1])
	write_coord(point[2] + floatround(g_normal_radius[id]))
	write_short( sprite1 )
	write_byte( 0 )
	write_byte(1)		// frame rate in 0.1's
	write_byte(6)		// life in 0.1's
	write_byte(2)		// line width in 0.1's
	write_byte(1)		// noise amplitude in 0.01's
	write_byte( hud_color[0])
	write_byte( hud_color[1] )
	write_byte( hud_color[2] )
	write_byte( 10)
	write_byte( 0 )
	message_end()
}
public heal_stream(id, x)
{
	
	new origin[3]
	
	get_user_origin(id, origin, 1)
	
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( 8 )
	write_short(id)				// start entity
	write_short(x)				// entity
	write_short(m_spriteTexture)		// model
	write_byte( 0 ) 				// starting frame
	write_byte( 30 )  			// frame rate
	write_byte( 1)  			// life
	write_byte( 45)  		// line width
	write_byte( 0 )  			// noise amplitude
	write_byte( hud_color[0] )				// r, g, b
	write_byte( hud_color[1] )				// r, g, b
	write_byte( hud_color[2] )				// r, g, b
	write_byte( 255 )				// brightness
	write_byte( 8 )				// scroll speed
	message_end()
	
}
public maria_hud(id){
	id-=MARIA_HUD_TASKID
	new hud_msg[1000];
	
	if(!is_user_alive(id)||!is_user_connected(id)||!gHasMaria[id]) return
	format(hud_msg,499,"[SH] %s:^nBase Points: %d^nPoints: %d^nMax Points: %d^nHeal radius: %0.2f^n",
					gHeroName,
					base_points,
					g_maria_points[id],
					max_points,
					g_normal_radius[id]
					);
	
	set_hudmessage(hud_color[0], hud_color[1], hud_color[2], 1.0, 0.5, hud_color[3], 0.0, 0.5,0.0,0.0,1)
	ShowSyncHudMsg(id, hud_sync, "%s", hud_msg)
	
	
	
}
public maria_damage(id)
{
	if ( !shModActive() || !is_user_alive(id)||!is_user_connected(id) ||!gHasMaria[id]) return
	
	new  Float:damage= float(read_data(2))
	
	add_points(id,damage)
}
public fw_traceline(Float:v1[3],Float:v2[3],noMonsters,id)
{
	if( !sh_is_active() || !is_user_alive(id) ||!gHasMaria[id] )
		return FMRES_IGNORED;
	
	
	
	// get crosshair aim
	static iMyAim[3], Float:flMyAim[3];
	get_user_origin(id, iMyAim, 3);
	IVecFVec(iMyAim, flMyAim);
	
	// set crosshair aim
	set_tr(TR_vecEndPos, flMyAim);
	
	// get ent looking at
	static ent, body;
	get_user_aiming(id, ent, body);
	
	// if looking at something
	if( pev_valid(ent))
	{
		if((pev(ent,pev_solid)==SOLID_SLIDEBOX)&&(get_user_team(id)==get_user_team(ent))){
			new hud_msg[128]
			new client_name[127]
			get_user_name(ent,client_name,127)
			new client_health=get_user_health(ent)
			format(hud_msg,127,"[SH] %s: HP of %s: %d/%d",gHeroName,client_name,client_health,sh_get_max_hp(ent))
			set_hudmessage(hud_color[0], hud_color[1], hud_color[2], -1.0, -1.0, hud_color[3], 0.0, 0.1,0.0,0.0,1)
			ShowSyncHudMsg(id, hud_sync_health, "%s", hud_msg)
			
		}	
		
	}	
	return FMRES_IGNORED;
}
public maria_loop(id){
	
	id-=MARIA_STATS_TASKID;
	
	if(gHasMaria[id]){
		
		update_stats(id)
		
		
	}
	
	
}
update_stats(id){
	
	if(gHasMaria[id]){
		////g_normal_speed[id]=900.0-float(g_adriano_points[id])
		
		g_normal_radius[id]=floatmin(floatadd(g_base_radius[id],floatmul(float(g_maria_points[id]),points_radius_pct)),max_radius);
		
	}
	
	
}

public adriano_kd()
{
	new temp[6]
	
	// First Argument is an id with colussus Powers!
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id)||!gHasMaria[id]) return PLUGIN_HANDLED
	
	heal_teamate(id,id)
	
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{	
	if(is_user_alive(id) && shModActive()){
		if ( gHasMaria[id]) {
			g_maria_points[id]=base_points;
		}
	}
	return PLUGIN_HANDLED
	
}
public plugin_precache()
{
	m_spriteTexture = precache_model("sprites/laserbeam.spr")
	sprite1 = precache_model("sprites/white.spr")
	
}
public sh_round_end(){
	
	
	
}

public death(){
	
	
}


#include "../my_include/superheromod.inc"
#include <fakemeta_util>
#include "jetplane_inc/sh_jetplane_funcs.inc"
#include "jetplane_inc/sh_jetplane_engine_funcs.inc"
#include "jetplane_inc/sh_yandere_get_set.inc"
#include "sh_aux_stuff/sh_aux_inc.inc"


#define PLUGIN "Superhero yandere jetty funcs"
#define VERSION "1.0.0"
#define AUTHOR "Me"
#define Struct				enum


new Float:jetplane_speed,
Float:fuel_spend,
Float:jetplane_fuel;


//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin(PLUGIN, VERSION, AUTHOR)

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("yandere_jetplane_fuel", "5")
	register_cvar("yandere_jetplane_fuel_spend", "5")
	register_cvar("yandere_jetplane_speed", "5")
	register_forward(FM_CmdStart, "OnCmdStart")




}
public plugin_cfg(){


	loadCVARS()
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	jetplane_speed=get_cvar_float("yandere_jetplane_speed");
	jetplane_fuel=get_cvar_float("yandere_jetplane_fuel");
	fuel_spend=get_cvar_float("yandere_jetplane_fuel_spend");
}
public plugin_natives(){

	register_native("get_jet_fuel","_get_jet_fuel",0);
	register_native("set_jet_fuel","_set_jet_fuel",0);
	register_native("get_user_fuel_ammount","_get_user_fuel_ammount",0);
	register_native("set_user_fuel_ammount","_set_user_fuel_ammount",0);
	register_native("reset_jet_fuel","_reset_jet_fuel",0);
	register_native("reset_user_fuel_ammount","_reset_user_fuel_ammount",0);

}
public Float:_get_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)
	
	new Float:fuel_ammount=float(pev(jet_id,pev_fuser1))
	return fuel_ammount;

}
public _set_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)
	new Float:fuel_ammount=get_param_f(2)

	set_pev(jet_id,pev_fuser1,fuel_ammount)
}
public _reset_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)

	set_pev(jet_id,pev_fuser1,jetplane_fuel)
}
public Float:_get_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	return get_jet_fuel(jet_get_user_jet(id))

}
public _set_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	new Float:fuel_ammount=get_param_f(2)
	return set_jet_fuel(jet_get_user_jet(id),fuel_ammount)

}
public _reset_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	return reset_jet_fuel(jet_get_user_jet(id))

}
public OnCmdStart(id)
{
	if(!client_hittable(id)){
			
		return
	}
	if(!yandere_get_has_yandere(id)){
			
		return
	}
	if(!jet_deployed(id)){
			
		return
	}
	static button; button = entity_get_int(id, EV_INT_button);
	if((get_user_fuel_ammount(id)> 0.0) && (button & IN_DUCK) && (button & IN_JUMP))
	{ 
		static Float:Velocity[3]
		velocity_by_aim(id, floatround(jetplane_speed), Velocity)
		
		new Float:angles[3]
		entity_get_vector(id, EV_VEC_v_angle, angles)
		entity_set_vector(jet_get_user_jet(id), EV_VEC_v_angle, angles)
		entity_get_vector(id, EV_VEC_angles, angles)
		entity_set_vector(jet_get_user_jet(id), EV_VEC_angles, angles)
		
		entity_set_vector(jet_get_user_jet(id), EV_VEC_velocity, Velocity)
		
		set_user_fuel_ammount(id,get_user_fuel_ammount(id)-fuel_spend)
		
		
	}
	else{
		if((get_user_fuel_ammount(id) < jetplane_fuel) && (entity_get_int(id, EV_INT_flags) & FL_ONGROUND)) //bugfix: only refill gas when on the ground
		{
			set_user_fuel_ammount(id,get_user_fuel_ammount(id)+fuel_spend)
		}
		
	}
	
}
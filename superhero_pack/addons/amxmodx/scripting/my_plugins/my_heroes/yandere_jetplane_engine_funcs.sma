
#include "../my_include/superheromod.inc"
#include <fakemeta_util>
#include "jetplane_inc/sh_jetplane_funcs.inc"
#include "jetplane_inc/sh_jetplane_engine_funcs.inc"
#include "jetplane_inc/sh_yandere_get_set.inc"
#include "sh_aux_stuff/sh_aux_inc.inc"
#include "sh_aux_stuff/sh_aux_inc_pt2.inc"


#define PLUGIN "Superhero yandere jetty funcs"
#define VERSION "1.0.0"
#define AUTHOR "Me"
#define Struct				enum


new Float:jetplane_speed,
Float:fuel_spend,
Float:accelerate_const,
Float:turn_inc_const,
Float:max_turn_const,
Float:jetplane_fuel;
new g_jetplane_throttle[SH_MAXSLOTS+1]
new g_jetplane_airbrakes[SH_MAXSLOTS+1]
new g_jetplane_leftflapon[SH_MAXSLOTS+1]
new g_jetplane_rightflapon[SH_MAXSLOTS+1]
new g_jetplane_upflapon[SH_MAXSLOTS+1]
new g_jetplane_downflapon[SH_MAXSLOTS+1]

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin(PLUGIN, VERSION, AUTHOR)

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("yandere_jetplane_fuel", "5")
	register_cvar("yandere_jetplane_fuel_spend", "5")
	register_cvar("yandere_jetplane_speed", "5")
	register_cvar("yandere_jetplane_accelerate_const", "5")
	register_cvar("yandere_jetplane_turn_inc_const","5")
	register_cvar("yandere_jetplane_max_turn_const","5")
	register_forward(FM_CmdStart, "OnCmdStart")




}
public plugin_cfg(){


	loadCVARS()
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	jetplane_speed=get_cvar_float("yandere_jetplane_speed");
	jetplane_fuel=get_cvar_float("yandere_jetplane_fuel");
	accelerate_const=get_cvar_float("yandere_jetplane_accelerate_const");
	max_turn_const=get_cvar_float("yandere_jetplane_max_turn_const");
	turn_inc_const=get_cvar_float("yandere_jetplane_turn_inc_const");
	fuel_spend=get_cvar_float("yandere_jetplane_fuel_spend");
}
public plugin_natives(){

	register_native("get_jet_fuel","_get_jet_fuel",0);
	register_native("set_jet_fuel","_set_jet_fuel",0);
	register_native("get_jet_fuel_spend","_get_jet_fuel_spend",0);
	register_native("get_jet_throttle","_get_jet_throttle",0);
	register_native("set_jet_throttle","_set_jet_throttle",0);
	register_native("get_jet_airbrakes","_get_jet_airbrakes",0);
	register_native("set_jet_airbrakes","_set_jet_airbrakes",0);
	register_native("get_jet_rightflapon","_get_jet_rightflapon",0);
	register_native("set_jet_rightflapon","_set_jet_rightflapon",0);
	register_native("get_jet_leftflapon","_get_jet_leftflapon",0);
	register_native("set_jet_leftflapon","_set_jet_leftflapon",0);
	
	register_native("get_jet_downflapon","_get_jet_downflapon",0);
	register_native("set_jet_downflapon","_set_jet_downflapon",0);
	register_native("get_jet_upflapon","_get_jet_upflapon",0);
	register_native("set_jet_upflapon","_set_jet_upflapon",0);
	
	register_native("get_jet_accelerate_const","_get_jet_accelerate_const",0);
	register_native("jet_get_max_turn_const","_jet_get_max_turn_const",0);
	register_native("jet_get_turn_inc_const","_jet_get_turn_inc_const",0);
	register_native("get_jet_speed","_get_jet_speed",0);
	register_native("get_user_fuel_ammount","_get_user_fuel_ammount",0);
	register_native("set_user_fuel_ammount","_set_user_fuel_ammount",0);
	register_native("reset_jet_fuel","_reset_jet_fuel",0);
	register_native("reset_user_fuel_ammount","_reset_user_fuel_ammount",0);
/*
native get_jet_rightflapon(id)
native set_jet_rightflapon(id,on_or_of)
native get_jet_leftflapon(id)
native set_jet_leftflapon(id,on_or_of)
native jet_get_turn_inc_const()
native jet_get_max_turn_const()
*/
}

public Float:_jet_get_turn_inc_const(iPlugins,iParams){
	return turn_inc_const
}
public Float:_jet_get_max_turn_const(iPlugins,iParams){
	return max_turn_const
}
public Float:_get_jet_accelerate_const(iPlugins,iParams){
	return accelerate_const
}
public _set_jet_leftflapon(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_leftflapon[id]=on_or_off
}
public _get_jet_leftflapon(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_leftflapon[id]
}

public _set_jet_rightflapon(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_rightflapon[id]=on_or_off
}
public _get_jet_rightflapon(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_rightflapon[id]
}


public _set_jet_upflapon(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_upflapon[id]=on_or_off
}
public _get_jet_upflapon(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_upflapon[id]
}

public _set_jet_downflapon(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_downflapon[id]=on_or_off
}
public _get_jet_downflapon(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_downflapon[id]
}






public _set_jet_throttle(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_throttle[id]=on_or_off
}
public _get_jet_throttle(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_throttle[id]
}
public _set_jet_airbrakes(iPlugins,iParams){
	new id=get_param(1)
	new on_or_off=get_param(2)
	g_jetplane_airbrakes[id]=on_or_off
}
public _get_jet_airbrakes(iPlugins,iParams){
	new id=get_param(1)

	return g_jetplane_airbrakes[id]
}
public Float:_get_jet_speed(iPlugins,iParams){
	return jetplane_speed
}
public Float:_get_jet_fuel_spend(iPlugins,iParams){
	
	return fuel_spend;

}
public Float:_get_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)
	
	new Float:fuel_ammount=float(pev(jet_id,pev_fuser1))
	return fuel_ammount;

}
public _set_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)
	new Float:fuel_ammount=get_param_f(2)

	set_pev(jet_id,pev_fuser1,fuel_ammount)
}
public _reset_jet_fuel(iPlugins,iParams){
	new jet_id=get_param(1)

	set_pev(jet_id,pev_fuser1,jetplane_fuel)
}
public Float:_get_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	return get_jet_fuel(jet_get_user_jet(id))

}
public _set_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	new Float:fuel_ammount=get_param_f(2)
	return set_jet_fuel(jet_get_user_jet(id),fuel_ammount)

}
public _reset_user_fuel_ammount(iPlugins,iParams){
	
	new id=get_param(1)
	return reset_jet_fuel(jet_get_user_jet(id))

}
public OnCmdStart(id,uc_handle)
{
	if(!client_hittable(id)){
			
		return FMRES_IGNORED
	}
	if(!yandere_get_has_yandere(id)){
			
		return FMRES_IGNORED
	}
	if(!jet_deployed(id)){
		return FMRES_IGNORED
	}
	
	new button = get_uc(uc_handle, UC_Buttons);
	
	g_jetplane_throttle[id]=(button & IN_FORWARD)
	g_jetplane_airbrakes[id]=(button &  IN_BACK)
	g_jetplane_leftflapon[id]=(button & IN_MOVELEFT)
	g_jetplane_rightflapon[id]=(button &  IN_MOVERIGHT)
	g_jetplane_upflapon[id]=(button & IN_JUMP)
	g_jetplane_downflapon[id]=(button &  IN_DUCK)
	if((button & IN_FORWARD)){
		
		button&=~IN_FORWARD
	}
	if((button & IN_BACK)){
		
		button&=~IN_BACK
	}
	if((button & IN_MOVELEFT)){
		
		button&=~IN_MOVELEFT
	}
	if((button & IN_MOVERIGHT)){
		
		button&=~IN_MOVERIGHT
	}
	if((button & IN_JUMP)){
		
		button&=~IN_JUMP
	}
	if((button & IN_DUCK)){
		
		button&=~IN_DUCK
	}
	if((get_user_fuel_ammount(id)> 0.0) && (button & IN_DUCK) )
	{ 
		
		button &=~IN_DUCK
		set_uc(uc_handle, UC_Buttons, button);
		set_user_fuel_ammount(id,floatmax(0.0,get_user_fuel_ammount(id)-get_jet_fuel_spend()))
		return FMRES_HANDLED
			
	}
	else{
		if((get_user_fuel_ammount(id) < jetplane_fuel) && (entity_get_int(id, EV_INT_flags) & FL_ONGROUND)) //bugfix: only refill gas when on the ground
		{
			set_user_fuel_ammount(id,floatmin(jetplane_fuel,get_user_fuel_ammount(id)+fuel_spend))
		}
		
	}
	return FMRES_SUPERCEDE
	
		
	
}

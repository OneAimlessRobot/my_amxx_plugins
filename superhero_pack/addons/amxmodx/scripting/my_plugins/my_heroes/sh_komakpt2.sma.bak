

#include "../my_include/superheromod.inc"
#define KOMAK_HITZONE_TASKID 13321
#define KOMAK_STATS_TASKID 14001
#define KOMAK_HUD_TASKID 14221
#define KOMAK_REPAIR_TASKID 17221
//https://forums.alliedmods.net/showthread.php?p=777018#post777018

#define KOMAK_MISSED_SHOT "shmod/komak/missed_shot.wav"
#define KOMAK_GEAR_UP "shmod/komak/gear_up.wav"
#define KOMAK_BLOWN_ENGINE "shmod/komak/engine_down.wav"
#define KOMAK_FAST_SHOT "shmod/komak/fast_shot.wav"

#define BLOW_ENGINE 0
#define RESET_ON_MISS 1
#define FAST_RELOAD_BITSUM ((1<<CSW_KNIFE)|(1<<CSW_HEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_SMOKEGRENADE)|(1<<CSW_C4))

// weapons offsets
const m_pPlayer            = 41
const m_iId                = 43
const m_flNextPrimaryAttack    = 46
const m_flNextSecondaryAttack    = 47
const m_flTimeWeaponIdle        = 48
const m_fInReload            = 54

const m_flNextAttack = 83

stock const Float:g_fReloadDelay[CSW_P90+1] = {
	0.00, 2.70, 0.00, 2.00, 0.00, 0.55,   0.00, 3.15, 3.30, 0.00, 4.50, 
	2.70, 3.50, 3.35, 2.45, 3.30,   2.70, 2.20, 2.50, 2.63, 4.70, 
	0.55, 3.05, 2.12, 3.50, 0.00,   2.20, 3.00, 2.45, 0.00, 3.40
}
//https://forums.alliedmods.net/showthread.php?p=777018#post777018

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Komak the Maid"
new bool:gHasKomak[SH_MAXSLOTS+1]
new g_komak_hits[SH_MAXSLOTS+1]
new g_komak_gear[SH_MAXSLOTS+1]
new Float:gCurrReloadRatio[SH_MAXSLOTS+1]
new Float:gCurrFireRatio[SH_MAXSLOTS+1]
new g_komak_misses[SH_MAXSLOTS+1]
new bool:gClutchDown[SH_MAXSLOTS+1]
new gEngineRepairTimer[SH_MAXSLOTS+1]

new const redline_color[4]={255,1,1,1}
new const broken_color[4]={10,10,10,0}
new const good_color[4]={1,255,1,0}
new const top_speed_color[4]={1,1,255,1}

#define MAX_GEARS 10
new Float:gear_ratios[MAX_GEARS]

new gLastWeapon[SH_MAXSLOTS+1]
new gLastClipCount[SH_MAXSLOTS+1]
/*
new const yandere_sentences[5][]={
	"Hiss.... Hiss.... Hiss.... Hiss.....",
	"Where are you... where... are you...",
	"Come out to plaaaaayyyy... There is NO WAY IM LETTING ANY OF YOU GO NOW!!!!!",
	"I hear their voices... I hear them... Then want... they want... red and black",
	"I want... all your blood. All of it.... and water the graves of my family with it."
}*/
/*new m_spriteTexture

new Float:base_dmg_mult,*/
new Float:base_reload_ratio
new Float:base_fire_ratio
new Float:max_reload_ratio
new Float:max_fire_ratio
new Float:reload_ratio_per_hit
new Float:fire_ratio_per_hit
new blown_engine_cooldown
new max_gears
new max_misses
new max_rpm
new red_line
new Float:gear_ratio
new hud_sync
new gHeroLevel

#define SENDAUDIO_MESSAGE_PITCH_ARG 3

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Komak the Maid", "1.0", "TastyMedula")
	register_event("CurWeapon","Event_CurWeapon", "b")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("komak_level", "8")
	register_cvar("komak_base_reload_ratio", "0.2")
	register_cvar("komak_gear_ratio", "3")
	register_cvar("komak_max_gears", "5")
	register_cvar("komak_max_misses", "10")
	register_cvar("komak_max_rpm", "10")
	register_cvar("komak_base_fire_ratio", "0.2")
	register_cvar("komak_max_reload_ratio", "0.2")
	register_cvar("komak_max_fire_ratio", "0.2")
	register_cvar("komak_fire_ratio_per_hit", "0.2")
	register_cvar("komak_reload_ratio_per_hit", "0.2")
	register_cvar("komak_red_line", "20")
	register_cvar("komak_blown_engine_cooldown", "30" )
	register_event("ResetHUD","newRound","b")
	gHeroID=shCreateHero(gHeroName, "Mechanical maid", "Change gears, hit players and hit faster!", true, "komak_level" )
	hud_sync=CreateHudSyncObj()
	register_event("DeathMsg","death","a")
	register_srvcmd("komak_init", "komak_init")
	shRegHeroInit(gHeroName, "komak_init")
	RegisterHam(Ham_TraceAttack,"worldspawn","trace_komakerypt2")
	RegisterHam(Ham_TraceAttack,"player","trace_komakerypt2")
	register_srvcmd("komak_kd", "komak_kd")
	shRegKeyDown(gHeroName, "komak_kd")
	register_srvcmd("komak_ku", "komak_ku")
	shRegKeyUp(gHeroName, "komak_ku")
	
	
	new wpnName[32]
	for ( new wpnId = CSW_P228; wpnId <= CSW_P90; wpnId++ )
	{
		if ( !(FAST_RELOAD_BITSUM & (1<<wpnId)) && get_weaponname(wpnId, wpnName, charsmax(wpnName)) )
		{
			RegisterHam(Ham_Item_PostFrame, wpnName, "Item_PostFrame_Post", 1)
		}
	}
}


public Item_PostFrame_Post(iEnt)
{    
	new id = entity_get_edict(iEnt, EV_ENT_owner);
	if (!sh_is_active()||!gHasKomak[id])return HAM_IGNORED
	
	if( get_pdata_int(iEnt, m_fInReload, 4) )
	{
		new Float:fDelay = floatdiv(g_fReloadDelay[get_pdata_int(iEnt, m_iId, 4)], gCurrReloadRatio[id])
		set_pdata_float(get_pdata_cbase(iEnt, m_pPlayer, 4), m_flNextAttack, fDelay, 5)
		set_pdata_float(iEnt, m_flTimeWeaponIdle, fDelay + 0.5, 4)
	}
	return HAM_IGNORED
} 
public komak_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasKomak[id]=(hasPowers!=0)
	if(gHasKomak[id]){
		set_task(0.1, "hitzone_loop", id+KOMAK_HITZONE_TASKID, "", 0, "b")
		set_task(0.1, "stats_komak_task", id+KOMAK_STATS_TASKID, "", 0, "b")
		set_task(0.1, "komak_hud_task", id+KOMAK_HUD_TASKID, "", 0, "b")
		set_task(1.0, "engine_repair_loop", id+KOMAK_REPAIR_TASKID, "", 0, "b")
		
	}
	else{
		remove_task(id+KOMAK_HITZONE_TASKID)
		remove_task(id+KOMAK_STATS_TASKID)
		remove_task(id+KOMAK_HUD_TASKID)
		remove_task(id+KOMAK_REPAIR_TASKID)
	}
	
	
}

public komak_hitzones(id)
{
	if ( !shModActive() || !hasRoundStarted() ) return PLUGIN_CONTINUE
	if ( gHasKomak[id] && is_user_alive(id) ) {
		
		set_user_hitzones(0, id, HITZONES_DEFAULT & (~HITZONE_LEFTARM))	//remove left arm hitzone
		new client_name[128]
		get_user_name(id,client_name,127)
	}
	return PLUGIN_CONTINUE
}
public komak_is_top_speed(id){

	return !((gCurrFireRatio[id]<max_fire_ratio)||(gCurrReloadRatio[id]<max_reload_ratio))
}

public trace_komakerypt2(this, idattacker, Float:damage, Float:direction[3], traceresult, damagebits)
{
	if( !sh_is_active() || !is_user_alive(idattacker) || !gHasKomak[idattacker]|| gPlayerUltimateUsed[idattacker] ) return HAM_IGNORED;
	
	
	
	// get ent looking at
	static  body;
	get_user_aiming(idattacker, this, body);
	if( pev_valid(this)&&!gClutchDown[idattacker])
	{
		set_tr(TR_flFraction, 0.1); // 1.0 == no hit, < 1.0 == hit
		set_tr(TR_pHit, this); // entity hit
		set_tr(TR_iHitgroup, body); // bodypart hit
		if((pev(this,pev_solid)==SOLID_SLIDEBOX)){
			if(g_komak_hits[idattacker]>red_line){
			
				emit_sound(idattacker,CHAN_ITEM,  KOMAK_FAST_SHOT, 1.0, ATTN_NORM, 0, komak_pitch(idattacker))
			
			}
			
			if(!komak_is_top_speed(idattacker)&&!(cs_get_user_team(this)==cs_get_user_team(idattacker))){
				g_komak_hits[idattacker]=min(g_komak_hits[idattacker]+1,max_rpm);
				g_komak_misses[idattacker]=0
			}
			if((g_komak_hits[idattacker]>=max_rpm)&&BLOW_ENGINE){
			
				reset_komak(idattacker)
				ultimateTimer(idattacker, blown_engine_cooldown * 1.0)
				gEngineRepairTimer[idattacker]=blown_engine_cooldown
				sh_chat_message(idattacker,gHeroID,"Blown engine!!!!")
				emit_sound(idattacker,CHAN_ITEM,  KOMAK_BLOWN_ENGINE, 1.0, ATTN_NORM, 0, PITCH_NORM)
			
				
			}
			
		}
	}
	else if(((pev(this,pev_solid)==SOLID_BSP)&&!gClutchDown[idattacker]&&RESET_ON_MISS)){
		
		if(!komak_is_top_speed(idattacker)&&(g_komak_gear[idattacker]>1)){
			emit_sound(idattacker,CHAN_ITEM,  KOMAK_MISSED_SHOT, 1.0, ATTN_NORM, 0, PITCH_NORM)
			g_komak_misses[idattacker]=min(g_komak_misses[idattacker]+1,max_misses);
			if(g_komak_misses[idattacker]==max_misses){
				komak_gear_change(idattacker,false)
			}
		}
		
	}
	return HAM_IGNORED;
}
public hitzone_loop(id){
	
	id-=KOMAK_HITZONE_TASKID;
	
	if(gHasKomak[id]){
		
		komak_hitzones(id)
		
		
	}
	
	
}
public engine_repair_loop(id){
	
	id-=KOMAK_REPAIR_TASKID;
	
	if(gHasKomak[id]&&(gEngineRepairTimer[id]>0)){
		
		gEngineRepairTimer[id]--;
		
		
	}
	
	
}
public komak_hud_task(id){
	id-=KOMAK_HUD_TASKID
	if(gHasKomak[id]){
		komak_hud(id)
		
	
	}
	

}
komak_hud(id){
	new hud_msg[128];
	format(hud_msg,127,"[SH] %s:^nGear: %d^nCurr rpm: %d|%d^nMisses in a row: %d^nEngine broken? %s^n",
					gHeroName,
					g_komak_gear[id],
					g_komak_hits[id],
					max_rpm,
					g_komak_misses[id],
					gEngineRepairTimer[id]>0? "Yeah...":"Nope... ALL ready!"
					);
	
	if(gEngineRepairTimer[id]>0){
		set_hudmessage(broken_color[0], broken_color[1], broken_color[2], 1.0, 0.2, broken_color[3], 0.0, 0.5,0.0,0.0,1)
	}
	else if(komak_is_top_speed(id)){
		set_hudmessage(top_speed_color[0], top_speed_color[1], top_speed_color[2], 1.0, 0.2, top_speed_color[3], 0.0, 0.5,0.0,0.0,1)
	}
	else if(g_komak_hits[id]>red_line){
		set_hudmessage(redline_color[0], redline_color[1], redline_color[2], 1.0, 0.2, redline_color[3], 0.0, 0.5,0.0,0.0,1)
	}
	else{
		set_hudmessage(good_color[0], good_color[1], good_color[2], 1.0, 0.2, good_color[3], 0.0, 0.5,0.0,0.0,1)
	}
	ShowSyncHudMsg(id, hud_sync, "%s", hud_msg)



}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
	gear_ratios[0]=1.0
	for(new i=1;i<=max_gears;i++){
		gear_ratios[i]=floatmul(gear_ratios[i-1],gear_ratio)
	
	
	}
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	
	gHeroLevel=get_cvar_num("komak_level")
	base_reload_ratio=get_cvar_float("komak_base_reload_ratio")
	base_fire_ratio=get_cvar_float("komak_base_fire_ratio")
	gear_ratio=get_cvar_float("komak_gear_ratio")
	max_gears=get_cvar_num("komak_max_gears")
	max_rpm=get_cvar_num("komak_max_rpm")
	max_misses=get_cvar_num("komak_max_misses")
	red_line=get_cvar_num("komak_red_line")
	max_reload_ratio=get_cvar_float("komak_max_reload_ratio")
	blown_engine_cooldown=get_cvar_num("komak_blown_engine_cooldown")
	max_fire_ratio=get_cvar_float("komak_max_fire_ratio")
	reload_ratio_per_hit=get_cvar_float("komak_reload_ratio_per_hit")
	fire_ratio_per_hit=get_cvar_float("komak_fire_ratio_per_hit")
	max_gears=min(max_gears,MAX_GEARS)
}
public reset_komak(id){

	if ( gHasKomak[id]) {
		g_komak_misses[id]=0;
		g_komak_hits[id]=0;
		g_komak_gear[id]=1;
		gCurrFireRatio[id]=base_fire_ratio;
		gCurrReloadRatio[id]=base_reload_ratio;
	}

}
public stats_komak_task(id){

	id-=KOMAK_STATS_TASKID
	if ( gHasKomak[id]) {
		
		stats_komak(id)
	}

}
Float:get_max_added_fire_ratio(id){

	
	return floatmin(max_fire_ratio,floatmul(floatmul(gear_ratios[clamp(0,g_komak_gear[id]-1)],float(max_rpm)),fire_ratio_per_hit))
	

}
Float:get_max_added_reload_ratio(id){

	
	return floatmin(max_reload_ratio,floatmul(floatmul(gear_ratios[clamp(0,g_komak_gear[id]-1)],float(max_rpm)),reload_ratio_per_hit))
	

}
Float:get_added_fire_ratio(id){

	
	new Float:float_hits=float(g_komak_hits[id])
	
	return floatmul(float_hits*gear_ratios[clamp(0,g_komak_gear[id]-1)],fire_ratio_per_hit)
	

}
Float:get_added_reload_ratio(id){

	new Float:float_hits=float(g_komak_hits[id])

	return floatmul(float_hits*gear_ratios[clamp(0,g_komak_gear[id]-1)],reload_ratio_per_hit)
	

}
stats_komak(id){
	gCurrFireRatio[id]=floatadd(base_fire_ratio,floatmin(get_max_added_fire_ratio(id),get_added_fire_ratio(id)))
	gCurrReloadRatio[id]=floatadd(base_reload_ratio,floatmin(get_max_added_reload_ratio(id),get_added_reload_ratio(id)))
}
public komak_gear_change(id,is_up){
	
	new increment= is_up?1:-1
	new the_gear=max(1,min(g_komak_gear[id]+increment,max_gears))
	g_komak_hits[id]=(!is_up&&the_gear==1)?0:min(max_rpm,floatround(float(g_komak_hits[id])*(gear_ratios[g_komak_gear[id]]/gear_ratios[the_gear])))
	g_komak_gear[id]=the_gear
	g_komak_misses[id]=0
	
}
public komak_kd()
{
	new temp[6]
	
	// First Argument is an id with colussus Powers!
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id)||!gHasKomak[id]||(g_komak_gear[id]==max_gears)) return PLUGIN_HANDLED
	
	if ( gPlayerUltimateUsed[id] ) {
		sh_chat_message(id,gHeroID,"Youve blown the engine! Wait %d more seconds!",gEngineRepairTimer[id])
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}
	gClutchDown[id]=true;
	
	return PLUGIN_HANDLED
}
public komak_pitch(id){

	return floatround(float(g_komak_hits[id])/float(max_rpm)*float(150))

}
public komak_ku()
{
	new temp[6]
	
	// First Argument is an id with colussus Powers!
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id)||!gHasKomak[id]||!gClutchDown[id]) return PLUGIN_HANDLED
	
	gClutchDown[id]=false
	emit_sound(id,CHAN_WEAPON,  KOMAK_GEAR_UP, 1.0, ATTN_NORM, 0, PITCH_NORM)
	komak_gear_change(id,true)
	
	return PLUGIN_HANDLED
}
public Event_CurWeapon(id) 
{ 
	new Gun = read_data(2) 
	
	if( !gHasKomak[id] || !Gun || Gun==6 || Gun==29 || Gun>30)return		
	
	new Ammo = read_data(3) 	
	if(gLastWeapon[id] != Gun || gLastClipCount[id] == Ammo)
	{
		gLastWeapon[id]= Gun
		gLastClipCount[id] = Ammo 
		return
	}
	gLastWeapon[id] = Gun
	gLastClipCount[id] = Ammo 
	
	static Float:N_Speed
	if(gHasKomak[id]) N_Speed =gCurrFireRatio[id]
	
	if(N_Speed != 1.0)
	{
		static weapon[32],Ent
		get_weaponname(Gun,weapon,31)
		Ent = fm_find_ent_by_owner(-1,weapon,id)
		if(Ent)
		{
			static Float:Delay,Float:M_Delay
			Delay =floatdiv(get_pdata_float( Ent, 46, 4) ,N_Speed)
			M_Delay =floatdiv(get_pdata_float( Ent, 47, 4) ,N_Speed)
			if (Delay > 0.0)
			{
				set_pdata_float( Ent, 46, Delay, 4)
				set_pdata_float( Ent, 47, M_Delay, 4)
			}
		}
	}
}//Frome Fakemeta utility
stock fm_find_ent_by_owner(index, const classname[], owner, jghgtype = 0)
{
	new strtype[11] = "classname", ent = index
	switch (jghgtype) 
	{
		case 1: strtype = "target"
		case 2: strtype = "targetname"
		}
		
	while ((ent = engfunc(EngFunc_FindEntityByString, ent, strtype, classname)) && pev(ent, pev_owner) != owner) {}
		
	return ent
}
	
//----------------------------------------------------------------------------------------------
public newRound(id)
{	
if(is_user_alive(id) && shModActive()&&gHasKomak[id]){ 
	reset_komak(id)	
}
return PLUGIN_HANDLED	
}
public plugin_precache()
{
engfunc(EngFunc_PrecacheSound, KOMAK_MISSED_SHOT)
engfunc(EngFunc_PrecacheSound, KOMAK_FAST_SHOT)
engfunc(EngFunc_PrecacheSound, KOMAK_BLOWN_ENGINE)
engfunc(EngFunc_PrecacheSound, KOMAK_GEAR_UP)
		
}
public sh_round_end(){
		
		
}

public death()
{	/*
	new id = read_data(2)
	new killer= read_data(1)
	*/
}

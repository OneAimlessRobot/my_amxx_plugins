

#include "../my_include/superheromod.inc"

#define YANDERE_MORPH_TASKID 8562
#define YANDERE_STATS_TASKID 29626
#define YANDERE_ANGER_TASKID 29333
#define YANDERE_CRY_TASKID 30333
#define YANDERE_HEAL_TASKID 30911
#define YANDERE_REMOVE_GLOW_TASKID 30112

#define YANDERE_WARCRY "shmod/yandere/Yanderu_war_cry.wav"
#define YANDERE_CYCLE "shmod/yandere/yandere_cycle3.wav"
#define YANDERE_THELAST "shmod/yandere/Yandere_thelast.wav"
#define YANDERE_THELAST2 "shmod/yandere/Yandere_thelast2.wav"
#define YANDERE_THELAST3 "shmod/yandere/Yandere_thelast3.wav"
#define YANDERE_PAIN "shmod/yandere/Yandere_pain.wav"

#define YANDERE_SHOTGUN_V_MODEL "models/shmod/yandere/shotgun/v_yanderu_shotgun.mdl"
#define YANDERE_SHOTGUN_W_MODEL "models/shmod/yandere/shotgun/w_xm1014.mdl"

#define YANDERE_KNIFE_V_MODEL "models/shmod/yandere/knife/v_knife.mdl"
#define YANDERE_KNIFE_P_MODEL "models/shmod/yandere/knife/p_knife.mdl"

new const yandere_shotgun_sounds[3][]={"weapons/yandere_shotgun/balrog11_draw.wav",
"weapons/yandere_shotgun/xm1014-1.wav",
"weapons/yandere_shotgun/xm1014-insert.wav"}
#define YANDERE_PSYCHOSIS_TASKID 3026
#define UNPSYCHOSIS_TASKID 1122
#define PSYCHOSIS_PERIOD 1.0
#define PSYCHOSIS_TIMES floatround(floatdiv(psychosis_time,PSYCHOSIS_PERIOD))

const fPainShock = 108 
// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Yandere Mk.II"
new bool:gHasYandere[SH_MAXSLOTS+1]
new bool:gSuperAngry[SH_MAXSLOTS+1]
new bool:gIdleAngry[SH_MAXSLOTS+1]
new bool:g_is_cursed[SH_MAXSLOTS+1][SH_MAXSLOTS+1]
new gmorphed[SH_MAXSLOTS+1]
new bool:gToPlaySound[SH_MAXSLOTS+1]
new bool:gPlayedSound[SH_MAXSLOTS+1]
new Float:gNormalDmgMult[SH_MAXSLOTS+1]
new Float:gNormalHeal[SH_MAXSLOTS+1]
new Float:gNormalHealRadius[SH_MAXSLOTS+1]
new Float:gNormalSpeed[SH_MAXSLOTS+1]
new Float:gPrevSpeed[SH_MAXSLOTS+1]
new Float:gNormalGravity[SH_MAXSLOTS+1]
new Float:gBaseSpeed[SH_MAXSLOTS+1]
new Float:gBaseGravity[SH_MAXSLOTS+1]
new bool:gIsPsychosis[SH_MAXSLOTS+1]
new gPsychosisTime[SH_MAXSLOTS+1]
enum{
NO_HEALING=0,
RADIAL_HEALING,
GAZE_HEALING


}
new g_spriteSmoke, g_spriteRing, g_spriteExplosion
new const sounds[3][]={YANDERE_THELAST,YANDERE_THELAST2,YANDERE_THELAST3}

new MsgSetFOV
new gLastWeapon[SH_MAXSLOTS+1]
new gLastClipCount[SH_MAXSLOTS+1]

new const yandere_sentences[5][]={
	"Hiss.... Hiss.... Hiss.... Hiss.....",
	"Where are you... where... are you...",
	"Come out to plaaaaayyyy... There is NO WAY IM LETTING ANY OF YOU GO NOW!!!!!",
	"I hear their voices... I hear them... Then want... they want... red and black",
	"I want... all your blood. All of it.... and water the graves of my family with it."
}
new m_spriteTexture
new const love_color[4]={250, 92, 163,50}
new const red_color[4]={255, 0, 0, 50}
new const heal_color[4]={250,250,210, 100}
new Float:base_dmg_mult,
Float:dmg_pct_per_inc,
Float:base_heal,
Float:heal_pct_per_inc,
Float:base_heal_radius,
Float:heal_radius_inc_per_inc,
Float:base_extra_speed,
Float:speed_inc_per_inc

new Float:angry_heal,
Float:angry_speed,
Float:angry_dmg_mult,
Float:angry_gravity,
Float:angry_degen,
Float:angry_hitheal_pct,
Float:heal_base,
Float:explode_radius,
Float:explode_maxdamage,
Float:curse_pct;
new hud_sync
new Float:psychosis_time
new psychosis_cooldown
new gHeroLevel
new heal_mode
new min_players
new teamglow_on
new zoom

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Selfless Yandere", "1.0", "TastyMedula")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("yandere_level", "8")
	register_cvar("yandere_base_dmg_mult", "1.0")
	register_cvar("yandere_dmg_pct_per_inc", "0.35")
	register_cvar("yandere_heal", "1.0")
	register_cvar("yandere_heal_mode", "1")
	register_cvar("yandere_explode_radius", "1")
	register_cvar("yandere_explode_maxdamage", "1")
	register_cvar("yandere_teamglow_on", "1")
	register_cvar("yandere_heal_pct_per_inc", "0.35")
	register_cvar("yandere_heal_radius", "100")
	register_cvar("yandere_heal_base", "50.0")
	register_cvar("yandere_heal_radius_inc_per_inc", "50")
	register_cvar("yandere_base_extra_speed", "500")
	register_cvar("yandere_speed_inc_per_inc", "50")
	register_cvar("yandere_angry_heal", "0")
	register_cvar("yandere_angry_curse_pct", "0.5")
	register_cvar("yandere_angry_speed", "1000")
	register_cvar("yandere_angry_gravity", "0.25")
	register_cvar("yandere_angry_dmg_mult", "5.0")
	register_cvar("yandere_angry_degen", "10.0")
	register_cvar("yandere_angry_hitheal_pct", "1.0")
	register_cvar("yandere_psychosis_time", "5")
	register_cvar("yandere_psychosis_zoom", "5")
	register_cvar("yandere_psychosis_cooldown", "30")
	register_cvar("yandere_min_players", "6")
	register_event("ResetHUD","newRound","b")
	gHeroID=shCreateHero(gHeroName, "YANDERE!", "Heal alive teamates and avenge dead ones!", true, "yandere_level" )
	
	register_event("Damage", "yandere_damage", "b", "2!0")
	RegisterHam(Ham_TakeDamage, "player", "Player_TakeDamage", 1) 
	register_event("CurWeapon", "weaponChange", "be", "1=1")
	//register_event("CurWeapon", "weaponSpeed", "be", "1=1")
	register_event("DeathMsg","death","a")
	hud_sync=CreateHudSyncObj()
	
	register_srvcmd("yandere_init", "yandere_init")
	shRegHeroInit(gHeroName, "yandere_init")
	register_srvcmd("yandere_kd", "yandere_kd")
	shRegKeyDown(gHeroName, "yandere_kd")
	register_event("CurWeapon", "fire_weapon", "be", "1=1", "3>0")
	MsgSetFOV = get_user_msgid("SetFOV")
}

public Player_TakeDamage(id)
{
	if ( !shModActive() || !is_user_alive(id) || !gSuperAngry[id]||!(gIsPsychosis[id])) return
	
	set_pdata_float(id, fPainShock, 1.0, 5)
} 

public yandere_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasYandere[id]=(hasPowers!=0)
	if(gHasYandere[id]){
		
		gBaseSpeed[id]=base_extra_speed
		gPlayedSound[id]=false
		yandere_model(id)
		set_task( 1.0, "yandere_warcry", id+YANDERE_CRY_TASKID, "", 0, "b")
		set_task( 0.1, "yandere_loop", id+YANDERE_STATS_TASKID, "", 0, "b")
		set_task( 3.0, "yandere_sentence_loop", id+YANDERE_ANGER_TASKID, "", 0, "b")
		if(heal_mode){
			if(heal_mode==RADIAL_HEALING){	
				set_task( 1.0, "heal_players_in_radius", id+YANDERE_HEAL_TASKID, "", 0, "b")
			}
			else if(heal_mode==GAZE_HEALING){	
				set_task( 1.0, "heal_player_in_sight", id+YANDERE_HEAL_TASKID, "", 0, "b")
			}
		}
	}
	else{
		remove_task(id+YANDERE_ANGER_TASKID)
		remove_task(id+YANDERE_CRY_TASKID)
		remove_task(id+YANDERE_STATS_TASKID)
		remove_task(id+YANDERE_HEAL_TASKID)
		yandere_unmorph(id+YANDERE_MORPH_TASKID)
	}
	
	
}

public psychosis_task(id){
	id-=YANDERE_PSYCHOSIS_TASKID
	new hud_msg[100];
	format(hud_msg,99,"[SH] %s:^nPsychosis mode for %d more seconds!",
	gHeroName,
	gPsychosisTime[id]
	);
	gPsychosisTime[id]--
	set_hudmessage(love_color[0],love_color[1],love_color[2], -1.0, -1.0, 1, 0.0, 1.0,0.0,0.0,1)
	ShowSyncHudMsg(id, hud_sync, "%s", hud_msg)
	sh_screen_fade(id,0.1,1.0,love_color[0],love_color[1],love_color[2],50)
	sh_set_rendering(id, love_color[0],love_color[1],love_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)
	heal_aura(id)
	
	
	
}
psychosis_user(id){
	
	gIsPsychosis[id]=true
	psychosis_on(id)
	sh_screen_fade(id,0.1,1.0,love_color[0],love_color[1],love_color[2],50)
	set_task(PSYCHOSIS_PERIOD,"psychosis_task",id+YANDERE_PSYCHOSIS_TASKID,"",0,  "a",PSYCHOSIS_TIMES)
	set_task(floatsub(floatmul(PSYCHOSIS_PERIOD,float(PSYCHOSIS_TIMES)),0.1),"unpsychosis_task",id+UNPSYCHOSIS_TASKID,"", 0,  "a",1)
	return 0
	
	
	
}
public unpsychosis_task(id){
	id-=UNPSYCHOSIS_TASKID
	set_user_rendering(id,kRenderFxGlowShell, 0, 0, 0, _,_)
	remove_task(id+YANDERE_PSYCHOSIS_TASKID)
	gIsPsychosis[id]=false
	psychosis_off(id)
	return 0
	
	
	
}

public unpsychosis_user(id){
	remove_task(id+UNPSYCHOSIS_TASKID)
	set_user_rendering(id,kRenderFxGlowShell, 0, 0, 0, _,_)
	remove_task(id+YANDERE_PSYCHOSIS_TASKID)
	psychosis_off(id)
	return 0
	
	
	
}
//----------------------------------------------------------------------------------------------
psychosis_off(id)
{


// Reset Zoom
message_begin(MSG_ONE, MsgSetFOV, {0,0,0}, id)
write_byte(90)	//Normal, not Zooming
message_end()

}
psychosis_on(id){

message_begin(MSG_ONE, MsgSetFOV, {0,0,0}, id)
write_byte(zoom)
message_end()

}
public remove_glow_task(id){

id-=YANDERE_REMOVE_GLOW_TASKID
if(!sh_is_active()||!is_user_connected(id)||!is_user_alive(id)) return

set_user_rendering(id,kRenderFxGlowShell, 0, 0, 0, _,_)

}
public get_yandere_num(id,want_alive,want_all){

new players[SH_MAXSLOTS]
new team_name[32]
new player_count;
get_user_team(id,team_name,32)
if(want_all){
	if(!want_alive){
		get_players(players,player_count,"b")
	}
	else{
		get_players(players,player_count,"a")
		player_count--
	}
}
else{
	if(!want_alive){
		get_players(players,player_count,"eb",team_name)
	}
	else{
		get_players(players,player_count,"ea",team_name)
		player_count--
	}
}
return player_count;


}
public get_first_alive(){


for(new i=1;i<=SH_MAXSLOTS;i++){
	
	if(!is_user_connected(i)){
		
		
	}
	else if(is_user_alive(i)){
		
		return i;
	}
	
	
}
return -1;


}
public yandere_sentence_loop(id){
id-=YANDERE_ANGER_TASKID;

if(sh_is_active()&&is_user_connected(id)&&is_user_alive(id)&&gHasYandere[id]&&gSuperAngry[id]){
	
	
	if(gIdleAngry[id]){
		
		new client_name[128]
		get_user_name(id,client_name,127)
		sh_chat_message(0,gHeroID,"%s: %s",client_name,yandere_sentences[random_num(0,4)])
		sh_extra_damage(id,id,floatround(angry_degen,floatround_ceil),"Yandere longing")
		sh_screen_fade(id, 0.5, 2.5, red_color[0], red_color[1], red_color[2], 50)
		emit_sound(id, CHAN_AUTO, YANDERE_CYCLE, 1.0, 0.0, 0, PITCH_NORM)
		if(random_num(0,1)){
			emit_sound(id, CHAN_VOICE, sounds[random_num(0,2)], 1.0, 0.0, 0, PITCH_NORM)
		}
		sh_set_rendering(id, red_color[0], red_color[1], red_color[2],  255,kRenderFxGlowShell, kRenderTransAlpha)
	}
	
}


}
yandere_update_idle(id){
new butnprs

gIdleAngry[id] = true
butnprs = Entvars_Get_Int(id, EV_INT_button)

if (butnprs&IN_ATTACK || butnprs&IN_ATTACK2 || butnprs&IN_RELOAD || butnprs&IN_USE) gIdleAngry[id] = false

if (butnprs&IN_JUMP) gIdleAngry[id]  = false
if (butnprs&IN_FORWARD || butnprs&IN_BACK || butnprs&IN_LEFT || butnprs&IN_RIGHT) gIdleAngry[id] = false
if (butnprs&IN_MOVELEFT || butnprs&IN_MOVERIGHT) gIdleAngry[id]  = false



}
public heal_aura(id){

new origin[3]

get_user_origin(id, origin, 1)

message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
write_byte(27)
write_coord(origin[0])	//pos
write_coord(origin[1])
write_coord(origin[2])
write_byte(15)
write_byte(20)			// r, g, b
write_byte(200)		// r, g, b
write_byte(40)			// r, g, b
write_byte(3)			// life
write_byte(1)			// decay
message_end()

}
public kill_fx(origin[3]){

message_begin(MSG_ALL, SVC_TEMPENTITY) 
write_byte(10)	// TE_LAVASPLASH 
write_coord(origin[0]) 
write_coord(origin[1]) 
write_coord(origin[2]-26) 
message_end() 

}
public heal_stream(id, x)
{

new origin[3]

get_user_origin(id, origin, 1)

message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
write_byte( 8 )
write_short(id)				// start entity
write_short(x)				// entity
write_short(m_spriteTexture)		// model
write_byte( 0 ) 				// starting frame
write_byte( 30 )  			// frame rate
write_byte( 1)  			// life
write_byte( 45)  		// line width
write_byte( 0 )  			// noise amplitude
write_byte( 0 )				// r, g, b
write_byte( 60 )				// r, g, b
write_byte( 255 )				// r, g, b
write_byte( 255 )				// brightness
write_byte( 8 )				// scroll speed
message_end()

}

public heal_players_in_radius(id){

id-=YANDERE_HEAL_TASKID
if(!sh_is_active()||!is_user_alive(id)) return

new client_origin[3],teamate_origin[3],distance
get_user_origin(id,client_origin);
new CsTeams:user_team= cs_get_user_team(id)
for(new i=1;i<=SH_MAXSLOTS&&!gSuperAngry[id];i++){
	
	if((i==id)||!is_user_connected(i)){
		
		
	}
	else if(is_user_alive(i)){
		new CsTeams:other_user_team=cs_get_user_team(i)
		if((user_team==other_user_team)){
			get_user_origin(i,teamate_origin)
			distance=get_distance(client_origin,teamate_origin)
			if(distance<gNormalHealRadius[id]){
				new Float:mate_health=float(get_user_health(i))
				new Float: new_health=floatadd(mate_health,floatmul(gNormalHeal[id],heal_base))
				set_user_health(i,min(sh_get_max_hp(i),floatround(new_health)))
				setScreenFlash(i,heal_color[0],heal_color[1],heal_color[2],3,100)
				setScreenFlash(id,heal_color[0],heal_color[1],heal_color[2],3,100)
				sh_set_rendering(i, heal_color[0],heal_color[1],heal_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)	
				sh_set_rendering(id, heal_color[0],heal_color[1],heal_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)
				set_task(1.0,"remove_glow_task",i+YANDERE_REMOVE_GLOW_TASKID,"", 0,  "a",1)
				set_task(1.0,"remove_glow_task",id+YANDERE_REMOVE_GLOW_TASKID,"", 0,  "a",1)		
				heal_stream(id,i)
				heal_aura(id)
			}
		}
	}
	
	
}


}


public heal_player_in_sight(id){

id-=YANDERE_HEAL_TASKID
if(!sh_is_active()||!is_user_alive(id)) return

new client_origin[3],teamate_origin[3],distance
get_user_origin(id,client_origin);
new CsTeams:user_team= cs_get_user_team(id)
if(!gSuperAngry[id]){
	
	
	// get crosshair aim
	static iMyAim[3], Float:flMyAim[3];
	get_user_origin(id, iMyAim, 3);
	IVecFVec(iMyAim, flMyAim);
	
	// set crosshair aim
	set_tr(TR_vecEndPos, flMyAim);
	
	// get ent looking at
	static i, body;
	get_user_aiming(id, i, body);
	
	if((i==id)||!is_user_connected(i)){
		
		
	}
	else if(is_user_alive(i)){
		new CsTeams:other_user_team=cs_get_user_team(i)
		if((user_team==other_user_team)){
			get_user_origin(i,teamate_origin)
			distance=get_distance(client_origin,teamate_origin)
			if(distance<gNormalHealRadius[id]){
				new Float:mate_health=float(get_user_health(i))
				new Float: new_health=floatadd(mate_health,floatmul(gNormalHeal[id],heal_base))
				set_user_health(i,min(sh_get_max_hp(i),floatround(new_health)))
				setScreenFlash(i,heal_color[0],heal_color[1],heal_color[2],3,100)
				setScreenFlash(id,heal_color[0],heal_color[1],heal_color[2],3,100)
				sh_set_rendering(i, heal_color[0],heal_color[1],heal_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)	
				sh_set_rendering(id, heal_color[0],heal_color[1],heal_color[2],255,kRenderFxGlowShell, kRenderTransAlpha)
				set_task(1.0,"remove_glow_task",i+YANDERE_REMOVE_GLOW_TASKID,"", 0,  "a",1)
				set_task(1.0,"remove_glow_task",id+YANDERE_REMOVE_GLOW_TASKID,"", 0,  "a",1)		
				heal_stream(id,i)
				heal_aura(id)
			}
		}
	}
	
	
}


}
public notify_yanderes_about_team_life(id,alive){

new CsTeams:user_team= cs_get_user_team(id)
for(new i=1;i<=SH_MAXSLOTS;i++){
	if(!is_user_connected(i)){
		
		
	}
	else if(is_user_alive(i)&&gHasYandere[i]){
		
		new CsTeams:other_user_team=cs_get_user_team(i)
		if((user_team==other_user_team)){
			
			sh_reset_min_gravity(i)
			sh_reset_max_speed(i)
			sh_chat_message(i,gHeroID,"%s",!alive? "I feel... heavier":"Wow... I feel lighter")
			
		}
	}
	
	
}


}


public yandere_loop(id){

id-=YANDERE_STATS_TASKID;

if(gHasYandere[id]){
	
	update_stats(id)
	
	
}


}
public yandere_warcry(id){
id-=YANDERE_CRY_TASKID

if(!sh_is_active()||!is_user_connected(id)||!is_user_alive(id)||!gHasYandere[id]||!gSuperAngry[id]) return

if(gSuperAngry[id]&&gToPlaySound[id]&&!gPlayedSound[id]&&hasRoundStarted()&&gHasYandere[id]){
	new client_name[128]
	get_user_name(id,client_name,127)
	sh_chat_message(0,gHeroID,"%s: Ok. NOW Im mad!",client_name);
	emit_sound(id, CHAN_AUTO, YANDERE_WARCRY, 1.0, 0.0, 0, PITCH_NORM)
	gToPlaySound[id]=false;
	gPlayedSound[id]=true
}
}
public update_normal_stats(id){

new mates_dead=get_yandere_num(id,0,0)
new mates_alive=get_yandere_num(id,1,0)
new can_transform= (get_playersnum(0)>=min_players)
gNormalDmgMult[id]=floatmin(floatadd(base_dmg_mult,floatmul(dmg_pct_per_inc,float(mates_dead))),angry_dmg_mult);
gNormalHeal[id]=floatadd(base_heal,floatmul(heal_pct_per_inc,float(mates_alive)));
gNormalHealRadius[id]=floatadd(base_heal_radius,floatmul(heal_radius_inc_per_inc,float(mates_alive)));
if(!sh_get_stun(id)){
	new Float:maxspeed=get_user_maxspeed(id)
	gPrevSpeed[id]=maxspeed
	gNormalSpeed[id]=floatmax(floatmin(floatadd(gBaseSpeed[id],floatmul(speed_inc_per_inc,float(mates_dead))),angry_speed),maxspeed);
	set_user_maxspeed(id,gNormalSpeed[id])
}
gIdleAngry[id]=true;
gToPlaySound[id]=false;
new Float:gravity=get_user_gravity(id)
gBaseGravity[id]=gravity
gNormalGravity[id]=floatmin(gBaseGravity[id],gravity);
set_user_gravity(id,gNormalGravity[id])
gSuperAngry[id]= (mates_alive<=0)&&can_transform? true:false
if(gSuperAngry[id]&&is_user_alive(id)&&is_user_connected(id)){
	
	yandere_unmorph(id+YANDERE_MORPH_TASKID)
	yandere_model(id)
	BlowUp(id)

}


}
public update_angry_stats(id){

new mates_alive=get_yandere_num(id,1,0)
new can_transform= (get_playersnum(0)>=min_players)
gNormalDmgMult[id]=angry_dmg_mult
gNormalHeal[id]=angry_heal
gNormalHealRadius[id]=float(0)
if(!sh_get_stun(id)){
	sh_reset_max_speed(id)
	new Float:maxspeed=get_user_maxspeed(id)
	gNormalSpeed[id]=floatmax(angry_speed,maxspeed);
	set_user_maxspeed(id,gNormalSpeed[id])
}
new Float:gravity=get_user_gravity(id)
gNormalGravity[id]=floatmin(angry_gravity,gravity);
set_user_gravity(id,gNormalGravity[id])
gToPlaySound[id]=true;
gSuperAngry[id]= (mates_alive<=0)&&can_transform? true:false
if(!gSuperAngry[id]){
	sh_reset_max_speed(id)
	sh_chat_message(id,gHeroID,"Demorphing!")
	yandere_unmorph(id+YANDERE_MORPH_TASKID)
	yandere_model(id)
	
}

}
update_stats(id){

if(gHasYandere[id]){
	if(gSuperAngry[id]){
		
		sh_give_weapon(id, CSW_XM1014,true)
		new ammo,clip,weapon=get_user_weapon(id,ammo,clip)
		if(weapon!=CSW_XM1014){
			shGiveWeapon(id,"weapon_xm1014",true)
		}
		yandere_update_idle(id)
		update_angry_stats(id)
		
	}
	else{
		sh_drop_weapon(id, CSW_XM1014,true)
		update_normal_stats(id)
		
	}
	
	
}


}

//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{

gHeroLevel=get_cvar_num("yandere_level")
base_dmg_mult=get_cvar_float("yandere_base_dmg_mult")
heal_mode=get_cvar_num("yandere_heal_mode")
dmg_pct_per_inc=get_cvar_float("yandere_dmg_pct_per_inc")
base_heal=get_cvar_float("yandere_heal")
heal_pct_per_inc=get_cvar_float("yandere_heal_pct_per_inc")
base_heal_radius=get_cvar_float("yandere_heal_radius")
heal_base=get_cvar_float("yandere_heal_base")
heal_radius_inc_per_inc=get_cvar_float("yandere_heal_radius_inc_per_inc")
base_extra_speed=get_cvar_float("yandere_base_extra_speed")
speed_inc_per_inc=get_cvar_float("yandere_speed_inc_per_inc")
angry_heal=get_cvar_float("yandere_angry_heal")
angry_speed=get_cvar_float("yandere_angry_speed")
angry_gravity=get_cvar_float("yandere_angry_gravity")
angry_dmg_mult=get_cvar_float("yandere_angry_dmg_mult")
angry_degen=get_cvar_float("yandere_angry_degen")
angry_hitheal_pct=get_cvar_float("yandere_angry_hitheal_pct")
psychosis_time=get_cvar_float("yandere_psychosis_time")
psychosis_cooldown=get_cvar_num("yandere_psychosis_cooldown")
min_players=get_cvar_num("yandere_min_players")
explode_maxdamage=get_cvar_float("yandere_explode_radius")
explode_radius=get_cvar_float("yandere_explode_maxdamage")
curse_pct=get_cvar_float("yandere_angry_curse_pct")
teamglow_on=get_cvar_num("yandere_teamglow_on")
zoom=get_cvar_num("yandere_psychosis_zoom")
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{	if(is_user_alive(id) && shModActive()){ 
		notify_yanderes_about_team_life(id,1)
		arrayset(g_is_cursed[id],false,SH_MAXSLOTS+1)
		if ( gHasYandere[id]) {
			gIsPsychosis[id]=false;
			sh_end_cooldown(id+SH_COOLDOWN_TASKID)
			gSuperAngry[id]=false;
			gPlayedSound[id]=false
			gBaseSpeed[id]=base_extra_speed
			gBaseGravity[id]=1.0
			emit_sound(id, CHAN_AUTO, YANDERE_WARCRY, 1.0, 0.0, SND_STOP, PITCH_NORM)
			emit_sound(id, CHAN_AUTO, YANDERE_CYCLE, 1.0, 0.0, SND_STOP, PITCH_NORM)
			emit_sound(id, CHAN_VOICE, YANDERE_PAIN, 1.0, 0.0, SND_STOP, PITCH_NORM)
			yandere_unmorph(id+YANDERE_MORPH_TASKID)
			yandere_model(id)
		}
	}
	return PLUGIN_HANDLED
	
}
public yandere_damage(id)
{
	if ( !shModActive() || !is_user_alive(id)||!is_user_connected(id) ) return
	
	new  damage= read_data(2)
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	if ( (attacker <= 0 || attacker > SH_MAXSLOTS )|| (attacker==id)||!is_user_connected(attacker)) return
	
	new CsTeams:att_team=CS_TEAM_UNASSIGNED;
	att_team=cs_get_user_team(attacker)
	if(cs_get_user_team(id)==att_team){
		
		return;
		
	}
	if ( gHasYandere[attacker] && is_user_alive(id) ) {
		new Float:extraDamage =damage * gNormalDmgMult[attacker] - damage
		if (floatround(extraDamage) > 0){
			
			new health = get_user_health(id)
			if(weapon==CSW_XM1014){
				shExtraDamage(id, attacker, floatround(extraDamage), "Jessica Mata's Senpai Avenger", false)
			}
			else  {
				shExtraDamage(id, attacker, floatround(extraDamage), "yandere rage", false)
			}
			if(gSuperAngry[attacker]){
				new attacker_name[128],client_name[128]
				get_user_name(attacker,attacker_name,127)
				get_user_name(id,client_name,127)
				setScreenFlash(attacker,255,0,0,3,100)
				sh_set_stun(id,2.0,0.25)
				sh_set_rendering(attacker, 250, 92, 163,255,kRenderFxGlowShell, kRenderTransAlpha)
				sh_add_hp(attacker,floatround(extraDamage*angry_hitheal_pct),sh_get_max_hp(id))
				if(extraDamage>=health){
					new origin[3];
					get_user_origin(id,origin)
					kill_fx(origin)
					
				}
				if((weapon==CSW_KNIFE)&&!gHasYandere[id]){
					
					g_is_cursed[id][attacker]=true
					sh_chat_message(attacker,gHeroID,"%s has been cursed!",client_name)
					sh_chat_message(id,gHeroID,"%s has put a curse on you!",attacker_name)
				
				
				}
			}
		}	
		
	}
	if( gHasYandere[id] && is_user_alive(attacker)){
		if(g_is_cursed[attacker][id]){
			if(random_float(0.0,1.0)<curse_pct){
				sh_set_godmode(id,0.0)
				sh_extra_damage(attacker,id,1,"yandere curse",false,SH_DMG_KILL)
				g_is_cursed[attacker][id]=false
			}
		}
	
	
	}
}
public plugin_precache()
{
	m_spriteTexture = precache_model("sprites/laserbeam.spr")
	engfunc(EngFunc_PrecacheSound,YANDERE_WARCRY)
	engfunc(EngFunc_PrecacheSound,YANDERE_CYCLE)
	engfunc(EngFunc_PrecacheSound,YANDERE_THELAST)
	engfunc(EngFunc_PrecacheSound,YANDERE_THELAST2)
	engfunc(EngFunc_PrecacheSound,YANDERE_THELAST3)
	engfunc(EngFunc_PrecacheSound,YANDERE_PAIN)
	precache_model("models/player/yanderu/yanderu.mdl")
	precache_model("models/player/yanderu/yanderuT.mdl")
	precache_model("models/player/superyanderu/superyanderu.mdl")
	precache_model("models/player/superyanderu/superyanderuT.mdl")
	precache_model(YANDERE_SHOTGUN_V_MODEL)
	precache_model(YANDERE_SHOTGUN_W_MODEL)
	precache_model(YANDERE_KNIFE_V_MODEL)
	precache_model(YANDERE_KNIFE_P_MODEL)
	g_spriteSmoke = precache_model("sprites/steam1.spr")
	g_spriteRing = precache_model("sprites/white.spr")
	g_spriteExplosion = precache_model("sprites/explode1.spr")
	for(new i=0;i<sizeof(yandere_shotgun_sounds);i++){
	
		engfunc(EngFunc_PrecacheSound,yandere_shotgun_sounds[i] );
	
	}
	
}

public yandere_kd()
{
	new temp[6]
	
	// First Argument is an id with colussus Powers!
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id)||!gHasYandere[id]||!gSuperAngry[id]) return PLUGIN_HANDLED
	
	if ( gPlayerUltimateUsed[id]||gIsPsychosis[id] ) {
		sh_chat_message(id,gHeroID,"Youve blown a fuse already! Wait a bit more to blow the next one, at least!")
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}
	gPsychosisTime[id]=floatround(psychosis_time)
	ultimateTimer(id, psychosis_cooldown * 1.0)
	emit_sound(id, CHAN_VOICE, YANDERE_PAIN, 1.0, 0.0, 0, PITCH_NORM)
	new client_name[128]
	get_user_name(id,client_name,127)
	sh_chat_message(0,gHeroID,"%s LOST IT!!!!!",client_name)
	psychosis_user(id)
	
	return PLUGIN_HANDLED
}
public sh_round_end(){
	
	new total_alive=get_yandere_num(0,1,1)
	
	if(total_alive){
		return;
		
	}
	new last_alive=get_first_alive()
	if(gHasYandere[last_alive]){
		new client_name[128]
		get_user_name(last_alive,client_name,127)
		sh_chat_message(0,gHeroID,"%s : What... have I done...",client_name)
		
	}
	
	
	
}

public fire_weapon(id)
{
	
	if ( !gHasYandere[id] ||!is_user_alive(id)||!gSuperAngry[id]) return PLUGIN_CONTINUE 
	new wpnid = read_data(2)		// id of the weapon 
	new ammo = read_data(3)		// ammo left in clip 
	
	if (gLastWeapon[id] == 0) gLastWeapon[id] = wpnid
	
	if ((gLastClipCount[id] > ammo)&&(gLastWeapon[id] == wpnid)) 
	{
		new vec1[3], vec2[3]
		get_user_origin(id, vec1, 1) // origin; your camera point.
		get_user_origin(id, vec2, 4) // termina; where your bullet goes (4 is cs-only)
		
		
		//BEAMENTPOINTS
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte (0)     //TE_BEAMENTPOINTS 0
		write_coord(vec1[0])
		write_coord(vec1[1])
		write_coord(vec1[2])
		write_coord(vec2[0])
		write_coord(vec2[1])
		write_coord(vec2[2])
		write_short( m_spriteTexture )
		write_byte(1) // framestart
		write_byte(5) // framerate
		write_byte(2) // life
		write_byte(10) // width
		write_byte(0) // noise
		write_byte( 255 )     // r, g, b
		write_byte( 0 )       // r, g, b
		write_byte( 0)
		write_byte(255) // brightness
		write_byte(300) // speed
		message_end()
		emit_sound(id, CHAN_WEAPON, yandere_shotgun_sounds[1], 1.0, 0.0, 0, PITCH_NORM)
		
	}
	gLastClipCount[id] = ammo
	gLastWeapon[id]=wpnid;
	return PLUGIN_CONTINUE 
	
}

public death()
{	
	new id = read_data(2)
	new killer= read_data(1)
	
	if(!is_user_connected(id)||!is_user_connected(killer)||!sh_is_active()) return
	if(gHasYandere[id]){
		if(gSuperAngry[id]){
			new origin[3]
			get_user_origin(id,origin)
			kill_fx(origin)
			for(new i=0;i<=SH_MAXSLOTS;i++){
				g_is_cursed[i][id]=false;
			}
		}
		gSuperAngry[id]=false;
		yandere_unmorph(id+YANDERE_MORPH_TASKID)
		
		
	}
	notify_yanderes_about_team_life(id,0)
	arrayset(g_is_cursed[id],false,SH_MAXSLOTS+1)
}

//----------------------------------------------------------------------------------------------
public yandere_model(id)
{
	set_task(1.0, "yandere_morph", id+YANDERE_MORPH_TASKID)
	if( teamglow_on){
		set_task(1.0, "yandere_glow", id+YANDERE_MORPH_TASKID, "", 0, "b" )
	}

}
//----------------------------------------------------------------------------------------------
public yandere_morph(id)
{
	id-=YANDERE_MORPH_TASKID
	if ( gmorphed[id] || !is_user_alive(id)||!gHasYandere[id] ) return
	
	if(!gSuperAngry[id]){
		cs_set_user_model(id, "yanderu")
	}
	else{
		cs_set_user_model(id, "superyanderu")
	}
	gmorphed[id] = true
	
}
//----------------------------------------------------------------------------------------------
public yandere_unmorph(id)
{
	id-=YANDERE_MORPH_TASKID
	if(!is_user_connected(id)) return
	if ( gmorphed[id] ) {

		cs_reset_user_model(id)

		gmorphed[id] = false

		if ( teamglow_on ) {
			remove_task(id+YANDERE_MORPH_TASKID)
			set_user_rendering(id)
		}
	}
}
//----------------------------------------------------------------------------------------------
public yandere_glow(id)
{
	id -= YANDERE_MORPH_TASKID

	if ( !is_user_connected(id) ) {
		//Don't want any left over residuals
		remove_task(id+YANDERE_MORPH_TASKID)
		return
	}

	if ( gHasYandere[id] && is_user_alive(id)) {
		if ( get_user_team(id) == 1 ) {
			shGlow(id, 255, 0, 0)
		}
		else {
			shGlow(id, 0, 0, 255)
		}
	}
}

//----------------------------------------------------------------------------------------------
public BlowUp(id)
{
	new Float:dRatio, damage, distanceBetween
	new origin[3], origin1[3], name[32]
	new FFOn = get_cvar_num("mp_friendlyfire")

	get_user_origin(id, origin)

	get_user_name(id, name, 31)

	// blowup even if dead
	explode_effect(origin, floatround(explode_radius))

	for (new a = 1; a <= SH_MAXSLOTS; a++) {
		if ( is_user_alive(a) && a != id && (get_user_team(id) != get_user_team(a) || FFOn) ) {

			get_user_origin(a, origin1)

			distanceBetween = get_distance(origin, origin1)

			if ( distanceBetween < floatround(explode_radius) ) {
				set_hudmessage(248, 20, 25, 0.05, 0.65, 2, 0.02, 3.0, 0.01, 0.1, 85)
				show_hudmessage(a, "%s LOST IT!!!!!", name)

				dRatio = float(distanceBetween) / explode_radius
				damage = floatround(explode_maxdamage)- floatround(floatround(explode_maxdamage)* dRatio)
				shExtraDamage(a, id, damage, "yanderu explosion")
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public explode_effect(vec1[3], dmgRadius)
{
	// Ring
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(21)				// TE_BEAMCYLINDER
	write_coord(vec1[0])		// center position
	write_coord(vec1[1])
	write_coord(vec1[2] + 10)
	write_coord(vec1[0])		// axis and radius
	write_coord(vec1[1])
	write_coord(vec1[2] + floatround(dmgRadius*3.5))
	write_short(g_spriteRing)	// sprite index
	write_byte(0)		// starting frame
	write_byte(0)		// frame rate in 0.1's
	write_byte(2)		// life in 0.1's
	write_byte(20)		// line width in 0.1's
	write_byte(0)		// noise amplitude in 0.01's
	write_byte(248)	//colour
	write_byte(20)
	write_byte(25)
	write_byte(255)	// brightness
	write_byte(0)		// scroll speed in 0.1's
	message_end()

	// Explosion2
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(12)			// TE_EXPLOSION2
	write_coord(vec1[0])	// start position
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_byte(188)	// starting color
	write_byte(10)		// num colors
	message_end()

	// Explosion
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(3)			// TE_EXPLOSION
	write_coord(vec1[0])	// start position 
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_short(g_spriteExplosion)	// sprite index
	write_byte(dmgRadius/9)	// scale in 0.1's 
	write_byte(10)			// framerate
	write_byte(0)			// flags
	message_end()

	// Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(5)			// TE_SMOKE
	write_coord(vec1[0])	// start position
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_short(g_spriteSmoke)	// sprite index
	write_byte(dmgRadius/14)	// scale in 0.1's
	write_byte(10)			// framerate
	message_end()
}
//----------------------------------------------------------------------------------------------

public weaponChange(id)
{
	if ( !is_user_alive(id)||!gHasYandere[id] ||!gSuperAngry[id]||!shModActive()) return PLUGIN_CONTINUE

	new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
	if (wpnid == CSW_XM1014) {
		entity_set_string(id, EV_SZ_viewmodel, YANDERE_SHOTGUN_V_MODEL)
		entity_set_string(id, EV_SZ_weaponmodel, YANDERE_SHOTGUN_W_MODEL)
	}
	else if (wpnid == CSW_KNIFE) {
		entity_set_string(id, EV_SZ_viewmodel, YANDERE_KNIFE_V_MODEL)
		entity_set_string(id, EV_SZ_weaponmodel, YANDERE_KNIFE_P_MODEL)
	}
	return PLUGIN_CONTINUE

}

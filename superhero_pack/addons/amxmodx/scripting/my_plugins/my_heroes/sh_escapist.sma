// Static Shock - Based from Iron Man, with modifications by me, Neogaiden(z)/Strife

/* CVARS - copy and paste to shconfig.cfg

//Static Shock
shock_level 0
shock_timer 0.1			//How often (seconds) to run the loop
shock_maxspeed 930			//Max Speed(def=930)
shock_armorfuel 1			//Armor Refill each second(def=1)
shock_fuelcost 2			//Armor Used (def=2)
shock_armor 250			//Armor Starts with (def=250)

*/

#include "../my_include/superheromod.inc"
#include "tranq_gun_inc/sh_tranq_fx.inc"

#define TASKID 90000
#define TASKID_ESCAPE 90232
// GLOBAL VARIABLES
new gHeroName[]="Escapist"
new bool:g_hasEscapistPower[SH_MAXSLOTS+1]
new g_climbing[SH_MAXSLOTS+1]
new Float:g_wallorigin[SH_MAXSLOTS+1][3]
new g_lastWeapon[SH_MAXSLOTS+1]
new bool:g_weaponSwitched[SH_MAXSLOTS+1]
new gPlayerLevel[SH_MAXSLOTS+1],gHeroLevel,gMaxAlpha,gAlphaByLvlInc,gMinAlpha,gMaxSpeed,gMinSpeed,gSpeedByLvlInc,
	gLvlsForFullMastery
new bool:gIsGoTime
new Float:gEscapeSpeed[SH_MAXSLOTS+1]
new gFastWeapon[SH_MAXSLOTS+1]
new gHeroID
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Escapist","1.0","ThrashyThrash")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("escapist_level", "0" )

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("escapist_speedinc", "10" )
	
	
	register_cvar("escapist_alphainc", "10" )
	
	register_cvar("escapist_maxalpha", "50" )
	
	register_cvar("escapist_minalpha", "5" )
	
	register_cvar("escapist_numlvlsmastery", "5" )
	
	register_cvar("escapist_maxspeed", "5" )
	
	register_cvar("escapist_minspeed", "5" )
	
	
	register_cvar("escapist_escapespeed", "5" )

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID=shCreateHero(gHeroName, "Climb and sneak away!", "You are now a prison escapist. Get better every level!", true, "escapist_level" )

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	register_event("ResetHUD","newRound","b")
	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
  	// KEY UP
	register_srvcmd("escapist_ku",   "escapist_ku")
	shRegKeyUp(gHeroName, "escapist_ku")

	// KEY DOWN
	register_srvcmd("escapist_kd", "escapist_kd")
	shRegKeyDown(gHeroName, "escapist_kd")

	// DEATH
	register_event("DeathMsg", "escapist_death", "a")

	// INIT
	register_srvcmd("escapist_init", "escapist_init")
	shRegHeroInit(gHeroName, "escapist_init")
	register_event("CurWeapon", "getFastWeaponAndSpeed", "be", "1=1")

	//Waits 4 seconds then loads cvars into variables
	loadCVARS()
	
	register_forward(FM_Touch, "fw_Touch");
	

}
public getFastWeaponAndSpeed(i){


			new Float:currSpeed,clip,ammo;
			currSpeed=get_user_maxspeed(i)
				
			if(currSpeed>gEscapeSpeed[i]){
				gFastWeapon[i]=get_user_weapon(i,clip,ammo);
				gEscapeSpeed[i]=currSpeed
			}

}
//----------------------------------------------------------------------------------------------
public sh_round_end() 
{ 
	gIsGoTime=true
}
public fw_Touch(ent,id){


	if(!is_user_alive(ent) || !g_hasEscapistPower[ ent ]|| !pev_valid(ent)||!is_valid_ent( ent ) )
		return FMRES_IGNORED
	
	entity_get_vector( ent, EV_VEC_origin, g_wallorigin[ ent ] );

	return FMRES_IGNORED
}



public Climb(id,alpha) {
		
	
	new iPlayer=id
	if( !(1<=iPlayer<=32) )
		return FMRES_IGNORED;
	
	if( !is_user_alive( iPlayer ) ){
		return FMRES_IGNORED;
	}
	
	static Float: fOrigin[ 3 ];
	entity_get_vector( iPlayer, EV_VEC_origin, fOrigin );
	
	if( (get_distance_f( fOrigin, g_wallorigin[id] ) > 40.0)|| (entity_get_int( iPlayer, EV_INT_flags ) & FL_ONGROUND  )){
		
		g_climbing[id]=0
		sh_set_rendering(id);
		return FMRES_IGNORED;
	
	
	}
	
	
	static iButton;
	iButton = entity_get_int( iPlayer, EV_INT_button );
	
	if( (( iButton & IN_FORWARD ) || ( iButton & IN_BACK )) ) {
		static Float: fVelocity[ 3 ];
		new speed
		speed=max(gMinSpeed,min(gMaxSpeed,gMinSpeed+(gSpeedByLvlInc*(gPlayerLevel[id]-gHeroLevel))))
		VelocityByAim( iPlayer, ( ( iButton & IN_FORWARD ) ? speed : -speed ), fVelocity );
		entity_set_vector( iPlayer, EV_VEC_velocity, fVelocity );
		sh_set_rendering(iPlayer,0,0,0,alpha,kRenderFxGlowShell,kRenderTransAlpha);
		switch_weapon(id,true);
	}
	
	return FMRES_IGNORED;
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	gHeroLevel=get_cvar_num("escapist_level");
	gAlphaByLvlInc=get_cvar_num("escapist_alphainc");
	gMaxAlpha=get_cvar_num("escapist_maxalpha");
	gMinAlpha=get_cvar_num("escapist_minalpha");
	gSpeedByLvlInc=get_cvar_num("escapist_alphainc");
	gMaxSpeed=get_cvar_num("escapist_maxspeed");
	gMinSpeed=get_cvar_num("escapist_minspeed");
	gLvlsForFullMastery=get_cvar_num("escapist_numlvlsmastery");
	//gEscapeSpeed=get_cvar_num("escapist_escapespeed");
}
public escapist_escape_prison(id){

	id-=TASKID_ESCAPE
	
	if ( !is_user_connected(id)||!is_user_alive(id)||!g_hasEscapistPower[id]){
	
	
	return
	
	}
	if(gIsGoTime&&((gPlayerLevel[id]-gHeroLevel)>=gLvlsForFullMastery)&&is_user_connected(id)){
		
		set_user_maxspeed(id,gEscapeSpeed[id]);
		shSwitchWeaponID(id,gFastWeapon[id])
		
	}


}
//----------------------------------------------------------------------------------------------
public escapist_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	gPlayerLevel[id]=sh_get_user_lvl(id)

	// 2nd Argument is 0 or 1 depending on whether the id has Static Shock powers
	read_argv(2,temp,5)
	new hasPowers=str_to_num(temp)

	g_hasEscapistPower[id] = (hasPowers!=0)

	if ( g_hasEscapistPower[id] ) {
		remove_task(id+TASKID)
		remove_task(id+TASKID_ESCAPE)
		set_task( 0.01, "escapist_loop", id+TASKID, "", 0, "b")
		set_task( 0.1, "escapist_escape_prison", id+TASKID_ESCAPE, "", 0, "b")
	}
	else {
		remove_task(id+TASKID)
		remove_task(id+TASKID_ESCAPE)
	}
}
//----------------------------------------------------------------------------------------------
public escapist_loop(id)
{
	id -= TASKID

	if ( !is_user_connected(id)||!is_user_alive(id)||!g_hasEscapistPower[id]){
	
	
	return PLUGIN_HANDLED
	
	}
	if(!g_climbing[id]){
	
	
	return PLUGIN_HANDLED
	
	}
	else
	{
		new alpha;
		if(!(gPlayerLevel[id]-gHeroLevel)){
			alpha=gMaxAlpha
			
		}
		else{
			new alpharemoval=gAlphaByLvlInc*(gPlayerLevel[id]-gHeroLevel)
			alpha=max(gMinAlpha,gMaxAlpha-alpharemoval)
		}
		Climb(id,alpha)
	}
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public escapist_kd()
{

	// First Argument is an id with shock Powers!
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)

	if ( !hasRoundStarted() || !is_user_alive(id)||!is_user_connected(id))
	{
		playSoundDenySelect(id)
		g_climbing[id] = 0
		return PLUGIN_HANDLED 
	}
	if(sh_get_user_is_asleep(id)) return PLUGIN_HANDLED
	g_climbing[id] = 1

	return PLUGIN_HANDLED 
}
public switch_weapon(id,bool:toKnife){
	if(toKnife){
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	g_lastWeapon[id] = weaponID
	g_weaponSwitched[id] = true

	// Switch to knife
	engclient_cmd(id, "weapon_knife")
	}
	else{
	
	if (g_lastWeapon[id] != CSW_KNIFE) shSwitchWeaponID(id, g_lastWeapon[id])
	g_weaponSwitched[id] = false
	
	
	}
	

}
//----------------------------------------------------------------------------------------------
public escapist_death(id)
{
	new id = read_data(2)

	if ( id < 0 || id > SH_MAXSLOTS ) return

	g_climbing[id] = 0
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYUP
public escapist_ku()
{
	// First Argument is an id with Ironman Powers!
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)
	g_climbing[id] = 0
	sh_set_rendering(id);
	
	switch_weapon(id,false)
	if (!is_user_alive(id) || g_climbing[id] != 1||!g_weaponSwitched[id]) return

}
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	// stupid check but lets see
	if ( id <=0 || id > SH_MAXSLOTS ) return

	g_climbing[id] = 0

	remove_task(id+TASKID)
	remove_task(id+TASKID_ESCAPE)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	// stupid check but lets see
	if ( id <=0 || id > SH_MAXSLOTS ) return

	g_climbing[id] = 0

	remove_task(id+TASKID)
	remove_task(id+TASKID_ESCAPE)
}
public sh_round_start(){


	gIsGoTime =false
	
	
}
//---------------------------------------------------------------------------------------------- 
public newRound(id)
{
	gPlayerLevel[id]=sh_get_user_lvl(id)
	if(g_hasEscapistPower[id]&&gIsGoTime&&((gPlayerLevel[id]-gHeroLevel)>=gLvlsForFullMastery)&&is_user_alive(id)&&is_user_connected(id)){
		sh_chat_message(id,gHeroID,"You mastered escaping so you are now free to move in freeze time!");
		sh_chat_message(id,gHeroID,"You got switched to your fastest weapon!");
	
	}
	g_climbing[id] = 0
	return PLUGIN_CONTINUE
}
//---------------------------------------------------------------------------------------------- 

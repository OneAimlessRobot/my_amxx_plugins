
#include "../my_include/superheromod.inc"
#include <fakemeta_util>
#include "jetplane_inc/sh_jetplane_funcs.inc"
#include "jetplane_inc/sh_jetplane_bomb_funcs.inc"
#include "jetplane_inc/sh_yandere_get_set.inc"


#define PLUGIN "Superhero yandere BOMB funcs"
#define VERSION "1.0.0"
#define AUTHOR "Me"
#define Struct				enum


new has_bomb[SH_MAXSLOTS+1]
new Float:jetplane_bomb_radius,
Float:jetplane_bomb_dmg;
new jetplane_bomb_ammo;
new sprite_blast

new m_trail,sprite1,blood1,blood2
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin(PLUGIN, VERSION, AUTHOR)

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("yandere_jetplane_bomb_radius", "5")
	register_cvar("yandere_jetplane_bomb_dmg", "5")
	register_cvar("yandere_jetplane_bomb_ammo", "5")
	register_forward(FM_CmdStart, "CmdStart");




}
public plugin_cfg(){


	loadCVARS()
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	jetplane_bomb_radius=get_cvar_float("yandere_jetplane_bomb_radius");
	jetplane_bomb_dmg=get_cvar_float("yandere_jetplane_bomb_dmg");
	jetplane_bomb_ammo=get_cvar_num("yandere_jetplane_bomb_ammo");
}
public plugin_natives(){

	register_native("get_jet_bombs","_get_jet_bombs",0);
	register_native("clear_bombs","_clear_bombs",0);
	register_native("set_jet_bombs","_set_jet_bombs",0);
	register_native("get_user_jet_bombs","_get_user_jet_bombs",0);
	register_native("set_user_jet_bombs","_set_user_jet_bombs",0);
	register_native("reset_jet_bombs","_reset_jet_bombs",0);
	register_native("reset_user_jet_bombs","_reset_user_jet_bombs",0);

}
public _get_jet_bombs(iPlugins,iParams){
	new jet_id=get_param(1)
	
	new num_bombs=pev(jet_id,pev_iuser1)
	return num_bombs;

}
public _set_jet_bombs(iPlugins,iParams){
	new jet_id=get_param(1)
	new the_bombs=get_param(2)

	set_pev(jet_id,pev_iuser1,the_bombs)
}
public _reset_jet_bombs(iPlugins,iParams){
	new jet_id=get_param(1)

	set_pev(jet_id,pev_iuser1,jetplane_bomb_ammo)
}
public _get_user_jet_bombs(iPlugins,iParams){
	
	new id=get_param(1)
	return get_jet_bombs(jet_get_user_jet(id))

}
public _set_user_jet_bombs(iPlugins,iParams){
	
	new id=get_param(1)
	new the_bombs=get_param(2)
	return set_jet_bombs(jet_get_user_jet(id),the_bombs)

}
public _reset_user_jet_bombs(iPlugins,iParams){
	
	new id=get_param(1)
	return reset_jet_bombs(jet_get_user_jet(id))

}
client_hittable(vic_userid){

return (is_user_connected(vic_userid)&&is_user_alive(vic_userid)&&vic_userid)

}
public CmdStart(id, uc_handle)
{
	if ( !is_user_alive(id)||!yandere_get_has_yandere(id)||!hasRoundStarted()||!client_hittable(id)) return FMRES_IGNORED;
	
	
	new button = get_uc(uc_handle, UC_Buttons);
	new clip, ammo, weapon = get_user_weapon(id, clip, ammo);
	
	if((weapon==CSW_KNIFE )&& jet_deployed(id)){
		if(button & IN_ATTACK2)
		{
			button &= ~IN_ATTACK2;
			set_uc(uc_handle, UC_Buttons, button);
			if( !(is_user_alive(id))||has_bomb[id]) return FMRES_IGNORED
			if(!get_user_jet_bombs(id))
			{
				client_print(id, print_center, "You are out of bombs!")
				return FMRES_IGNORED
			}
			make_bomb(id)
			
		}
	}
	
	return FMRES_IGNORED;
}

//----------------------------------------------------------------------------------------------
//make_rocket(userindex,commandtype,missilespeed,antimissleid)
make_bomb(id)
{

new Float:vOrigin[3]
new Float:vAngles[3]
Entvars_Get_Vector(id, EV_VEC_origin, vOrigin)
Entvars_Get_Vector(id, EV_VEC_v_angle, vAngles)
vOrigin[2]+=jetplane_min_dims[2]


new NewEnt
NewEnt = CreateEntity("info_target")
if(NewEnt == 0) {
client_print(id,print_chat,"[SH](Yandere Mk II): bomb failure")
return PLUGIN_HANDLED
}

Entvars_Set_String(NewEnt, EV_SZ_classname, JETPLANE_BOMB_CLASSNAME)
ENT_SetModel(NewEnt, BOMB_MODEL)

new Float:fl_vecminsx[3] = {-1.0, -1.0, -1.0}
new Float:fl_vecmaxsx[3] = {1.0, 1.0, 1.0}

Entvars_Set_Vector(NewEnt, EV_VEC_mins,fl_vecminsx)
Entvars_Set_Vector(NewEnt, EV_VEC_maxs,fl_vecmaxsx)

ENT_SetOrigin(NewEnt, vOrigin)
Entvars_Set_Vector(NewEnt, EV_VEC_angles, vAngles)
entity_set_int(NewEnt, EV_INT_effects, 2)
Entvars_Set_Int(NewEnt, EV_INT_solid, 2)

Entvars_Set_Int(NewEnt, EV_INT_movetype, 10)


Entvars_Set_Edict(NewEnt, EV_ENT_owner, id)

new Float:fl_iNewVelocity[3]
new iNewVelocity[3]
VelocityByAim(id, 0, fl_iNewVelocity)
Entvars_Set_Vector(NewEnt, EV_VEC_velocity, fl_iNewVelocity)
iNewVelocity[0] = floatround(fl_iNewVelocity[0])
iNewVelocity[1] = floatround(fl_iNewVelocity[1])
iNewVelocity[2] = floatround(fl_iNewVelocity[2])

has_bomb[id] = NewEnt

set_user_jet_bombs(id,get_user_jet_bombs(id)-1)
set_task(BOMB_DROP_PERIOD,"bomb_reload",id+BOMB_RELOAD_TASKID,"",0,"a",1)
Entvars_Set_Float(NewEnt, EV_FL_gravity, 0.25)
return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public bomb_reload(id)
{
id-=BOMB_RELOAD_TASKID
has_bomb[id] = 0
}
public vexd_pfntouch(pToucher, pTouched) {


if ( !is_valid_ent(pToucher) ) return

new szClassName[32]
Entvars_Get_String(pToucher, EV_SZ_classname, szClassName, 31)
new touchedClassName[32]
Entvars_Get_String(pTouched, EV_SZ_classname, touchedClassName, 31)

if(equal(szClassName, JETPLANE_BOMB_CLASSNAME)&&!equal(touchedClassName, JETPLANE_FUSELAGE_CLASSNAME)) {
	
	new Float:fl_vExplodeAt[3]
	Entvars_Get_Vector(pToucher, EV_VEC_origin, fl_vExplodeAt)
	new vExplodeAt[3]
	vExplodeAt[0] = floatround(fl_vExplodeAt[0])
	vExplodeAt[1] = floatround(fl_vExplodeAt[1])
	vExplodeAt[2] = floatround(fl_vExplodeAt[2])
	new id = Entvars_Get_Edict(pToucher, EV_ENT_owner)
	new origin[3],dist,i
	
	for ( i = 1; i <= SH_MAXSLOTS; i++) {
		
		if( !client_hittable(i) ) continue
		get_user_origin(i,origin)
		dist = get_distance(origin,vExplodeAt)
		if (dist <= jetplane_bomb_radius) {
			
			
			new Float:vic_origin[3]
			entity_get_vector(i,EV_VEC_origin,vic_origin);
			new Float:distance=vector_distance(vic_origin,fl_vExplodeAt);
			new Float:falloff_coeff= floatmin(1.0,distance/JETBOMB_FALLOFF_DIST);
			sh_extra_damage(i,id,floatround(jetplane_bomb_dmg-(jetplane_bomb_dmg/2.0)*falloff_coeff),"Yandere BOMB");
		}
	}
	
	
	emit_sound(pToucher, CHAN_VOICE, BOMB_EXPLODE_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	new color[4]
	make_shockwave(vExplodeAt)
	RemoveEntity(pToucher)
	
	if ( is_valid_ent(pTouched) ) {
		new szClassName2[32]
		Entvars_Get_String(pTouched, EV_SZ_classname, szClassName2, 31)
		
		if(equal(szClassName2, JETPLANE_BOMB_CLASSNAME)) {
			emit_sound(pToucher, CHAN_VOICE, BOMB_EXPLODE_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			RemoveEntity(pTouched)
		}
	}
}
}
public make_shockwave(point[3]){



message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
write_byte( 21 )
write_coord(point[0])
write_coord(point[1])
write_coord(point[2] + 16)
write_coord(point[0])
write_coord(point[1])
write_coord(point[2] + floatround(jetplane_bomb_radius))
write_short( sprite1 )
write_byte( 0 )
write_byte(1)		// frame rate in 0.1's
write_byte(6)		// life in 0.1's
write_byte(8)		// line width in 0.1's
write_byte(1)		// noise amplitude in 0.01's
write_byte( love_color[0])
write_byte( love_color[1] )
write_byte( love_color[2] )
write_byte( love_color[3] )
write_byte( 0 )
message_end()
message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
write_byte(TE_LAVASPLASH);
write_coord(point[0])
write_coord(point[1])
write_coord(point[2] + 16)
message_end();

message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
write_byte(TE_BLOODSPRITE);
write_coord(point[0])
write_coord(point[1])
write_coord(point[2] + floatround(jetplane_bomb_radius))
write_short(blood2);
write_short(blood1);
write_byte(255);
write_byte(30);
message_end();

message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
write_byte(TE_DLIGHT);
write_coord(point[0])
write_coord(point[1])
write_coord(point[2])
write_byte( love_color[0])
write_byte( love_color[1] )
write_byte( love_color[2] )
write_byte( love_color[3] )
write_byte(8);
write_byte(60);
message_end();

}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{

	precache_model( BOMB_MODEL );
		
	sprite_blast = precache_model("sprites/dexplo.spr");
	
	blood1 = precache_model("sprites/blood.spr");
	blood2 = precache_model("sprites/bloodspray.spr");
	precache_sound("ambience/particle_suck2.wav")
	sprite1 = precache_model("sprites/white.spr")
	engfunc(EngFunc_PrecacheSound,BOMB_EXPLODE_SOUND)
	
}
//---------------------------------------------------------------------------------------------- 

//----------------------------------------------------------------------------------------------
remove_bomb(bomb){

new Float:fl_origin[3]
Entvars_Get_Vector(bomb, EV_VEC_origin, fl_origin)

message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
write_byte(14)
write_coord(floatround(fl_origin[0]))
write_coord(floatround(fl_origin[1]))
write_coord(floatround(fl_origin[2]))
write_byte (200)
write_byte (40)
write_byte (45)
message_end()

emit_sound(bomb, CHAN_WEAPON, "ambience/particle_suck2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)

RemoveEntity(bomb)
return PLUGIN_CONTINUE
}

public _clear_bombs(iPlugin,iParams){

new grenada = find_ent_by_class(-1, JETPLANE_BOMB_CLASSNAME)
while(grenada) {
	remove_task(grenada+BOMB_RELOAD_TASKID);
	remove_bomb(grenada)
	grenada = find_ent_by_class(grenada, JETPLANE_BOMB_CLASSNAME)
}
}
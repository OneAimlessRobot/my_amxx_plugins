

#include "../my_include/superheromod.inc"
#include "sh_aux_stuff/sh_aux_inc.inc"
#include "camera_inc/sh_camman_get_set.inc"
#include "camera_inc/sh_camera_funcs.inc"


#define CAMMAN_TASKID 12812

// GLOBAL VARIABLES
new gHasCamman[SH_MAXSLOTS+1]
new gNumCameras[SH_MAXSLOTS+1]

new num_cameras
new camera_cooldown
new disarmable

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Camman", "1.0", "TastyMedula")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("camman_level", "8")
	register_cvar("camman_cameras", "8")
	register_cvar("camman_disarmable", "1")
	register_cvar("camman_camera_cooldown", "10")
	register_event("ResetHUD","newRound","b")
	gHeroID=shCreateHero(gHeroName, "Camman", "Plant cameras on walls", true, "camman_level" )
	camman_set_hero_id(gHeroID)
	register_event("DeathMsg","death","a")
	
	register_srvcmd("camman_init", "camman_init")
	shRegHeroInit(gHeroName, "camman_init")
	
	register_srvcmd("camman_kd", "camman_kd")
	shRegKeyDown(gHeroName, "camman_kd")
	register_srvcmd("camman_ku", "camman_ku")
	shRegKeyUp(gHeroName, "camman_ku")
}

public _client_isnt_hitter(iPlugin,iParams){
	
	new gatling_user=get_param(1);
	if(!is_user_connected(gatling_user)){
		return true;
	}
	if(!is_user_alive(gatling_user)){
		return true;
	}
	return !gHasCamman[gatling_user]
	
}

public plugin_natives(){
	
	register_native("client_isnt_hitter","_client_isnt_hitter",0);
	register_native("camman_set_num_cameras","_camman_set_num_cameras",0)
	register_native("camman_get_num_cameras","_camman_get_num_cameras",0)
	
	register_native("camman_get_max_cameras","_camman_get_max_cameras",0)
	
	
	
	register_native("camman_dec_num_cameras","_camman_dec_num_cameras",0)
	register_native("camman_inc_num_cameras","_camman_inc_num_cameras",0)
	
	
	
	register_native("camman_set_has_camman","_camman_set_has_camman",0)
	register_native("camman_get_has_camman","_camman_get_has_camman",0)
	register_native("camman_get_disarmable","_camman_get_disarmable",0)
	
	register_native("camman_set_hero_id","_camman_set_hero_id",0)
	register_native("camman_get_hero_id","_camman_get_hero_id",0)
	
	
}
public _camman_get_max_cameras(iPlugin,iParams){
	return num_cameras
}
public _camman_set_has_camman(iPlugin,iParams){
	new id= get_param(1)
	new value_to_set= get_param(2)
	gHasCamman[id]=value_to_set;
}
public _camman_get_has_camman(iPlugin,iParams){
	new id= get_param(1)
	return gHasCamman[id]
}
public _camman_get_disarmable(iPlugin,iParams){
	
	return disarmable
}

public _camman_get_hero_id(iPlugin,iParams){
	return gHeroID
}
public _camman_set_hero_id(iPlugin,iParams){
	gHeroID=get_param(1)
}

public _camman_set_num_cameras(iPlugin,iParams){
	new id= get_param(1)
	new value_to_set=get_param(2)
	gNumCameras[id]=value_to_set;
}
public _camman_get_num_cameras(iPlugin,iParams){
	
	
	new id= get_param(1)
	return gNumCameras[id]
	
}

public _camman_dec_num_cameras(iPlugin,iParams){
	
	
	new id= get_param(1)
	gNumCameras[id]-= (gNumCameras[id]>0)? 1:0
	
}

public _camman_inc_num_cameras(iPlugin,iParams){
	
	
	new id= get_param(1)
	gNumCameras[id]+= (gNumCameras[id]<=num_cameras)? 1:0
	
}

public camman_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasCamman[id]=(hasPowers!=0)
	if(gHasCamman[id]){
		
		reset_camman_user(id)
		
		set_task( 0.2, "camman_loop", id+CAMMAN_TASKID, "", 0, "b")
	}
	else{
		reset_camman_user(id)
		remove_task(id+CAMMAN_TASKID)
	}
	
}
public reset_camman_user(id){
	
	camera_uncharge_camera(id)
	camera_undisarm_camera(id)
	camera_clear_user_cameras(id)
	gNumCameras[id]=0
	
	
	
}

public status_hud(id){
	
	new hud_msg[1000];
	format(hud_msg,500,"[SH] %s:^nNumber of cameras: %d^n",gHeroName,camman_get_num_cameras(id));
	
	client_print(id,print_center,"%s",hud_msg)
	
	
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	num_cameras=min(MAX_CAMERAS,get_cvar_num("camman_cameras"))
	camera_cooldown=get_cvar_num("camman_camera_cooldown");
	disarmable=get_cvar_num("camman_disarmable");
}
//----------------------------------------------------------------------------------------------
public camman_loop(id)
{
	id -= CAMMAN_TASKID
	
	if ( client_isnt_hitter(id)){
		
		return PLUGIN_HANDLED
		
	}
	status_hud(id)
	return PLUGIN_HANDLED
}
public sh_client_spawn(id)
{
	if ( gHasCamman[id] ) {
		sh_end_cooldown(id+SH_COOLDOWN_TASKID)
	}
	
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{
	if (client_hittable(id)&&shModActive() &&!hasRoundStarted() ) {
		
		reset_camman_user(id)
	}
	return PLUGIN_HANDLED
	
}
public plugin_precache()
{
	
	
	
	
}
public death()
{
	new id = read_data(2)
	if(gHasCamman[id]){
		
		camera_uncharge_camera(id)
		camera_undisarm_camera(id)
	}
}

//----------------------------------------------------------------------------------------------
public camman_kd()
{
	new temp[6]
	
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id) ||!camman_get_has_camman(id)) {
		return PLUGIN_HANDLED
	}
	new camera_id
	if(!(camera_id=player_touching_camera(id))){
		if(user_can_plant_camera(id)){
			if(gPlayerUltimateUsed[id]){
				
				sh_chat_message(id,gHeroID,"N spammes!!!!")
				playSoundDenySelect(id)
				return PLUGIN_HANDLED
			}
			if(camman_get_num_cameras(id)==num_cameras){
				sh_chat_message(id,gHeroID,"Ja gastaste todas as camaras!!!! nao podes plantar mais!")
				playSoundDenySelect(id)
				return PLUGIN_HANDLED;
				
			}
			
			if(!camera_get_camera_armed(id)){
				camera_set_camera_armed(id,1)
				camera_charge_camera(id)
				
			}
		}
		else if(camera_get_camera_planted(id)){
	
			toggle_camera_view(id)
	
	
		}
		else{
			
			sh_sound_deny(id)
			sh_chat_message(id, camman_get_hero_id(), "You must plant the camera on a wall")
		
		}
	}
	else if(disarmable){
		if(!camera_get_camera_disarmer_on(id)){
			camera_set_camera_disarmer_on(id,1)
			new cam_it=camera_get_curr_camera(id)
			camera_disarm_camera(id,camera_id,cam_it)
		}
		
	}
	return PLUGIN_HANDLED
}

public player_touching_camera(id)
{
	
	if (id <= 0) return 0
	if (!is_user_connected(id)||!is_user_alive(id)||!sh_is_active()||!camman_get_has_camman(id)) return 0
	
	new entlist[MAX_ENTITIES+1];
	new num_found = find_sphere_class(id,CAMERA_CLASSNAME, 50.0 ,entlist, MAX_ENTITIES);
	
	if(!num_found){
		
		return 0
	}
	
	for(new i=0;i<num_found;i++){
		
		new attacker = pev(entlist[i], pev_iuser2)
		new terror_name[128];
		get_user_name(attacker,terror_name,127);
		sh_chat_message(id,camman_get_hero_id(),"Touching a camera from %s!",(attacker==id)?"You":terror_name);
		return entlist[i];
		
	}
	return 0
}
//----------------------------------------------------------------------------------------------
public camman_ku()
{
	new temp[6]
	
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	if ( !is_user_alive(id) ||!camman_get_has_camman(id)||!(camera_get_camera_disarmer_on(id)||camera_get_camera_armed(id))) {
		return PLUGIN_HANDLED
	}
	if(camera_get_camera_disarming(id)&&camera_get_camera_charging(id)){
		
		camera_uncharge_camera(id)
		camera_undisarm_camera(id)
		return PLUGIN_HANDLED
		
		
		
	}
	else{
		if(camera_get_camera_planted(id)){
			if(camera_get_camera_disarming(id)){
				sh_chat_message(id,camman_get_hero_id(),"Camera not disarmed. Action interrupted");
				camera_undisarm_camera(id)
				return PLUGIN_HANDLED
			}
			else if(camera_get_camera_charging(id)){
				sh_chat_message(id,camman_get_hero_id(),"Camera not charged. Not planting...");
				camera_uncharge_camera(id)
				return PLUGIN_HANDLED
				
			}
			ultimateTimer(id, float(camera_cooldown))
			camera_uncharge_camera(id)
			camera_undisarm_camera(id)
		}
	}
	
	
	return PLUGIN_HANDLED
}

//----------------------------------------------------------------------------------------------

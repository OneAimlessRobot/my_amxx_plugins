

#include "../my_include/superheromod.inc"
#include <xs>
#include "lara_spear_inc/sh_lara_get_set.inc"
#include "lara_spear_inc/sh_spear_funcs.inc"
#include "bleed_knife_inc/sh_bknife_fx.inc"

// GLOBAL VARIABLES

new gHasLara[SH_MAXSLOTS+1]
new gNumSpears[SH_MAXSLOTS+1]


new gHeroLevel
new num_spears


//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Lara", "1.0", "TastyMedula")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	/*
	register_srvcmd("lara_kd", "lara_kd")
	shRegKeyDown(gHeroName, "lara_kd")
	register_srvcmd("lara_ku", "lara_ku")
	shRegKeyUp(gHeroName, "lara_ku")
	
	*/
	register_cvar("lara_level", "8")
	
	register_cvar("lara_num_spears", "100")
	register_event("ResetHUD","newRound","b")
	gHeroID=shCreateHero(gHeroName, "lara the hunter!", "Get a spear!", false, "lara_level" )
	spear_set_hero_id(gHeroID)
	//register_event("Damage", "lara_damage", "b", "2!0")
	register_event("DeathMsg","death","a")
	register_srvcmd("lara_init", "lara_init")
	shRegHeroInit(gHeroName, "lara_init")
	RegisterHam(Ham_TakeDamage,"player","Lara_ham_damage")
	
	register_event("CurWeapon", "weaponChange", "be", "1=1")
	
	
}

public plugin_natives(){

	
	register_native("spear_dec_num_spears","_spear_dec_num_spears",0);
	register_native("spear_get_num_spears","_spear_get_num_spears",0);
	register_native("spear_set_num_spears","_spear_set_num_spears",0);
	
	
	
	register_native("spear_set_hero_id","_spear_set_hero_id",0);
	register_native("spear_get_hero_id","_spear_get_hero_id",0);
	
	register_native("spear_get_has_lara","_spear_get_has_lara",0);
	register_native("spear_set_has_lara","_spear_set_has_lara",0);
	

}

public _spear_set_has_lara(iPlugin,iParams){
	new id= get_param(1)
	new value_to_set= get_param(2)
	gHasLara[id]=value_to_set;
}
public _spear_get_has_lara(iPlugin,iParams){
	new id= get_param(1)
	return gHasLara[id]
}

public _spear_get_hero_id(iPlugin,iParams){
	return gHeroID
}
public _spear_set_hero_id(iPlugin,iParams){
	gHeroID=get_param(1)
}

public _spear_set_num_spears(iPlugin,iParams){
	new id= get_param(1)
	new value_to_set=get_param(2)
	gNumSpears[id]=value_to_set;
}
public _spear_get_num_spears(iPlugin,iParams){


	new id= get_param(1)
	return gNumSpears[id]

}

public _spear_dec_num_spears(iPlugin,iParams){


	new id= get_param(1)
	gNumSpears[id]-= (gNumSpears[id]>0)? 1:0

}


public lara_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasLara[id]=(hasPowers!=0)
	if(gHasLara[id]){
		gNumSpears[id]=num_spears
		
	}
	else{
		gNumSpears[id]=0
	}
	
	
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
	
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	
	gHeroLevel=get_cvar_num("lara_level")
	num_spears=get_cvar_num("lara_num_spears")
}
public Lara_ham_damage(id, idinflictor, attacker, Float:damage, damagebits)
{
if ( !shModActive() || !is_user_alive(id) || !is_user_connected(id)||!is_user_alive(attacker) ||!is_user_connected(attacker) ||!(attacker>=1 && attacker <=SH_MAXSLOTS)) return HAM_IGNORED

new clip,ammo,weapon=get_user_weapon(attacker,clip,ammo)

new CsTeams:att_team=cs_get_user_team(attacker)
if(spear_get_has_lara(attacker)&&!(cs_get_user_team(id)==att_team)){
	
	if(weapon==CSW_KNIFE){
		emit_sound(attacker, CHAN_WEAPON, SPEAR_WOUND_SFX, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		new button = pev(attacker, pev_button);
		new bool:slashing;
		new bool:stabbing;
		if(button & IN_ATTACK2){
			
			button &= ~IN_ATTACK2;
			stabbing=true;
			slashing=false
		}
		if(button & IN_ATTACK){
			
			button &= ~IN_ATTACK;
			stabbing=false;
			slashing=true
		}
		new Float: vec2LOS[2];
		new Float: vecForward[3];
		new Float: vecForward2D[2];
	
		velocity_by_aim( attacker, 1, vecForward );
      
		xs_vec_make2d( vecForward, vec2LOS );
		xs_vec_normalize( vec2LOS, vec2LOS );
    
		velocity_by_aim(id, 1, vecForward ); 
        
		xs_vec_make2d( vecForward, vecForward2D );
		sh_extra_damage(id,attacker,SPEAR_STAB_DAMAGE,"Hunter Spear",0,SH_DMG_NORM)
		if(stabbing){
			
			if( (xs_vec_dot( vec2LOS, vecForward2D ) > 0.8) )
			{
				sh_ultrableed_user(id,attacker,gHeroID)
			}
			else{
				sh_bleed_user(id,attacker,gHeroID)
			}
			return HAM_IGNORED
		}
		else if(slashing){
			
			sh_minibleed_user(id,attacker,gHeroID)
			return HAM_IGNORED
		}
	}
}

return HAM_IGNORED
	
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{	
	if(is_user_alive(id) && shModActive()){
		if ( gHasLara[id]) {
			gNumSpears[id]=num_spears
		}
	}
	return PLUGIN_HANDLED
	
}
public sh_client_spawn(id)
{
	if ( gHasLara[id] ) {
	}

}
public sh_round_end(){

	clear_spears()

}

public weaponChange(id)
{
	if ( !is_user_alive(id)||!gHasLara[id] ||!shModActive()) return PLUGIN_CONTINUE

	new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
	if (wpnid == CSW_KNIFE) {
		if(spear_get_spear_loaded(id)&&spear_get_num_spears(id)){
			entity_set_string(id, EV_SZ_viewmodel, SPEAR_V_MODEL)
		}
		else{
			entity_set_string(id, EV_SZ_viewmodel, NOSPEAR_V_MODEL)
			entity_set_string(id, EV_SZ_weaponmodel, SPEAR_P_MODEL)
		}
	}
	return PLUGIN_CONTINUE

}
public plugin_precache()
{
	//m_spriteTexture = precache_model("sprites/laserbeam.spr")
	precache_model(SPEAR_V_MODEL)
	precache_model(SPEAR_P_MODEL)
	precache_model(NOSPEAR_V_MODEL)
		
}
public death()
{	
	new id = read_data(2)
	if(!is_user_connected(id)||!gHasLara[id]) return
	
	spear_uncharge_spear(id)
	/*new killer= read_data(1)
	new killer_name[128]
	get_user_name(killer,killer_name,127)
	*/
}

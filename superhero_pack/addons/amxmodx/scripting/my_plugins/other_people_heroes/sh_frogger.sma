// FROGGER! - From the arcade game. You know, the frog that jumps around to avoid traffic or aligators.

/* CVARS - copy and paste to shconfig.cfg

//Frogger
frogger_level 0

*/

/*
* v1.3 - vittu - 3/17/10
*       - Updated to work with HLDS protocol 48.  However, breaks protocol 47 support
*	    so define was added. (method is based on ConnorMcLeod LongJump Enabler)
*
* v1.2 - vittu - 8/20/08
*       - Updated to be SH 1.2.0 compliant.
*
* v1.1 - vittu - 6/2/07
*      - Fixed issue to remove jumppack when hero is removed. Thanks to VEN's fakemeta_util.
*
* v1.0 - vittu - 6/1/05
*      - Only issue is jumppack only removed on death.
*/

//---------- User Changeable Defines --------//

// Comment out for protocol 47 or earlier
#define PROTOCOL_48

// Comment out to not display the longjump module icon
#define SHOW_ICON

//------- Do not edit below this point ------//


#include <superheromod>

#define m_fLongJump 356

// GLOBAL VARIABLES
new gHeroID
new bool:gHasFogger[SH_MAXSLOTS+1]

#define m_fLongJump 356

#if defined PROTOCOL_48
	#define m_Activity 73
	#define m_IdealActivity 74
	#define m_afButtonPressed 246

	#define PLAYER_SUPERJUMP 7
	#define ACT_LEAP 8

	new bool:gIgnoreDuck[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Frogger", "1.3", "vittu")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("frogger_level", "0")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero("Frogger", pcvarLevel)
	sh_set_hero_info(gHeroID, "Longjump", "Get a Half-Life Longjump pack. While moving forward, hold duck then press jump.")

#if defined PROTOCOL_48
	//Bots don't longjump so no need for extra code to register cz bots
	RegisterHam(Ham_Player_Duck, "player", "ham_Player_Duck_Pre")
	RegisterHam(Ham_Player_Jump, "player", "ham_Player_Jump_Pre")
#endif
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	switch(mode)
	{
		case SH_HERO_ADD:
		{
			gHasFogger[id] = true
			frogger_giveitem(id)
		}
		case SH_HERO_DROP:
		{
			gHasFogger[id] = false

			if ( is_user_alive(id) )
			{
				//These are reset for dead users already
				set_pdata_int(id, m_fLongJump, 0)
				engfunc(EngFunc_SetPhysicsKeyValue, id, "slj", "0")
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	frogger_giveitem(id)
}
//----------------------------------------------------------------------------------------------
frogger_giveitem(id)
{
	if ( sh_is_active() && is_user_alive(id) && gHasFogger[id] && !get_pdata_int(id, m_fLongJump) )
	{
		set_pdata_int(id, m_fLongJump, 1)
		engfunc(EngFunc_SetPhysicsKeyValue, id, "slj", "1")

#if defined SHOW_ICON
		static msgid_itempickup
		if ( !msgid_itempickup ) msgid_itempickup = get_user_msgid("ItemPickup")

		message_begin(MSG_ONE_UNRELIABLE, msgid_itempickup, _, id)
		write_string("item_longjump")
		message_end()
#endif
	}
}
#if defined PROTOCOL_48
//Connor is awesome
//----------------------------------------------------------------------------------------------
public ham_Player_Duck_Pre(id)
{
	if ( gIgnoreDuck[id] )
	{
		gIgnoreDuck[id] = false
		return HAM_SUPERCEDE
	}

	return HAM_IGNORED
}
//----------------------------------------------------------------------------------------------
public ham_Player_Jump_Pre(id)
{
	if ( !sh_is_active() || !is_user_alive(id) || !gHasFogger[id] ) return HAM_IGNORED

	if ( !get_pdata_int(id, m_fLongJump) || pev(id, pev_waterlevel) >= 2 ) return HAM_IGNORED

	new idFlags = pev(id, pev_flags)
	if ( idFlags & FL_WATERJUMP || !(idFlags & FL_ONGROUND) ) return HAM_IGNORED

	new afButtonPressed = get_pdata_int(id, m_afButtonPressed)
	if ( !(afButtonPressed & IN_JUMP) ) return HAM_IGNORED

	if ( ( idFlags & FL_DUCKING || pev(id, pev_bInDuck) ) && pev(id, pev_button) & IN_DUCK )
	{
		new Float:idDuckTime
		pev(id, pev_flDuckTime, idDuckTime)
		if ( !idDuckTime ) return HAM_IGNORED

		new Float:vecTemp[3]
		pev(id, pev_velocity, vecTemp)
		if ( vector_length(vecTemp) > 50.0 )
		{
			pev(id, pev_punchangle, vecTemp)
			vecTemp[0] = -5.0
			set_pev(id, pev_punchangle, vecTemp)

			global_get(glb_v_forward, vecTemp)
			vecTemp[0] *= 560.0
			vecTemp[1] *= 560.0
			vecTemp[2] = 299.33259094191531084669989858532

			set_pev(id, pev_velocity, vecTemp)

			set_pdata_int(id, m_Activity, ACT_LEAP)
			set_pdata_int(id, m_IdealActivity, ACT_LEAP)
			gIgnoreDuck[id] = true

			set_pev(id, pev_oldbuttons, pev(id, pev_oldbuttons) | IN_JUMP)

			set_pev(id, pev_gaitsequence, PLAYER_SUPERJUMP)
			set_pev(id, pev_frame, 0.0)

			set_pdata_int(id, m_afButtonPressed, afButtonPressed & ~IN_JUMP)

			return HAM_SUPERCEDE
		}
	}

	return HAM_IGNORED
}
//----------------------------------------------------------------------------------------------
#endif
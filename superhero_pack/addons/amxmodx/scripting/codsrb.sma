#include <amxmodx>
#include <amxmisc> 
#include <cstrike>
#include <colorchat>
#include <engine> 
#include <fun>
#include <fakemeta>
#include <hamsandwich>
#include <nvault>

#define ZADATAK_POKAZI_INFORMACIJE 672
#define ZADATAK_POKAZI_ORUZIJA 672
#define ZADATAK_PROVERA 704
#define ZADATAK_POKAZI_REKLAME 768
#define ZADATAK_POSTAVI_BRZINU 832

new Novo[] = "~Vrsta: Call Of Duty MW2,~Verzija: v1.0,~Autor: MakiKing64"; 

new sprite_white;
new sprite_blast;
new sprite_beam;
new sprite_trail;
new sprite_smoke;

new SyncHudObj;
new SyncHudObj2;
new SyncHudObj3;

new g_vault;
new g_msg_screenfade;
new cvar_xp_za_ubistvo;

new iskustvo_za_pare;
new iskustvo_za_mnogopara;

new Ubrania_CT[4][]={"sas","gsg9","urban","gign"};
new Ubrania_Terro[4][]={"arctic","leet","guerilla","terror"};

new const maxAmmo[31]={0,52,0,90,1,32,1,100,90,1,120,100,100,90,90,90,100,120,30,120,200,32,90,120,90,2,35,90,90,0,100};
new const maxClip[31] = { -1, 13, -1, 10,  1,  7,  1,  30, 30,  1,  30,  20,  25, 30, 35, 25,  12,  20, 10,  30, 100,  8, 30,  30, 20,  2,  7, 30, 30, -1,  50 };

new informacije_predmet_igraca[33][2];
new const naziv_predmeta[][] = 
{
	"Nema",				// 0 
	"Necujne Cizme", 		// 1
	"Dupli Pancir", 		// 2
	"Ojacani Pancir", 		// 3
	"Veteran sa nozem", 		// 4
	"Iznenadi neprijatelje", 	// 5
	"Nevidljivost", 		// 6 
	"Respawn",	  		// 7
	"Noz Marinca", 			// 8
	"Kamuflaza", 			// 9
	"HE Expert", 			// 10
	"Dupli Skok", 			// 11
	"Vojna tajna", 			// 12
	"AWP Master",			// 13
	"Adrenalin",			// 14
	"Rambova tajna",		// 15
	"Deagle Manijak",		// 16
	"Super Pancir",			// 17
	"Extra HP++",			// 18
	"Komplet za prvu pomoc",	// 19
	"No Recoil",			// 20
	"Titanijumski Metci",		// 21
	"Pukovnikovi Metci",		// 22
	"Ogranicen no-recoil",		// 23
	"SWAT Stit",			// 24
	"50 HP++",			// 25
	"Nano Oklop",			// 26
	"BulletProof",			// 27
	"Jetpack",			// 28
	"Gravitacija",			// 29
	"Speed",			// 30
	"Set Stunera",			// 31
	"M4 Swat",			// 32
	"Deagle Master",		// 33
	"Scout Expert",			// 34
	"Oprema Generala",		// 35
	"Strucni M3",			// 36
	"HE Vestina",			// 37
	"Galil Terrorizma",		// 38
	"Snajper Komplet",		// 39
	"Assassin Ogrtac",		// 40
	"Low HeadShot",		         // 41
	"M4A1-AIM",			// 42
	"AK47-AIM",			// 43
	"Beskonacno Municije",		// 44
	"Auto Bhop",			// 45
	"Zver",			         // 46
	"Jumper",			// 47
	"Novac",			// 48
	"Droga"			         // 49
};
new const opis_predmet[][] = 
{
	"Ubi nekog i dobices predmet", 
	"Necujno trcanje.", 
	"Smanjuje Stetu za LW %.",
	"Smanjuje Stetu za LW %.", 
	"Sa nozom nanosite vise DMG.",
	"Kada pogodite Protivnika od pozadi nanosite mu 2x Vise Stete", 
	"Dobijate LW % Nevidljivosti",
	"1/LW sanse da vas Ozivi nakon Smrti",
	"Instant kill s nozom",
	"Imate 1/LW sanse da ubijete sa HE. Takodzer imate Kamuflazu",
	"Instant kill sa HE. Zadajes LW % Dodatne Stete",
	"Mozete 2 puta Skociti",
	"Vase povrede su smanjene za 5%. Imate 1/LW sanse da oslijepite Protivnika",
	"Instant kill sa AWP",
	"Za svaki kill dobijate 50HP",
	"Za svaki kill dobijate pun sarzer i 20HP",
	"Dobijate DEAGLE",
	"Dobijate 500 Pancira Svake runde",
	"Svake runde dobijate 100HP,ali zato vam je Smanjena Brzina",
	"Koristite Komplet kako bi povratili sebi Energiju",
	"Prilikom pucanja nema trzanja Nisana",
	"Nanosite 10 DMG Vise stete",
	"Nanosite 20 DMG Vise stete",
	"Minimalno trzanje puske prilikom pucanja",
	"Otporni ste na Dinamit,Rakete,Mine i Predmete",
	"Svake runde dobijate 50 HP , ali vam je smanjena brzina",
	"1/LW sanse da uzvratite neprijatelju njegov metak , tako mu naneseta stetu",
	"Otporni ste na 3 Metka u svakoj Rundi",
	"Koristi se na CTR i SPACE ,Moze se Korititi svake 4 Sekunde",
	"Smanjena vam je Gravitacija,Mozete vise skociti",
	"Povecana vam je Brzina",
	"Dobijate MP5 i USP,Imate 1/2 sa USP,1/5 s MP5",
	"Dobijate M4A1,Imate 1/4 Sanse za Kill",
	"Dobijate DEAGLE,Imate 1/3 Sanse za Kill",
	"Dobijate SCOUT,Imate instant kill.",
	"Dobijate AK47,AWP,Imate Instant Kill sa AWP",
	"Dobijate M3,imate 1/3 s njim Sanse za Kill",
	"Imate 1/3 Sanse za Kill sa He Bombom",
	"Dobijate Galil,Imate 1/5 Sanse za Kill",
	"Dobijate AWP,DEAGLE,sa AWP imate 1/1,sa DEAGLE 1/2 Sanse za Kill",
	"Nevidljivi ste na Nozu",
	"Samo HeadShot vas moze Ubiti",
	"Dobijate M4A1,imate 1/3 Sanse da Ubijete sa HeadShot",
	"Dobijate AK47,imate 1/3 Sanse da Ubijete sa HeadShot",
	"Nemate kraja Municiji.",
	"Imate Auto Bunny Hop",
	"Za svaki kill dobijate 2x vise EXP-a od ostalih",
	"Mozete 3 puta skociti u zrak",
	"Dobijate +8000$ Svake runde",
	"Drogirani ste"
};
new klasa_igraca[33];
new level_igraca[33] = 1;
new iskustvo_igraca[33];

new nova_klasa_igraca[33];

new const iskustvo_levelu[] = 
{
	0,7,28,63,112,175,252,343,448,567,700,847,1008,1183,1372,1575,1792,2023,2268,2527,
	2800,3087,3388,3703,4032,4375,4732,5103,5488,5887,6300,6727,7168,7623,8092,8575,9072,9583,10108,10647,
	11200,11767,12348,12943,13552,14175,14812,15463,16128,16807,17500,18207,18928,19663,20412,21175,21952,22743,23548,24367,
	25200,26047,26908,27783,28672,29575,30492,31423,32368,33327,34300,35287,36288,37303,38332,39375,40432,41503,42588,43687,
	44800,45927,47068,48223,49392,50575,51772,52983,54208,55447,56700,57967,59248,60543,61852,63175,64512,65863,67228,68607,
	70000,71407,72828,74263,75712,77175,78652,80143,81648,83167,84700,86247,87808,89383,90972,92575,94192,95823,97468,99127,
	100800,102487,104188,105903,107632,109375,111132,112903,114688,116487,118300,120127,121968,123823,125692,127575,129472,131383,133308,135247,
	137200,139167,141148,143143,145152,147175,149212,151263,153328,155407,157500,159607,161728,163863,166012,168175,170352,172543,174748,176967,
	179200,181447,183708,185983,188272,190575,192892,195223,197568,199927,202300,204687,207088,209503,211932,214375,216832,219303,221788,224287,
	226800,229327,231868,234423,236992,239575,242172,244783,247408,250047,252700,255367,258048,260743,263452,266175,268912,271663,274428,277207,
	280000,282807,285628,288463,291312,294175,297052,299943,302848,305767,308700,311647,314608,317583,320572,323575,326592,329623,332668,335727,
	338800,341887,344988,348103,351232,354375,357532,360703,363888,367087,370300,373527,376768,380023,383292,386575,389872,393183,396508,399847,
	403200,406567,409948,413343,416752,420175,423612,427063,430528,434007,437500,441007,444528,448063,451612,455175,458752,462343,465948,469567,
	473200,476847,480508,484183,487872,491575,495292,499023,502768,506527,510300,514087,517888,521703,525532,529375,533232,537103,540988,544887,
	548800,552727,556668,560623,564592,568575,572572,576583,580608,584647,588700,592767,596848,600943,605052,609175,613312,617463,621628,625807,
	630000,634207,638428,642663,646912,651175,655452,659743,664048,668367,672700,677047,681408,685783,690172,694575,698992,703423,707868,712327,
	716800,721287,725788,730303,734832,739375,743932,748503,753088,757687,762300,766927,771568,776223,780892,785575,790272,794983,799708,804447,
	809200,813967,818748,823543,828352,833175,838012,842863,847728,852607,857500,862407,867328,872263,877212,882175,887152,892143,897148,902167,
	907200,912247,917308,922383,927472,932575,937692,942823,947968,953127,958300,963487,968688,973903,979132,984375,989632,994903,1000188,1005487,
	1010800,1016127,1021468,1026823,1032192,1037575,1042972,1048383,1053808,1059247,1064700,1070167,1075648,1081143,1086652,1092175,1097712,1103263,1108828,1114407,
	1120000,1125607,1131228,1136863,1142512,1148175,1153852,1159543,1165248,1170967,1176700,1182447,1188208,1193983,1199772,1205575,1211392,1217223,1223068,1228927,
	1234800,1240687,1246588,1252503,1258432,1264375,1270332,1276303,1282288,1288287,1294300,1300327,1306368,1312423,1318492,1324575,1330672,1336783,1342908,1349047,
	1355200,1361367,1367548,1373743,1379952,1386175,1392412,1398663,1404928,1411207,1417500,1423807,1430128,1436463,1442812,1449175,1455552,1461943,1468348,1474767,
	1481200,1487647,1494108,1500583,1507072,1513575,1520092,1526623,1533168,1539727,1546300,1552887,1559488,1566103,1572732,1579375,1586032,1592703,1599388,1606087,
	1612800,1619527,1626268,1633023,1639792,1646575,1653372,1660183,1667008,1673847,1680700,1687567,1694448,1701343,1708252,1715175,1722112,1729063,1736028,1743007,
	1750000,1757007,1764028,1771063,1778112,1785175,1792252,1799343,1806448,1813567,1820700,1827847,1835008,1842183,1849372,1856575,1863792,1871023,1878268,1885527,
	1892800,1900087,1907388,1914703,1922032,1929375,1936732,1944103,1951488,1958887,1966300,1973727,1981168,1988623,1996092,2003575,2011072,2018583,2026108,2033647,
	2041200,2048767,2056348,2063943,2071552,2079175,2086812,2094463,2102128,2109807,2117500,2125207,2132928,2140663,2148412,2156175,2163952,2171743,2179548,2187367,
	2195200,2203047,2210908,2218783,2226672,2234575,2242492,2250423,2258368,2266327,2274300,2282287,2290288,2298303,2306332,2314375,2322432,2330503,2338588,2346687,
	2354800,2362927,2371068,2379223,2387392,2395575,2403772,2411983,2420208,2428447,2436700,2444967,2453248,2461543,2469852,2478175,2486512,2494863,2503228,2511607,
	2520000,2528407,2536828,2545263,2553712,2562175,2570652,2579143,2587648,2596167,2604700,2613247,2621808,2630383,2638972,2647575,2656192,2664823,2673468,2682127,
	2690800,2699487,2708188,2716903,2725632,2734375,2743132,2751903,2760688,2769487,2778300,2787127,2795968,2804823,2813692,2822575,2831472,2840383,2849308,2858247,
	2867200,2876167,2885148,2894143,2903152,2912175,2921212,2930263,2939328,2948407,2957500,2966607,2975728,2984863,2994012,3003175,3012352,3021543,3030748,3039967,
	3049200,3058447,3067708,3076983,3086272,3095575,3104892,3114223,3123568,3132927,3142300,3151687,3161088,3170503,3179932,3189375,3198832,3208303,3217788,3227287,
	3236800,3246327,3255868,3265423,3274992,3284575,3294172,3303783,3313408,3323047,3332700,3342367,3352048,3361743,3371452,3381175,3390912,3400663,3410428,3420207,
	3430000,3439807,3449628,3459463,3469312,3479175,3489052,3498943,3508848,3518767,3528700,3538647,3548608,3558583,3568572,3578575,3588592,3598623,3608668,3618727,
	3628800,3638887,3648988,3659103,3669232,3679375,3689532,3699703,3709888,3720087,3730300,3740527,3750768,3761023,3771292,3781575,3791872,3802183,3812508,3822847,
	3833200,3843567,3853948,3864343,3874752,3885175,3895612,3906063,3916528,3927007,3937500,3948007,3958528,3969063,3979612,3990175,4000752,4011343,4021948,4032567,
	4043200,4053847,4064508,4075183,4085872,4096575,4107292,4118023,4128768,4139527,4150300,4161087,4171888,4182703,4193532,4204375,4215232,4226103,4236988,4247887,
	4258800,4269727,4280668,4291623,4302592,4313575,4324572,4335583,4346608,4357647,4368700,4379767,4390848,4401943,4413052,4424175,4435312,4446463,4457628,4468807,
	4480000,4491207,4502428,4513663,4524912,4536175,4547452,4558743,4570048,4581367,4592700,4604047,4615408,4626783,4638172,4649575,4660992,4672423,4683868,4695327,
	4706800,4718287,4729788,4741303,4752832,4764375,4775932,4787503,4799088,4810687,4822300,4833927,4845568,4857223,4868892,4880575,4892272,4903983,4915708,4927447,
	4939200,4950967,4962748,4974543,4986352,4998175,5010012,5021863,5033728,5045607,5057500,5069407,5081328,5093263,5105212,5117175,5129152,5141143,5153148,5165167,
	5177200,5189247,5201308,5213383,5225472,5237575,5249692,5261823,5273968,5286127,5298300,5310487,5322688,5334903,5347132,5359375,5371632,5383903,5396188,5408487,
	5420800,5433127,5445468,5457823,5470192,5482575,5494972,5507383,5519808,5532247,5544700,5557167,5569648,5582143,5594652,5607175,5619712,5632263,5644828,5657407,
	5670000,5682607,5695228,5707863,5720512,5733175,5745852,5758543,5771248,5783967,5796700,5809447,5822208,5834983,5847772,5860575,5873392,5886223,5899068,5911927,
	5924800,5937687,5950588,5963503,5976432,5989375,6002332,6015303,6028288,6041287,6054300,6067327,6080368,6093423,6106492,6119575,6132672,6145783,6158908,6172047,
	6185200,6198367,6211548,6224743,6237952,6251175,6264412,6277663,6290928,6304207,6317500,6330807,6344128,6357463,6370812,6384175,6397552,6410943,6424348,6437767,
	6451200,6464647,6478108,6491583,6505072,6518575,6532092,6545623,6559168,6572727,6586300,6599887,6613488,6627103,6640732,6654375,6668032,6681703,6695388,6709087,
	6722800,6736527,6750268,6764023,6777792,6791575,6805372,6819183,6833008,6846847,6860700,6874567,6888448,6902343,6916252,6930175,6944112,6958063,6972028,6986007,
	7000000,7014007,7028028,7042063,7056112,7070175,7084252,7098343,7112448,7126567,7140700,7154847,7169008,7183183,7197372,7211575,7225792,7240023,7254268,7268527,
	7282800,7297087,7311388,7325703,7340032,7354375,7368732,7383103,7397488,7411887,7426300,7440727,7455168,7469623,7484092,7498575,7513072,7527583,7542108,7556647,
	7571200,7585767,7600348,7614943,7629552,7644175,7658812,7673463,7688128,7702807,7717500,7732207,7746928,7761663,7776412,7791175,7805952,7820743,7835548,7850367,
	7865200,7880047,7894908,7909783,7924672,7939575,7954492,7969423,7984368,7999327,8014300,8029287,8044288,8059303,8074332,8089375,8104432,8119503,8134588,8149687,
	8164800,8179927,8195068,8210223,8225392,8240575,8255772,8270983,8286208,8301447,8316700,8331967,8347248,8362543,8377852,8393175,8408512,8423863,8439228,8454607,
	8470000,8485407,8500828,8516263,8531712,8547175,8562652,8578143,8593648,8609167,8624700,8640247,8655808,8671383,8686972,8702575,8718192,8733823,8749468,8765127,
	8780800,8796487,8812188,8827903,8843632,8859375,8875132,8890903,8906688,8922487,8938300,8954127,8969968,8985823,9001692,9017575,9033472,9049383,9065308,9081247,
	9097200,9113167,9129148,9145143,9161152,9177175,9193212,9209263,9225328,9241407,9257500,9273607,9289728,9305863,9322012,9338175,9354352,9370543,9386748,9402967,
	9419200,9435447,9451708,9467983,9484272,9500575,9516892,9533223,9549568,9565927,9582300,9598687,9615088,9631503,9647932,9664375,9680832,9697303,9713788,9730287,
	9746800,9763327,9779868,9796423,9812992,9829575,9846172,9862783,9879408,9896047,9912700,9929367,9946048,9962743,9979452,9996175,10012912,10029663,10046428,10063207,
	10080000,10096807,10113628,10130463,10147312,10164175,10181052,10197943,10214848,10231767,10248700,10265647,10282608,10299583,10316572,10333575,10350592,10367623,10384668,10401727,
	10418800,10435887,10452988,10470103,10487232,10504375,10521532,10538703,10555888,10573087,10590300,10607527,10624768,10642023,10659292,10676575,10693872,10711183,10728508,10745847,
	10763200,10780567,10797948,10815343,10832752,10850175,10867612,10885063,10902528,10920007,10937500,10955007,10972528,10990063,11007612,11025175,11042752,11060343,11077948,11095567,
	11113200,11130847,11148508,11166183,11183872,11201575,11219292,11237023,11254768,11272527,11290300,11308087,11325888,11343703,11361532,11379375,11397232,11415103,11432988,11450887,
	11468800,11486727,11504668,11522623,11540592,11558575,11576572,11594583,11612608,11630647,11648700,11666767,11684848,11702943,11721052,11739175,11757312,11775463,11793628,11811807,
	11830000,11848207,11866428,11884663,11902912,11921175,11939452,11957743,11976048,11994367,12012700,12031047,12049408,12067783,12086172,12104575,12122992,12141423,12159868,12178327,
	12196800,12215287,12233788,12252303,12270832,12289375,12307932,12326503,12345088,12363687,12382300,12400927,12419568,12438223,12456892,12475575,12494272,12512983,12531708,12550447,
	12569200,12587967,12606748,12625543,12644352,12663175,12682012,12700863,12719728,12738607,12757500,12776407,12795328,12814263,12833212,12852175,12871152,12890143,12909148,12928167,
	12947200,12966247,12985308,13004383,13023472,13042575,13061692,13080823,13099968,13119127,13138300,13157487,13176688,13195903,13215132,13234375,13253632,13272903,13292188,13311487,
	13330800,13350127,13369468,13388823,13408192,13427575,13446972,13466383,13485808,13505247,13524700,13544167,13563648,13583143,13602652,13622175,13641712,13661263,13680828,13700407,
	13720000,13739607,13759228,13778863,13798512,13818175,13837852,13857543,13877248,13896967,13916700,13936447,13956208,13975983,13995772,14015575,14035392,14055223,14075068,14094927,
	14114800,14134687,14154588,14174503,14194432,14214375,14234332,14254303,14274288,14294287,14314300,14334327,14354368,14374423,14394492,14414575,14434672,14454783,14474908,14495047,
	14515200,14535367,14555548,14575743,14595952,14616175,14636412,14656663,14676928,14697207,14717500,14737807,14758128,14778463,14798812,14819175,14839552,14859943,14880348,14900767,
	14921200,14941647,14962108,14982583,15003072,15023575,15044092,15064623,15085168,15105727,15126300,15146887,15167488,15188103,15208732,15229375,15250032,15270703,15291388,15312087,
	15332800,15353527,15374268,15395023,15415792,15436575,15457372,15478183,15499008,15519847,15540700,15561567,15582448,15603343,15624252,15645175,15666112,15687063,15708028,15729007,
	15750000,15771007,15792028,15813063,15834112,15855175,15876252,15897343,15918448,15939567,15960700,15981847,16003008,16024183,16045372,16066575,16087792,16109023,16130268,16151527,
	16172800,16194087,16215388,16236703,16258032,16279375,16300732,16322103,16343488,16364887,16386300,16407727,16429168,16450623,16472092,16493575,16515072,16536583,16558108,16579647,
	16601200,16622767,16644348,16665943,16687552,16709175,16730812,16752463,16774128,16795807,16817500,16839207,16860928,16882663,16904412,16926175,16947952,16969743,16991548,17013367,
	17035200,17057047,17078908,17100783,17122672,17144575,17166492,17188423,17210368,17232327,17254300,17276287,17298288,17320303,17342332,17364375,17386432,17408503,17430588,17452687,
	17474800,17496927,17519068,17541223,17563392,17585575,17607772,17629983,17652208,17674447,17696700,17718967,17741248,17763543,17785852,17808175,17830512,17852863,17875228,17897607,
	17920000,17942407,17964828,17987263,18009712,18032175,18054652,18077143,18099648,18122167,18144700,18167247,18189808,18212383,18234972,18257575,18280192,18302823,18325468,18348127,
	18370800,18393487,18416188,18438903,18461632,18484375,18507132,18529903,18552688,18575487,18598300,18621127,18643968,18666823,18689692,18712575,18735472,18758383,18781308,18804247,
	18827200,18850167,18873148,18896143,18919152,18942175,18965212,18988263,19011328,19034407,19057500,19080607,19103728,19126863,19150012,19173175,19196352,19219543,19242748,19265967,
	19289200,19312447,19335708,19358983,19382272,19405575,19428892,19452223,19475568,19498927,19522300,19545687,19569088,19592503,19615932,19639375,19662832,19686303,19709788,19733287,
	19756800,19780327,19803868,19827423,19850992,19874575,19898172,19921783,19945408,19969047,19992700,20016367,20040048,20063743,20087452,20111175,20134912,20158663,20182428,20206207,
	20230000,20253807,20277628,20301463,20325312,20349175,20373052,20396943,20420848,20444767,20468700,20492647,20516608,20540583,20564572,20588575,20612592,20636623,20660668,20684727,
	20708800,20732887,20756988,20781103,20805232,20829375,20853532,20877703,20901888,20926087,20950300,20974527,20998768,21023023,21047292,21071575,21095872,21120183,21144508,21168847,
	21193200,21217567,21241948,21266343,21290752,21315175,21339612,21364063,21388528,21413007,21437500,21462007,21486528,21511063,21535612,21560175,21584752,21609343,21633948,21658567,
	21683200,21707847,21732508,21757183,21781872,21806575,21831292,21856023,21880768,21905527,21930300,21955087,21979888,22004703,22029532,22054375,22079232,22104103,22128988,22153887,
	22178800,22203727,22228668,22253623,22278592,22303575,22328572,22353583,22378608,22403647,22428700,22453767,22478848,22503943,22529052,22554175,22579312,22604463,22629628,22654807,
	22680000,22705207,22730428,22755663,22780912,22806175,22831452,22856743,22882048,22907367,22932700,22958047,22983408,23008783,23034172,23059575,23084992,23110423,23135868,23161327,
	23186800,23212287,23237788,23263303,23288832,23314375,23339932,23365503,23391088,23416687,23442300,23467927,23493568,23519223,23544892,23570575,23596272,23621983,23647708,23673447,
	23699200,23724967,23750748,23776543,23802352,23828175,23854012,23879863,23905728,23931607,23957500,23983407,24009328,24035263,24061212,24087175,24113152,24139143,24165148,24191167,
	24217200,24243247,24269308,24295383,24321472,24347575,24373692,24399823,24425968,24452127,24478300,24504487,24530688,24556903,24583132,24609375,24635632,24661903,24688188,24714487,
	24740800,24767127,24793468,24819823,24846192,24872575,24898972,24925383,24951808,24978247,25004700,25031167,25057648,25084143,25110652,25137175,25163712,25190263,25216828,25243407,
	25270000,25296607,25323228,25349863,25376512,25403175,25429852,25456543,25483248,25509967,25536700,25563447,25590208,25616983,25643772,25670575,25697392,25724223,25751068,25777927,
	25804800,25831687,25858588,25885503,25912432,25939375,25966332,25993303,26020288,26047287,26074300,26101327,26128368,26155423,26182492,26209575,26236672,26263783,26290908,26318047,
	26345200,26372367,26399548,26426743,26453952,26481175,26508412,26535663,26562928,26590207,26617500,26644807,26672128,26699463,26726812,26754175,26781552,26808943,26836348,26863767,
	26891200,26918647,26946108,26973583,27001072,27028575,27056092,27083623,27111168,27138727,27166300,27193887,27221488,27249103,27276732,27304375,27332032,27359703,27387388,27415087,
	27442800,27470527,27498268,27526023,27553792,27581575,27609372,27637183,27665008,27692847,27720700,27748567,27776448,27804343,27832252,27860175,27888112,27916063,27944028,27972007,
	28000000,28028007,28056028,28084063,28112112,28140175,28168252,28196343,28224448,28252567,28280700,28308847,28337008,28365183,28393372,28421575,28449792,28478023,28506268,28534527,
	28562800,28591087,28619388,28647703,28676032,28704375,28732732,28761103,28789488,28817887,28846300,28874727,28903168,28931623,28960092,28988575,29017072,29045583,29074108,29102647,
	29131200,29159767,29188348,29216943,29245552,29274175,29302812,29331463,29360128,29388807,29417500,29446207,29474928,29503663,29532412,29561175,29589952,29618743,29647548,29676367,
	29705200,29734047,29762908,29791783,29820672,29849575,29878492,29907423,29936368,29965327,29994300,30023287,30052288,30081303,30110332,30139375,30168432,30197503,30226588,30255687,
	30284800,30313927,30343068,30372223,30401392,30430575,30459772,30488983,30518208,30547447,30576700,30605967,30635248,30664543,30693852,30723175,30752512,30781863,30811228,30840607,
	30870000,30899407,30928828,30958263,30987712,31017175,31046652,31076143,31105648,31135167,31164700,31194247,31223808,31253383,31282972,31312575,31342192,31371823,31401468,31431127,
	31460800,31490487,31520188,31549903,31579632,31609375,31639132,31668903,31698688,31728487,31758300,31788127,31817968,31847823,31877692,31907575,31937472,31967383,31997308,32027247,
	32057200,32087167,32117148,32147143,32177152,32207175,32237212,32267263,32297328,32327407,32357500,32387607,32417728,32447863,32478012,32508175,32538352,32568543,32598748,32628967,
	32659200,32689447,32719708,32749983,32780272,32810575,32840892,32871223,32901568,32931927,32962300,32992687,33023088,33053503,33083932,33114375,33144832,33175303,33205788,33236287,
	33266800,33297327,33327868,33358423,33388992,33419575,33450172,33480783,33511408,33542047,33572700,33603367,33634048,33664743,33695452,33726175,33756912,33787663,33818428,33849207,
	33880000,33910807,33941628,33972463,34003312,34034175,34065052,34095943,34126848,34157767,34188700,34219647,34250608,34281583,34312572,34343575,34374592,34405623,34436668,34467727,
	34498800,34529887,34560988,34592103,34623232,34654375,34685532,34716703,34747888,34779087,34810300,34841527,34872768,34904023,34935292,34966575,34997872,35029183,35060508,35091847,
	35123200,35154567,35185948,35217343,35248752,35280175,35311612,35343063,35374528,35406007,35437500,35469007,35500528,35532063,35563612,35595175,35626752,35658343,35689948,35721567,
	35753200,35784847,35816508,35848183,35879872,35911575,35943292,35975023,36006768,36038527,36070300,36102087,36133888,36165703,36197532,36229375,36261232,36293103,36324988,36356887,
	36388800,36420727,36452668,36484623,36516592,36548575,36580572,36612583,36644608,36676647,36708700,36740767,36772848,36804943,36837052,36869175,36901312,36933463,36965628,36997807,
	37030000,37062207,37094428,37126663,37158912,37191175,37223452,37255743,37288048,37320367,37352700,37385047,37417408,37449783,37482172,37514575,37546992,37579423,37611868,37644327,
	37676800,37709287,37741788,37774303,37806832,37839375,37871932,37904503,37937088,37969687,38002300,38034927,38067568,38100223,38132892,38165575,38198272,38230983,38263708,38296447,
	38329200,38361967,38394748,38427543,38460352,38493175,38526012,38558863,38591728,38624607,38657500,38690407,38723328,38756263,38789212,38822175,38855152,38888143,38921148,38954167,
	38987200,39020247,39053308,39086383,39119472,39152575,39185692,39218823,39251968,39285127,39318300,39351487,39384688,39417903,39451132,39484375,39517632,39550903,39584188,39617487,
	39650800,39684127,39717468,39750823,39784192,39817575,39850972,39884383,39917808,39951247,39984700,40018167,40051648,40085143,40118652,40152175,40185712,40219263,40252828,40286407,
	40320000,40353607,40387228,40420863,40454512,40488175,40521852,40555543,40589248,40622967,40656700,40690447,40724208,40757983,40791772,40825575,40859392,40893223,40927068,40960927,
	40994800,41028687,41062588,41096503,41130432,41164375,41198332,41232303,41266288,41300287,41334300,41368327,41402368,41436423,41470492,41504575,41538672,41572783,41606908,41641047,
	41675200,41709367,41743548,41777743,41811952,41846175,41880412,41914663,41948928,41983207,42017500,42051807,42086128,42120463,42154812,42189175,42223552,42257943,42292348,42326767,
	42361200,42395647,42430108,42464583,42499072,42533575,42568092,42602623,42637168,42671727,42706300,42740887,42775488,42810103,42844732,42879375,42914032,42948703,42983388,43018087,
	43052800,43087527,43122268,43157023,43191792,43226575,43261372,43296183,43331008,43365847,43400700,43435567,43470448,43505343,43540252,43575175,43610112,43645063,43680028,43715007,
	43750000,43785007,43820028,43855063,43890112,43925175,43960252,43995343,44030448,44065567,44100700,44135847,44171008,44206183,44241372,44276575,44311792,44347023,44382268,44417527,
	44452800,44488087,44523388,44558703,44594032,44629375,44664732,44700103,44735488,44770887,44806300,44841727,44877168,44912623,44948092,44983575,45019072,45054583,45090108,45125647,
	45161200,45196767,45232348,45267943,45303552,45339175,45374812,45410463,45446128,45481807,45517500,45553207,45588928,45624663,45660412,45696175,45731952,45767743,45803548,45839367,
	45875200,45911047,45946908,45982783,46018672,46054575,46090492,46126423,46162368,46198327,46234300,46270287,46306288,46342303,46378332,46414375,46450432,46486503,46522588,46558687,
	46594800,46630927,46667068,46703223,46739392,46775575,46811772,46847983,46884208,46920447,46956700,46992967,47029248,47065543,47101852,47138175,47174512,47210863,47247228,47283607,
	47320000,47356407,47392828,47429263,47465712,47502175,47538652,47575143,47611648,47648167,47684700,47721247,47757808,47794383,47830972,47867575,47904192,47940823,47977468,48014127,
	48050800,48087487,48124188,48160903,48197632,48234375,48271132,48307903,48344688,48381487,48418300,48455127,48491968,48528823,48565692,48602575,48639472,48676383,48713308,48750247,
	48787200,48824167,48861148,48898143,48935152,48972175,49009212,49046263,49083328,49120407,49157500,49194607,49231728,49268863,49306012,49343175,49380352,49417543,49454748,49491967,
	49529200,49566447,49603708,49640983,49678272,49715575,49752892,49790223,49827568,49864927,49902300,49939687,49977088,50014503,50051932,50089375,50126832,50164303,50201788,50239287,
	50276800,50314327,50351868,50389423,50426992,50464575,50502172,50539783,50577408,50615047,50652700,50690367,50728048,50765743,50803452,50841175,50878912,50916663,50954428,50992207,
	51030000,51067807,51105628,51143463,51181312,51219175,51257052,51294943,51332848,51370767,51408700,51446647,51484608,51522583,51560572,51598575,51636592,51674623,51712668,51750727,
	51788800,51826887,51864988,51903103,51941232,51979375,52017532,52055703,52093888,52132087,52170300,52208527,52246768,52285023,52323292,52361575,52399872,52438183,52476508,52514847,
	52553200,52591567,52629948,52668343,52706752,52745175,52783612,52822063,52860528,52899007,52937500,52976007,53014528,53053063,53091612,53130175,53168752,53207343,53245948,53284567,
	53323200,53361847,53400508,53439183,53477872,53516575,53555292,53594023,53632768,53671527,53710300,53749087,53787888,53826703,53865532,53904375,53943232,53982103,54020988,54059887,
	54098800,54137727,54176668,54215623,54254592,54293575,54332572,54371583,54410608,54449647,54488700,54527767,54566848,54605943,54645052,54684175,54723312,54762463,54801628,54840807,
	54880000,54919207,54958428,54997663,55036912,55076175,55115452,55154743,55194048,55233367,55272700,55312047,55351408,55390783,55430172,55469575,55508992,55548423,55587868,55627327,
	55666800,55706287,55745788,55785303,55824832,55864375,55903932,55943503,55983088,56022687,56062300,56101927,56141568,56181223,56220892,56260575,56300272,56339983,56379708,56419447,
	56459200,56498967,56538748,56578543,56618352,56658175,56698012,56737863,56777728,56817607,56857500,56897407,56937328,56977263,57017212,57057175,57097152,57137143,57177148,57217167,
	57257200,57297247,57337308,57377383,57417472,57457575,57497692,57537823,57577968,57618127,57658300,57698487,57738688,57778903,57819132,57859375,57899632,57939903,57980188,58020487,
	58060800,58101127,58141468,58181823,58222192,58262575,58302972,58343383,58383808,58424247,58464700,58505167,58545648,58586143,58626652,58667175,58707712,58748263,58788828,58829407,
	58870000,58910607,58951228,58991863,59032512,59073175,59113852,59154543,59195248,59235967,59276700,59317447,59358208,59398983,59439772,59480575,59521392,59562223,59603068,59643927,
	59684800,59725687,59766588,59807503,59848432,59889375,59930332,59971303,60012288,60053287,60094300,60135327,60176368,60217423,60258492,60299575,60340672,60381783,60422908,60464047,
	60505200,60546367,60587548,60628743,60669952,60711175,60752412,60793663,60834928,60876207,60917500,60958807,61000128,61041463,61082812,61124175,61165552,61206943,61248348,61289767,
	61331200,61372647,61414108,61455583,61497072,61538575,61580092,61621623,61663168,61704727,61746300,61787887,61829488,61871103,61912732,61954375,61996032,62037703,62079388,62121087,
	62162800,62204527,62246268,62288023,62329792,62371575,62413372,62455183,62497008,62538847,62580700,62622567,62664448,62706343,62748252,62790175,62832112,62874063,62916028,62958007,
	63000000,63042007,63084028,63126063,63168112,63210175,63252252,63294343,63336448,63378567,63420700,63462847,63505008,63547183,63589372,63631575,63673792,63716023,63758268,63800527,
	63842800,63885087,63927388,63969703,64012032,64054375,64096732,64139103,64181488,64223887,64266300,64308727,64351168,64393623,64436092,64478575,64521072,64563583,64606108,64648647,
	64691200,64733767,64776348,64818943,64861552,64904175,64946812,64989463,65032128,65074807,65117500,65160207,65202928,65245663,65288412,65331175,65373952,65416743,65459548,65502367,
	65545200,65588047,65630908,65673783,65716672,65759575,65802492,65845423,65888368,65931327,65974300,66017287,66060288,66103303,66146332,66189375,66232432,66275503,66318588,66361687,
	66404800,66447927,66491068,66534223,66577392,66620575,66663772,66706983,66750208,66793447,66836700,66879967,66923248,66966543,67009852,67053175,67096512,67139863,67183228,67226607,
	67270000,67313407,67356828,67400263,67443712,67487175,67530652,67574143,67617648,67661167,67704700,67748247,67791808,67835383,67878972,67922575,67966192,68009823,68053468,68097127,
	68140800,68184487,68228188,68271903,68315632,68359375,68403132,68446903,68490688,68534487,68578300,68622127,68665968,68709823,68753692,68797575,68841472,68885383,68929308,68973247,
	69017200,69061167,69105148,69149143,69193152,69237175,69281212,69325263,69369328,69413407,69457500,69501607,69545728,69589863,69634012,69678175,69722352,69766543,69810748,69854967,
	69899200,69943447,69987708,70031983,70076272,70120575,70164892,70209223,70253568,70297927,70342300,70386687,70431088,70475503,70519932,70564375,70608832,70653303,70697788,70742287,
	70786800,70831327,70875868,70920423,70964992,71009575,71054172,71098783,71143408,71188047,71232700,71277367,71322048,71366743,71411452,71456175,71500912,71545663,71590428,71635207,
	71680000,71724807,71769628,71814463,71859312,71904175,71949052,71993943,72038848,72083767,72128700,72173647,72218608,72263583,72308572,72353575,72398592,72443623,72488668,72533727,
	72578800,72623887,72668988,72714103,72759232,72804375,72849532,72894703,72939888,72985087,73030300,73075527,73120768,73166023,73211292,73256575,73301872,73347183,73392508,73437847,
	73483200,73528567,73573948,73619343,73664752,73710175,73755612,73801063,73846528,73892007,73937500,73983007,74028528,74074063,74119612,74165175,74210752,74256343,74301948,74347567,
	74393200,74438847,74484508,74530183,74575872,74621575,74667292,74713023,74758768,74804527,74850300,74896087,74941888,74987703,75033532,75079375,75125232,75171103,75216988,75262887,
	75308800,75354727,75400668,75446623,75492592,75538575,75584572,75630583,75676608,75722647,75768700,75814767,75860848,75906943,75953052,75999175,76045312,76091463,76137628,76183807,
	76230000,76276207,76322428,76368663,76414912,76461175,76507452,76553743,76600048,76646367,76692700,76739047,76785408,76831783,76878172,76924575,76970992,77017423,77063868,77110327,
	77156800,77203287,77249788,77296303,77342832,77389375,77435932,77482503,77529088,77575687,77622300,77668927,77715568,77762223,77808892,77855575,77902272,77948983,77995708,78042447,
	78089200,78135967,78182748,78229543,78276352,78323175,78370012,78416863,78463728,78510607,78557500,78604407,78651328,78698263,78745212,78792175,78839152,78886143,78933148,78980167,
	79027200,79074247,79121308,79168383,79215472,79262575,79309692,79356823,79403968,79451127,79498300,79545487,79592688,79639903,79687132,79734375,79781632,79828903,79876188,79923487,
	79970800,80018127,80065468,80112823,80160192,80207575,80254972,80302383,80349808,80397247,80444700,80492167,80539648,80587143,80634652,80682175,80729712,80777263,80824828,80872407,
	80920000,80967607,81015228,81062863,81110512,81158175,81205852,81253543,81301248,81348967,81396700,81444447,81492208,81539983,81587772,81635575,81683392,81731223,81779068,81826927,
	81874800,81922687,81970588,82018503,82066432,82114375,82162332,82210303,82258288,82306287,82354300,82402327,82450368,82498423,82546492,82594575,82642672,82690783,82738908,82787047,
	82835200,82883367,82931548,82979743,83027952,83076175,83124412,83172663,83220928,83269207,83317500,83365807,83414128,83462463,83510812,83559175,83607552,83655943,83704348,83752767,
	83801200,83849647,83898108,83946583,83995072,84043575,84092092,84140623,84189168,84237727,84286300,84334887,84383488,84432103,84480732,84529375,84578032,84626703,84675388,84724087,
	84772800,84821527,84870268,84919023,84967792,85016575,85065372,85114183,85163008,85211847,85260700,85309567,85358448,85407343,85456252,85505175,85554112,85603063,85652028,85701007,
	85750000,85799007,85848028,85897063,85946112,85995175,86044252,86093343,86142448,86191567,86240700,86289847,86339008,86388183,86437372,86486575,86535792,86585023,86634268,86683527,
	86732800,86782087,86831388,86880703,86930032,86979375,87028732,87078103,87127488,87176887,87226300,87275727,87325168,87374623,87424092,87473575,87523072,87572583,87622108,87671647,
	87721200,87770767,87820348,87869943,87919552,87969175,88018812,88068463,88118128,88167807,88217500,88267207,88316928,88366663,88416412,88466175,88515952,88565743,88615548,88665367,
	88715200,88765047,88814908,88864783,88914672,88964575,89014492,89064423,89114368,89164327,89214300,89264287,89314288,89364303,89414332,89464375,89514432,89564503,89614588,89664687,
	89714800,89764927,89815068,89865223,89915392,89965575,90015772,90065983,90116208,90166447,90216700,90266967,90317248,90367543,90417852,90468175,90518512,90568863,90619228,90669607,
	90720000,90770407,90820828,90871263,90921712,90972175,91022652,91073143,91123648,91174167,91224700,91275247,91325808,91376383,91426972,91477575,91528192,91578823,91629468,91680127,
	91730800,91781487,91832188,91882903,91933632,91984375,92035132,92085903,92136688,92187487,92238300,92289127,92339968,92390823,92441692,92492575,92543472,92594383,92645308,92696247,
	92747200,92798167,92849148,92900143,92951152,93002175,93053212,93104263,93155328,93206407,93257500,93308607,93359728,93410863,93462012,93513175,93564352,93615543,93666748,93717967,
	93769200,93820447,93871708,93922983,93974272,94025575,94076892,94128223,94179568,94230927,94282300,94333687,94385088,94436503,94487932,94539375,94590832,94642303,94693788,94745287,
	94796800,94848327,94899868,94951423,95002992,95054575,95106172,95157783,95209408,95261047,95312700,95364367,95416048,95467743,95519452,95571175,95622912,95674663,95726428,95778207,
	95830000,95881807,95933628,95985463,96037312,96089175,96141052,96192943,96244848,96296767,96348700,96400647,96452608,96504583,96556572,96608575,96660592,96712623,96764668,96816727,
	96868800,96920887,96972988,97025103,97077232,97129375,97181532,97233703,97285888,97338087,97390300,97442527,97494768,97547023,97599292,97651575,97703872,97756183,97808508,97860847,
	97913200,97965567,98017948,98070343,98122752,98175175,98227612,98280063,98332528,98385007,98437500,98490007,98542528,98595063,98647612,98700175,98752752,98805343,98857948,98910567,
	98963200,99015847,99068508,99121183,99173872,99226575,99279292,99332023,99384768,99437527,99490300,99543087,99595888,99648703,99701532,99754375,99807232,99860103,99912988,99965887,
	100018800,100071727,100124668,100177623,100230592,100283575,100336572,100389583,100442608,100495647,100548700,100601767,100654848,100707943,100761052,100814175,100867312,100920463,100973628,101026807,
	101080000,101133207,101186428,101239663,101292912,101346175,101399452,101452743,101506048,101559367,101612700,101666047,101719408,101772783,101826172,101879575,101932992,101986423,102039868,102093327,
	102146800,102200287,102253788,102307303,102360832,102414375,102467932,102521503,102575088,102628687,102682300,102735927,102789568,102843223,102896892,102950575,103004272,103057983,103111708,103165447,
	103219200,103272967,103326748,103380543,103434352,103488175,103542012,103595863,103649728,103703607,103757500,103811407,103865328,103919263,103973212,104027175,104081152,104135143,104189148,104243167,
	104297200,104351247,104405308,104459383,104513472,104567575,104621692,104675823,104729968,104784127,104838300,104892487,104946688,105000903,105055132,105109375,105163632,105217903,105272188,105326487,
	105380800,105435127,105489468,105543823,105598192,105652575,105706972,105761383,105815808,105870247,105924700,105979167,106033648,106088143,106142652,106197175,106251712,106306263,106360828,106415407,
	106470000,106524607,106579228,106633863,106688512,106743175,106797852,106852543,106907248,106961967,107016700,107071447,107126208,107180983,107235772,107290575,107345392,107400223,107455068,107509927,
	107564800,107619687,107674588,107729503,107784432,107839375,107894332,107949303,108004288,108059287,108114300,108169327,108224368,108279423,108334492,108389575,108444672,108499783,108554908,108610047,
	108665200,108720367,108775548,108830743,108885952,108941175,108996412,109051663,109106928,109162207,109217500,109272807,109328128,109383463,109438812,109494175,109549552,109604943,109660348,109715767,
	109771200,109826647,109882108,109937583,109993072,110048575,110104092,110159623,110215168,110270727,110326300,110381887,110437488,110493103,110548732,110604375,110660032,110715703,110771388,110827087,
	110882800,110938527,110994268,111050023,111105792,111161575,111217372,111273183,111329008,111384847,111440700,111496567,111552448,111608343,111664252,111720175,111776112,111832063,111888028,111944007,
	112000000,112056007,112112028,112168063,112224112,112280175,112336252,112392343,112448448,112504567,112560700,112616847,112673008,112729183,112785372,112841575,112897792,112954023,113010268,113066527,
	113122800,113179087,113235388,113291703,113348032,113404375,113460732,113517103,113573488,113629887,113686300,113742727,113799168,113855623,113912092,113968575,114025072,114081583,114138108,114194647,
	114251200,114307767,114364348,114420943,114477552,114534175,114590812,114647463,114704128,114760807,114817500,114874207,114930928,114987663,115044412,115101175,115157952,115214743,115271548,115328367,
	115385200,115442047,115498908,115555783,115612672,115669575,115726492,115783423,115840368,115897327,115954300,116011287,116068288,116125303,116182332,116239375,116296432,116353503,116410588,116467687,
	116524800,116581927,116639068,116696223,116753392,116810575,116867772,116924983,116982208,117039447,117096700,117153967,117211248,117268543,117325852,117383175,117440512,117497863,117555228,117612607,
	117670000,117727407,117784828,117842263,117899712,117957175,118014652,118072143,118129648,118187167,118244700,118302247,118359808,118417383,118474972,118532575,118590192,118647823,118705468,118763127,
	118820800,118878487,118936188,118993903,119051632,119109375,119167132,119224903,119282688,119340487,119398300,119456127,119513968,119571823,119629692,119687575,119745472,119803383,119861308,119919247,
	119977200,120035167,120093148,120151143,120209152,120267175,120325212,120383263,120441328,120499407,120557500,120615607,120673728,120731863,120790012,120848175,120906352,120964543,121022748,121080967,
	121139200,121197447,121255708,121313983,121372272,121430575,121488892,121547223,121605568,121663927,121722300,121780687,121839088,121897503,121955932,122014375,122072832,122131303,122189788,122248287,
	122306800,122365327,122423868,122482423,122540992,122599575,122658172,122716783,122775408,122834047,122892700,122951367,123010048,123068743,123127452,123186175,123244912,123303663,123362428,123421207,
	123480000,123538807,123597628,123656463,123715312,123774175,123833052,123891943,123950848,124009767,124068700,124127647,124186608,124245583,124304572,124363575,124422592,124481623,124540668,124599727,
	124658800,124717887,124776988,124836103,124895232,124954375,125013532,125072703,125131888,125191087,125250300,125309527,125368768,125428023,125487292,125546575,125605872,125665183,125724508,125783847,
	125843200,125902567,125961948,126021343,126080752,126140175,126199612,126259063,126318528,126378007,126437500,126497007,126556528,126616063,126675612,126735175,126794752,126854343,126913948,126973567,
	127033200,127092847,127152508,127212183,127271872,127331575,127391292,127451023,127510768,127570527,127630300,127690087,127749888,127809703,127869532,127929375,127989232,128049103,128108988,128168887,
	128228800,128288727,128348668,128408623,128468592,128528575,128588572,128648583,128708608,128768647,128828700,128888767,128948848,129008943,129069052,129129175,129189312,129249463,129309628,129369807,
	129430000,129490207,129550428,129610663,129670912,129731175,129791452,129851743,129912048,129972367,130032700,130093047,130153408,130213783,130274172,130334575,130394992,130455423,130515868,130576327,
	130636800,130697287,130757788,130818303,130878832,130939375,130999932,131060503,131121088,131181687,131242300,131302927,131363568,131424223,131484892,131545575,131606272,131666983,131727708,131788447,
	131849200,131909967,131970748,132031543,132092352,132153175,132214012,132274863,132335728,132396607,132457500,132518407,132579328,132640263,132701212,132762175,132823152,132884143,132945148,133006167,
	133067200,133128247,133189308,133250383,133311472,133372575,133433692,133494823,133555968,133617127,133678300,133739487,133800688,133861903,133923132,133984375,134045632,134106903,134168188,134229487,
	134290800,134352127,134413468,134474823,134536192,134597575,134658972,134720383,134781808,134843247,134904700,134966167,135027648,135089143,135150652,135212175,135273712,135335263,135396828,135458407,
	135520000,135581607,135643228,135704863,135766512,135828175,135889852,135951543,136013248,136074967,136136700,136198447,136260208,136321983,136383772,136445575,136507392,136569223,136631068,136692927,
	136754800,136816687,136878588,136940503,137002432,137064375,137126332,137188303,137250288,137312287,137374300,137436327,137498368,137560423,137622492,137684575,137746672,137808783,137870908,137933047,
	137995200,138057367,138119548,138181743,138243952,138306175,138368412,138430663,138492928,138555207,138617500,138679807,138742128,138804463,138866812,138929175,138991552,139053943,139116348,139178767,
	139241200,139303647,139366108,139428583,139491072,139553575,139616092,139678623,139741168,139803727,139866300,139928887,139991488,140054103,140116732,140179375,140242032,140304703,140367388,140430087,
	140492800,140555527,140618268,140681023,140743792,140806575,140869372,140932183,140995008,141057847,141120700,141183567,141246448,141309343,141372252,141435175,141498112,141561063,141624028,141687007,
	141750000,141813007,141876028,141939063,142002112,142065175,142128252,142191343,142254448,142317567,142380700,142443847,142507008,142570183,142633372,142696575,142759792,142823023,142886268,142949527,
	143012800,143076087,143139388,143202703,143266032,143329375,143392732,143456103,143519488,143582887,143646300,143709727,143773168,143836623,143900092,143963575,144027072,144090583,144154108,144217647,
	144281200,144344767,144408348,144471943,144535552,144599175,144662812,144726463,144790128,144853807,144917500,144981207,145044928,145108663,145172412,145236175,145299952,145363743,145427548,145491367,
	145555200,145619047,145682908,145746783,145810672,145874575,145938492,146002423,146066368,146130327,146194300,146258287,146322288,146386303,146450332,146514375,146578432,146642503,146706588,146770687,
	146834800,146898927,146963068,147027223,147091392,147155575,147219772,147283983,147348208,147412447,147476700,147540967,147605248,147669543,147733852,147798175,147862512,147926863,147991228,148055607,
	148120000,148184407,148248828,148313263,148377712,148442175,148506652,148571143,148635648,148700167,148764700,148829247,148893808,148958383,149022972,149087575,149152192,149216823,149281468,149346127,
	149410800,149475487,149540188,149604903,149669632,149734375,149799132,149863903,149928688,149993487,150058300,150123127,150187968,150252823,150317692,150382575,150447472,150512383,150577308,150642247,
	150707200,150772167,150837148,150902143,150967152,151032175,151097212,151162263,151227328,151292407,151357500,151422607,151487728,151552863,151618012,151683175,151748352,151813543,151878748,151943967,
	152009200,152074447,152139708,152204983,152270272,152335575,152400892,152466223,152531568,152596927,152662300,152727687,152793088,152858503,152923932,152989375,153054832,153120303,153185788,153251287,
	153316800,153382327,153447868,153513423,153578992,153644575,153710172,153775783,153841408,153907047,153972700,154038367,154104048,154169743,154235452,154301175,154366912,154432663,154498428,154564207,
	154630000,154695807,154761628,154827463,154893312,154959175,155025052,155090943,155156848,155222767,155288700,155354647,155420608,155486583,155552572,155618575,155684592,155750623,155816668,155882727,
	155948800,156014887,156080988,156147103,156213232,156279375,156345532,156411703,156477888,156544087,156610300,156676527,156742768,156809023,156875292,156941575,157007872,157074183,157140508,157206847,
	157273200,157339567,157405948,157472343,157538752,157605175,157671612,157738063,157804528,157871007,157937500,158004007,158070528,158137063,158203612,158270175,158336752,158403343,158469948,158536567,
	158603200,158669847,158736508,158803183,158869872,158936575,159003292,159070023,159136768,159203527,159270300,159337087,159403888,159470703,159537532,159604375,159671232,159738103,159804988,159871887,
	159938800,160005727,160072668,160139623,160206592,160273575,160340572,160407583,160474608,160541647,160608700,160675767,160742848,160809943,160877052,160944175,161011312,161078463,161145628,161212807,
	161280000,161347207,161414428,161481663,161548912,161616175,161683452,161750743,161818048,161885367,161952700,162020047,162087408,162154783,162222172,162289575,162356992,162424423,162491868,162559327,
	162626800,162694287,162761788,162829303,162896832,162964375,163031932,163099503,163167088,163234687,163302300,163369927,163437568,163505223,163572892,163640575,163708272,163775983,163843708,163911447,
	163979200,164046967,164114748,164182543,164250352,164318175,164386012,164453863,164521728,164589607,164657500,164725407,164793328,164861263,164929212,164997175,165065152,165133143,165201148,165269167,
	165337200,165405247,165473308,165541383,165609472,165677575,165745692,165813823,165881968,165950127,166018300,166086487,166154688,166222903,166291132,166359375,166427632,166495903,166564188,166632487,
	166700800,166769127,166837468,166905823,166974192,167042575,167110972,167179383,167247808,167316247,167384700,167453167,167521648,167590143,167658652,167727175,167795712,167864263,167932828,168001407,
	168070000,168138607,168207228,168275863,168344512,168413175,168481852,168550543,168619248,168687967,168756700,168825447,168894208,168962983,169031772,169100575,169169392,169238223,169307068,169375927,
	169444800,169513687,169582588,169651503,169720432,169789375,169858332,169927303,169996288,170065287,170134300,170203327,170272368,170341423,170410492,170479575,170548672,170617783,170686908,170756047,
	170825200,170894367,170963548,171032743,171101952,171171175,171240412,171309663,171378928,171448207,171517500,171586807,171656128,171725463,171794812,171864175,171933552,172002943,172072348,172141767,
	172211200,172280647,172350108,172419583,172489072,172558575,172628092,172697623,172767168,172836727,172906300,172975887,173045488,173115103,173184732,173254375,173324032,173393703,173463388,173533087,
	173602800,173672527,173742268,173812023,173881792,173951575,174021372,174091183,174161008,174230847,174300700,174370567,174440448,174510343,174580252,174650175,174720112,174790063,174860028,174930007,
	175000000,175070007,175140028,175210063,175280112,175350175,175420252,175490343,175560448,175630567,175700700,175770847,175841008,175911183,175981372,176051575,176121792,176192023,176262268,176332527,
	176402800,176473087,176543388,176613703,176684032,176754375,176824732,176895103,176965488,177035887,177106300,177176727,177247168,177317623,177388092,177458575,177529072,177599583,177670108,177740647,
	177811200,177881767,177952348,178022943,178093552,178164175,178234812,178305463,178376128,178446807,178517500,178588207,178658928,178729663,178800412,178871175,178941952,179012743,179083548,179154367,
	179225200,179296047,179366908,179437783,179508672,179579575,179650492,179721423,179792368,179863327,179934300,180005287,180076288,180147303,180218332,180289375,180360432,180431503,180502588,180573687,
	180644800,180715927,180787068,180858223,180929392,181000575,181071772,181142983,181214208,181285447,181356700,181427967,181499248,181570543,181641852,181713175,181784512,181855863,181927228,181998607,
	182070000,182141407,182212828,182284263,182355712,182427175,182498652,182570143,182641648,182713167,182784700,182856247,182927808,182999383,183070972,183142575,183214192,183285823,183357468,183429127,
	183500800,183572487,183644188,183715903,183787632,183859375,183931132,184002903,184074688,184146487,184218300,184290127,184361968,184433823,184505692,184577575,184649472,184721383,184793308,184865247,
	184937200,185009167,185081148,185153143,185225152,185297175,185369212,185441263,185513328,185585407,185657500,185729607,185801728,185873863,185946012,186018175,186090352,186162543,186234748,186306967,
	186379200,186451447,186523708,186595983,186668272,186740575,186812892,186885223,186957568,187029927,187102300,187174687,187247088,187319503,187391932,187464375,187536832,187609303,187681788,187754287,
	187826800,187899327,187971868,188044423,188116992,188189575,188262172,188334783,188407408,188480047,188552700,188625367,188698048,188770743,188843452,188916175,188988912,189061663,189134428,189207207,
	189280000,189352807,189425628,189498463,189571312,189644175,189717052,189789943,189862848,189935767,190008700,190081647,190154608,190227583,190300572,190373575,190446592,190519623,190592668,190665727,
	190738800,190811887,190884988,190958103,191031232,191104375,191177532,191250703,191323888,191397087,191470300,191543527,191616768,191690023,191763292,191836575,191909872,191983183,192056508,192129847,
	192203200,192276567,192349948,192423343,192496752,192570175,192643612,192717063,192790528,192864007,192937500,193011007,193084528,193158063,193231612,193305175,193378752,193452343,193525948,193599567,
	193673200,193746847,193820508,193894183,193967872,194041575,194115292,194189023,194262768,194336527,194410300,194484087,194557888,194631703,194705532,194779375,194853232,194927103,195000988,195074887,
	195148800,195222727,195296668,195370623,195444592,195518575,195592572,195666583,195740608,195814647,195888700,195962767,196036848,196110943,196185052,196259175,196333312,196407463,196481628,196555807,
	196630000,196704207,196778428,196852663,196926912,197001175,197075452,197149743,197224048,197298367,197372700,197447047,197521408,197595783,197670172,197744575,197818992,197893423,197967868,198042327,
	198116800,198191287,198265788,198340303,198414832,198489375,198563932,198638503,198713088,198787687,198862300,198936927,199011568,199086223,199160892,199235575,199310272,199384983,199459708,199534447,
	199609200,199683967,199758748,199833543,199908352,199983175,200058012,200132863,200207728,200282607,200357500,200432407,200507328,200582263,200657212,200732175,200807152,200882143,200957148,201032167,
	201107200,201182247,201257308,201332383,201407472,201482575,201557692,201632823,201707968,201783127,201858300,201933487,202008688,202083903,202159132,202234375,202309632,202384903,202460188,202535487,
	202610800,202686127,202761468,202836823,202912192,202987575,203062972,203138383,203213808,203289247,203364700,203440167,203515648,203591143,203666652,203742175,203817712,203893263,203968828,204044407,
	204120000,204195607,204271228,204346863,204422512,204498175,204573852,204649543,204725248,204800967,204876700,204952447,205028208,205103983,205179772,205255575,205331392,205407223,205483068,205558927,
	205634800,205710687,205786588,205862503,205938432,206014375,206090332,206166303,206242288,206318287,206394300,206470327,206546368,206622423,206698492,206774575,206850672,206926783,207002908,207079047,
	207155200,207231367,207307548,207383743,207459952,207536175,207612412,207688663,207764928,207841207,207917500,207993807,208070128,208146463,208222812,208299175,208375552,208451943,208528348,208604767,
	208681200,208757647,208834108,208910583,208987072,209063575,209140092,209216623,209293168,209369727,209446300,209522887,209599488,209676103,209752732,209829375,209906032,209982703,210059388,210136087,
	210212800,210289527,210366268,210443023,210519792,210596575,210673372,210750183,210827008,210903847,210980700,211057567,211134448,211211343,211288252,211365175,211442112,211519063,211596028,211673007,
	211750000,211827007,211904028,211981063,212058112,212135175,212212252,212289343,212366448,212443567,212520700,212597847,212675008,212752183,212829372,212906575,212983792,213061023,213138268,213215527,
	213292800,213370087,213447388,213524703,213602032,213679375,213756732,213834103,213911488,213988887,214066300,214143727,214221168,214298623,214376092,214453575,214531072,214608583,214686108,214763647,
	214841200,214918767,214996348,215073943,215151552,215229175,215306812,215384463,215462128,215539807,215617500,215695207,215772928,215850663,215928412,216006175,216083952,216161743,216239548,216317367,
	216395200,216473047,216550908,216628783,216706672,216784575,216862492,216940423,217018368,217096327,217174300,217252287,217330288,217408303,217486332,217564375,217642432,217720503,217798588,217876687,
	217954800,218032927,218111068,218189223,218267392,218345575,218423772,218501983,218580208,218658447,218736700,218814967,218893248,218971543,219049852,219128175,219206512,219284863,219363228,219441607,
	219520000,219598407,219676828,219755263,219833712,219912175,219990652,220069143,220147648,220226167,220304700,220383247,220461808,220540383,220618972,220697575,220776192,220854823,220933468,221012127,
	221090800,221169487,221248188,221326903,221405632,221484375,221563132,221641903,221720688,221799487,221878300,221957127,222035968,222114823,222193692,222272575,222351472,222430383,222509308,222588247,
	222667200,222746167,222825148,222904143,222983152,223062175,223141212,223220263,223299328,223378407,223457500,223536607,223615728,223694863,223774012,223853175,223932352,224011543,224090748,224169967,
	224249200,224328447,224407708,224486983,224566272,224645575,224724892,224804223,224883568,224962927,225042300,225121687,225201088,225280503,225359932,225439375,225518832,225598303,225677788,225757287,
	225836800,225916327,225995868,226075423,226154992,226234575,226314172,226393783,226473408,226553047,226632700,226712367,226792048,226871743,226951452,227031175,227110912,227190663,227270428,227350207,
	227430000,227509807,227589628,227669463,227749312,227829175,227909052,227988943,228068848,228148767,228228700,228308647,228388608,228468583,228548572,228628575,228708592,228788623,228868668,228948727,
	229028800,229108887,229188988,229269103,229349232,229429375,229509532,229589703,229669888,229750087,229830300,229910527,229990768,230071023,230151292,230231575,230311872,230392183,230472508,230552847,
	230633200,230713567,230793948,230874343,230954752,231035175,231115612,231196063,231276528,231357007,231437500,231518007,231598528,231679063,231759612,231840175,231920752,232001343,232081948,232162567,
	232243200,232323847,232404508,232485183,232565872,232646575,232727292,232808023,232888768,232969527,233050300,233131087,233211888,233292703,233373532,233454375,233535232,233616103,233696988,233777887,
	233858800,233939727,234020668,234101623,234182592,234263575,234344572,234425583,234506608,234587647,234668700,234749767,234830848,234911943,234993052,235074175,235155312,235236463,235317628,235398807,
	235480000,235561207,235642428,235723663,235804912,235886175,235967452,236048743,236130048,236211367,236292700,236374047,236455408,236536783,236618172,236699575,236780992,236862423,236943868,237025327,
	237106800,237188287,237269788,237351303,237432832,237514375,237595932,237677503,237759088,237840687,237922300,238003927,238085568,238167223,238248892,238330575,238412272,238493983,238575708,238657447,
	238739200,238820967,238902748,238984543,239066352,239148175,239230012,239311863,239393728,239475607,239557500,239639407,239721328,239803263,239885212,239967175,240049152,240131143,240213148,240295167,
	240377200,240459247,240541308,240623383,240705472,240787575,240869692,240951823,241033968,241116127,241198300,241280487,241362688,241444903,241527132,241609375,241691632,241773903,241856188,241938487,
	242020800,242103127,242185468,242267823,242350192,242432575,242514972,242597383,242679808,242762247,242844700,242927167,243009648,243092143,243174652,243257175,243339712,243422263,243504828,243587407,
	243670000,243752607,243835228,243917863,244000512,244083175,244165852,244248543,244331248,244413967,244496700,244579447,244662208,244744983,244827772,244910575,244993392,245076223,245159068,245241927,
	245324800,245407687,245490588,245573503,245656432,245739375,245822332,245905303,245988288,246071287,246154300,246237327,246320368,246403423,246486492,246569575,246652672,246735783,246818908,246902047,
	246985200,247068367,247151548,247234743,247317952,247401175,247484412,247567663,247650928,247734207,247817500,247900807,247984128,248067463,248150812,248234175,248317552,248400943,248484348,248567767,
	248651200,248734647,248818108,248901583,248985072,249068575,249152092,249235623,249319168,249402727,249486300,249569887,249653488,249737103,249820732,249904375,249988032,250071703,250155388,250239087,
	250322800,250406527,250490268,250574023,250657792,250741575,250825372,250909183,250993008,251076847,251160700,251244567,251328448,251412343,251496252,251580175,251664112,251748063,251832028,251916007,
	1073741824
};
new inteligencija_igraca[33];
new energija_igraca[33];
new snaga_igraca[33];
new kondicija_igraca[33];

new rakete_igraca[33];
new poeni_igraca[33];

new maximalna_energija_igraca[33];
new Float:smanjene_povrede_igraca[33];
new Float:brzina_igraca[33]

new snaga_predmeta[33];

enum { NONE = 0, 
         Snajperista, // 1
	Marinac, //2
	Strelac, //3
	Policajac, //4
	Pljackas, //5
	VatrenaPodrska, //6
	Miner, //7
	Bombarder, //8
	PvtAllen, //9
	Gangster, //10
	Mitraljzac, //11
	Mornar, //12
	Brigadir, //13
	Crysis, //14
	Demolitions, //15
	PotPukovnik, //16
	Spijun, //17
	Assassin, //18
	Major, //19
	Soap, //21
	Price, //22
	Terrorista, //23
	SWAT, //24
	FBI, //25
	Pukovnik, //26
	Ghost, //27
	Ninja, //28
	Komandos, //29
	General, //30
	Shepherd //31

};
new const energija_klasa[] = 
{  	// Energija Klase
0, // Nema
	  100, // Snajperista
	  100, // Marinac
	  100, // Strelac
	  100, // Policajac
	  100, // Pljackas
	  100, // Vatrena Podrska
	  100, // Miner
	  100, // Bombarder
	  100, // Pvt Allen
	  100, // Gangster
	  100, // Mitraljezac
	  100, // Mornar
	  100, // Brigadir
	  100, // Crysis
	  100, // Demolitions
	  100, // PotPukovnik
	  50, // Spijun
	  125, // Assassin
	  125, // Major
	  125, // Soap
	  125, // Price
	  125, // Terrorista
	  125, // SWAT
	  125, // FBI
	  125, // Pukovnik
	  150, // Ghost
	  150, // Ninja
	  150, // Komandos
	  150, // General
	  150 // Shepherd
};
new const Float:brzina_klase[] = 
{	//Brzina Klase
	0.0, // Nema
	1.2, // Snajperista
	1.3, // Marinac
	1.2, // Strelac
	1.2, // Policajac
	1.2, // Pljackas
	1.2, // Vatrena Podrska
	1.2, // Miner
	1.2, // Bombarder
	1.2, // Pvt Allen
	1.2, // Gangster
	1.2, // Mitraljezac
	1.2, // Mornar
	1.2, // Brigadir
	1.2, // Crysis
	1.2, // Demolitions
	1.2, // PotPukovnik
	1.3, // Spijun
	1.4, // Assassin
	1.3, // Major
	1.3, // Soap
	1.3, // Price
	1.3, // Terrorista
	1.3, // SWAT
	1.3, // FBI
	1.3, // Pukovnik
	1.3, // Ghost
	1.5, // Ninja
	1.3, // Komandos
	1.3, // General
	1.3 // Shepherd
};
new const oklop_klase[] = 
{    	// Pancir Klasa
	0, // Nema
	100, // Snajperista
	100, // Marinac
	100, // Strelac
	100, // Policajac
	100, // Pljackas
	100, // Vatrena Podrska
	100, // Miner
	100, // Bombarder
	100, // Pvt Allen
	100, // Gangster
	100, // Mitraljezac
	100, // Mornar
	100, // Brigadir
	100, // Crysis
	100, // Demolitions
	100, // PotPukovnik
	100, // Spijun
	125, // Assassin
	125, // Major
	125, // Soap
	125, // Price
	125, // Terrorista
	125, // SWAT
	125, // FBI
	125, // Pukovnik
	150, // Ghost
	150, // Ninja
	150, // Komandos
	150, // General
	150 // Shepherd
};		
new const naziv_klase[][] = 
{
         "Nema",					
	"Snajperista",				
	"Marinac",				
	"Strelac",
	"Policajac",
	"Pljackas",
	"Vatrena Podrska",
	"Miner",
	"Bombarder",
	"Pvt. Allen",
	"Gangster",
	"Mitraljezac",
	"Mornar",
	"Brigadir",
	"Crysis",
	"Demolitions",
	"PotPukovnik",
	"Spijun",
	"Assassin (1 Boost)",
	"Major (1 Boost)",
	"Soap (1 Boost)",
	"Price (1 Boost)",
	"Terrorista (1 Boost)",
	"SWAT (1 Boost)",
	"FBI (1 Boost)",
	"Pukovnik (1 Boost)",
	"Ghost (3 Boost)",
	"Ninja (3 Boost)",
	"Komandos (2 Boost)",
	"General (2 Boost)",
	"Shepherd (3 Boost)"
};
new const frakcje[][] = 
{
	"Nema",						
	"\y[\rObicne\y] \rKlase",
	"\y[\rPremium\y] \rKlase \y(\rFree od \d22\wh-\d09\wh\r)",
	"\y[\rSuper\y] \rKlase"
	
};
enum 
{
	NONE = 0,				
	obicna,
	premium,
	super
};
new const pripada[] = 
{
         NONE, // Nema
	obicna, // Snajperista
	obicna, // Marinac
	obicna, // Strelac
	obicna, // Policajac
	obicna, // Pljackas
	obicna, // Vatrena Podrska
	obicna, // Miner
	obicna, // Bombarder
	obicna, // Pvt Allen
	obicna, // Gangster
	obicna, // Mitraljezac
	obicna, // Mornar
	obicna, // Brigadir
	obicna, // Crysis
	obicna, // Demolitions
	obicna, // PotPukovnik
	obicna, // Spijun
	premium, // Assassin
	premium, // Major
	premium, // Soap
	premium, // Price
	premium, // Terrorista
	premium, // SWAT
	premium, // FBI
	premium, // Pukovnik
	super, // Ghost
	super, // Ninja
	super, // Komandos
	super, // General
	super, // Shepherd
};
new frakcija_igraca[33]

new const novi_opis[][] = 
{
	"\rHP: \y0 ^n\rArmor: \y0 ^n\rOruzije: \yNema ^n\rSpecijalna Moc: \yNema", // Nema
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yAWP, Scout, Deagle ^n\rSpecijalna Moc: \yNema", // Snajperista
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yDeagle ^n\rSpecijalna Moc: \yInstant Kill sa Nozem", // Marinac
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yM4A1, AK47 ^n\rSpecijalna Moc: \yNo Recoil", // Strelac
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yM4A1, Deagle ^n\rSpecijalna Moc: \yNema", // Policajac
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yAK47, Deagle ^n\rSpecijalna Moc: \yNema", // Pljackas
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yMP5, Deagle ^n\rSpecijalna Moc: \y2 Rakete", // Vatrena Podrska
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yUMP45, Deagle ^n\rSpecijalna Moc: \y5 Mina", // Miner
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yAUG, Bombe, Deagle ^n\rSpecijalna Moc: \yNema", // Bombarder
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yM4A1, Deagle ^n\rSpecijalna Moc: \y1 Dinamit", // Pvt. Allen
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yElite Berrettas ^n\rSpecijalna Moc: \yNema", // Gangster
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yM249, Deagle ^n\rSpecijalna Moc: \yNema", // Mitraljezac
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yMac10, Deagle ^n\rSpecijalna Moc: \yNema", // Mornar
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yM4A1, UMP45, Deagle ^n\rSpecijalna Moc: \y1 Dinamit", // Brigadir
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yAUG, Elite Berrettas ^n\rSpecijalna Moc: \y1 Dinamit", // Crysis
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yUMP45, Elite Berrettas ^n\rSpecijalna Moc: \y1 Dinamit", // Demolitions
	"\rHP: \y100 ^n\rArmor: \y100 ^n\rOruzije: \yFamas, Elite Berrettas ^n\rSpecijalna Moc: \y1 Raketa", // PotPukovnik
	"\rHP: \y20 ^n\rArmor: \y20 ^n\rOruzije: \yAK47, Deagle ^n\rSpecijalna Moc: \yNevidljivost sa Nozem", // Spijun
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yDeagle ^n\rSpecijalna Moc: \yNevidljivost sa Nozem, Instant Kill sa Nozem", // Assassin
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yP90, Famas, Deagle ^n\rSpecijalna Moc: \y6 Mina", // Major
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yM4A1, Famas, Deagle ^n\rSpecijalna Moc: \y2 Dinamita", // Soap
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yAK47, Famas, Deagle ^n\rSpecijalna Moc: \y2 Dinamita", // Price
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yGalil, AK47, Elite Berrettas ^n\rSpecijalna Moc: \y1 Dinamit", // Terrorista
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yP90, M4A1, Famas, Deagle ^n\rSpecijalna Moc: \y1 Dinamit", // SWAT
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yM4A1, Mac10, P90, Deagle ^n\rSpecijalna Moc: \y2 Rakete", // FBI
	"\rHP: \y125 ^n\rArmor: \y125 ^n\rOruzije: \yAUG, M4A1, MP5, P90, Deagle ^n\rSpecijalna Moc: \y2 Dinamita", // Pukovnik
	"\rHP: \y150 ^n\rArmor: \y150 ^n\rOruzije: \yM4A1, USP ^n\rSpecijalna Moc: \yNevidljivi ste sa Nozem", // Ghost
	"\rHP: \y150 ^n\rArmor: \y150 ^n\rOruzije: \yKatana, USP ^n\rSpecijalna Moc: \yNevidljiv sa Nozem", // Ninja
	"\rHP: \y150 ^n\rArmor: \y150 ^n\rOruzije: \yM4A1, AK47, P90, Deagle ^n\rSpecijalna Moc: \y3 Rakete", // Komandos
	"\rHP: \y150 ^n\rArmor: \y150 ^n\rOruzije: \yAWP, Scout, M4A1, AK47, Deagle ^n\rSpecijalna Moc: \y2 Dinamita", // General
	"\rHP: \y150 ^n\rArmor: \y150 ^n\rOruzije: \yM4A1, AK47, AWP, Scout, Famas, P90, Deagle ^n\rSpecijalna Moc: \y1 Dinamit" // Shepherd
};
new const sufix_za_klasu[][] = 
{
	           "Nema",				
	 "\y[\dObicna\y]", // 1
	 "\y[\dObicna\y]", // 2
	 "\y[\dObicna\y]", // 3
	 "\y[\dObicna\y]", // 4
	 "\y[\dObicna\y]", // 5
	 "\y[\dObicna\y]", // 6
	 "\y[\dObicna\y]", // 7
	 "\y[\dObicna\y]", // 8
	 "\y[\dObicna\y]", // 9
	 "\y[\dObicna\y]", // 10
	 "\y[\dObicna\y]", // 11
	 "\y[\dObicna\y]", // 12
	 "\y[\dObicna\y]", // 13
	 "\y[\dObicna\y]", // 14
	 "\y[\dObicna\y]", // 15
	 "\y[\dObicna\y]", // 16
	 "\y[\dObicna\y]", // 17
	 "\y[\dPremium\y]", // 18
	 "\y[\dPremium\y]", // 19
	 "\y[\dPremium\y]", // 21
	 "\y[\dPremium\y]", // 22
	 "\y[\dPremium\y]", // 23
	 "\y[\dPremium\y]", // 24
	 "\y[\dPremium\y]", // 25
	 "\y[\dPremium\y]", // 26
	 "\y[\dSuper\y]", // 27
	 "\y[\dSuper\y]", // 28
	 "\y[\dSuper\y]", // 29
	 "\y[\dSuper\y]", // 30
	 "\y[\dSuper\y]" // 31
};
new const naziv_klase_novi[][] = 
{
	"Nema",						
	"\ySnajperista\r[\dObicna\r]", //1
	"\yMarinac\r[\dObicna\r]", //2
	"\yStrelac\r[\dObicna\r]", //3
	"\yPolicajac\r[\dObicna\r]", //4
	"\yPljackas\r[\dObicna\r]", //5
	"\yVatrena Podrska\r[\dObicna\r]", //6
	"\yMiner\r[\dObicna\r]", //7
	"\yBombarder\r[\dObicna\r]", //8
	"\yPvt Allen\r[\dObicna\r]", //9
	"\yGangster\r[\dObicna\r]", //10
	"\yMitraljezac\r[\dObicna\r]", //11
	"\yMornar\r[\dObicna\r]", //12
	"\yBrigadir\r[\dObicna\r]", //13
	"\yCrysis\r[\dObicna\r]", //14
	"\yDemolitions\r[\dObicna\r]", //15
	"\yPotPukovnik\r[\dObicna\r]", //16
	"\ySpijun\r[\dObicna\r]", //17
	"\yAssassin\r[\dPremium\r]", //18
	"\yMajor\r[\dPremium\r]", //19
	"\ySoap\r[\dPremium\r]", //21
	"\yPrice\r[\dPremium\r]", //22
	"\yTerrorista\r[\dPremium\r]", //23
	"\ySWAT\r[\dPremium\r]", //24
	"\yFBI\r[\dPremium\r]", //25
	"\yPukovnik\r[\dPremium\r]", //26
	"\yGhost\r[\dSuper\r]", //27
	"\yNinja\r[\dSuper\r]", //28
	"\yKomandos\r[\dSuper\r]", //29
	"\yGeneral\r[\dSuper\r]", //30
	"\yShepherd\r[\dSuper\r]" //31
}

new broj_medkit_igraca[33];
new broj_raketa_igraca[33];
new broj_min_igraca[33];
new broj_dinamita_igraca[33];
new broj_skokova_igraca[33];

new naziv_igraca[33][64]; 
new daj_igracu[33]; 
new pCvarPrefixy;
new fovmsg;

new Float:prethodna_raketa_igraca[33];
new Float:idle[33];

new bool:dobio_predmet[33];
new bool:droga[33];
new bool:freezetime = true;
new bool:ima_bazuku[33];
new bool:reloading[33];
new bool:lansirano[33][33];
	
public plugin_init() 
{ 
	format(Novo, 10, "1");
	
	g_vault = nvault_open("CodMod");
	
	register_think("MedKit","MedKitThink");
	
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	RegisterHam(Ham_Spawn, "player", "Pocetak", 1);
	RegisterHam(Ham_Touch, "armoury_entity", "DodirOruzija");
	RegisterHam(Ham_Touch, "weapon_shield", "DodirOruzija");
	RegisterHam(Ham_Touch, "weaponbox", "DodirOruzija");
	RegisterHam(Ham_Weapon_WeaponIdle, "weapon_p228", "Weapon_WeaponIdle");
	RegisterHam(Ham_Item_Deploy, "weapon_p228", "Weapon_Deploy", 1);
	
	register_forward(FM_CmdStart, "CmdStart");
	register_forward(FM_EmitSound, "EmitSound");
	register_forward(FM_SetModel, "SetModel");
	register_forward(FM_Touch, "fw_Touch")
	register_forward(FM_TraceLine,"fw_traceline");

	register_logevent("PocetakRunde", 2, "1=Round_Start"); 
	register_event("DeathMsg", "Death", "ade");
	register_event("Damage", "Damage", "b", "2!=0");       
 	register_event("CurWeapon","CurWeapon","be", "1=1");
	register_event("HLTV", "novaRunda", "a", "1=0", "2=0");  
	//register_event("ResetHUD", "ResetHUD", "abe");
	
	register_touch("Rocket", "*" , "DodirRakete");
	register_touch("Mine", "player",  "DodirMine");
	
	register_clcmd("say /klasa", "IzaberiKlasu");
	register_clcmd("say /menu", "Menu");
	register_clcmd("say /opis", "OpisKlase");
	register_clcmd("say /predmet", "OpisPredmeta");
	register_clcmd("say /item", "OpisPredmeta");
	register_clcmd("say /drop", "IzbaciPredmet");
	register_clcmd("say /izbaci", "IzbaciPredmet");
	register_clcmd("say /restart", "KomandaResetujPoene");
	register_clcmd("say /shop", "Shop");
	register_clcmd("say /prodaj", "Prodaj"); 
	register_clcmd("say /komande","Komande");
	register_clcmd("say /daj", "DajNekomPredmet");
   	register_clcmd("say /help", "Pomoc");
	register_clcmd("say /pomoc", "Pomoc");
	register_clcmd("say /def","KupiDefuse");
	register_clcmd("fullupdate", "BlokirajKomande");
	
	pCvarPrefixy    =       register_cvar("cod_prefix","3");
	cvar_xp_za_ubistvo = register_cvar("cod_killxp", "1000");
	register_concmd("cod_lvl", "cmd_setlvl", ADMIN_RCON, "<name> <level>");
	register_concmd("cod_dajpredmet", "cmd_setpredmet", ADMIN_RCON, "<nick> <item>");
	
	register_message(get_user_msgid("Health"), "message_Health");
	register_message(get_user_msgid("SayText"),"handleSayText");
	g_msg_screenfade = get_user_msgid("ScreenFade");
	SyncHudObj = CreateHudSyncObj();
	SyncHudObj2 = CreateHudSyncObj();
	SyncHudObj3 = CreateHudSyncObj();
	
	register_menucmd(register_menuid("Klasa:"), 1023, "OpisKlase");
	iskustvo_za_pare = 250;
	iskustvo_za_mnogopara = 500;
	fovmsg = get_user_msgid("SetFOV")
}
public handleSayText(msgId,msgDest,msgEnt){
	new id = get_msg_arg_int(1);
	
	if(!is_user_connected(id))        return PLUGIN_CONTINUE;
	
	new szTmp[256],szTmp2[256]
	get_msg_arg_string(2,szTmp, charsmax( szTmp ) )
	
	new szPrefix[64]
	
	switch(get_pcvar_num(pCvarPrefixy)){
		case 1:{
			formatex(szPrefix,charsmax( szPrefix ),"^x04[%s]",naziv_klase[klasa_igraca[id]]);
		}
		case 2:{
			formatex(szPrefix,charsmax( szPrefix ),"^x04[%d]",level_igraca[id]);
		}
		case 3:{
			formatex(szPrefix,charsmax( szPrefix ),"^x01[^4%s^1][^4Level^1-^4%d^1]",naziv_klase[klasa_igraca[id]],level_igraca[id]);
		}
	}
	
	if(!equal(szTmp,"#Cstrike_Chat_All")){
		add(szTmp2,charsmax(szTmp2),szPrefix);
		add(szTmp2,charsmax(szTmp2)," ");
		add(szTmp2,charsmax(szTmp2),szTmp);
	}
	else{
		add(szTmp2,charsmax(szTmp2),szPrefix);
		add(szTmp2,charsmax(szTmp2),"^x03 %s1^x01 :  %s2");
	}
	
	set_msg_arg_string(2,szTmp2);
	
	return PLUGIN_CONTINUE;
}	
public plugin_cfg() 
{	
	server_cmd("sv_maxspeed 1800");
}
public plugin_precache()
{
	new Entity = create_entity( "info_map_parameters" );
	
	DispatchKeyValue( Entity, "buying", "3" );
	DispatchSpawn( Entity );
	
	
	sprite_white = precache_model("sprites/white.spr") ;
	sprite_blast = precache_model("sprites/dexplo.spr");
	sprite_trail = precache_model("sprites/smoke.spr");
	sprite_smoke = precache_model("sprites/steam1.spr");
	
	
	precache_sound("QTM_CodMod/select.wav");
	precache_sound("QTM_CodMod/start.wav");
	precache_sound("QTM_CodMod/start2.wav");
	precache_sound("QTM_CodMod/levelup.wav");
	
	precache_model("models/w_medkit.mdl");
	precache_model("models/rpgrocket.mdl");
	precache_model("models/mine.mdl");
	precache_model("models/w_law.mdl");
	precache_model("models/v_law.mdl");
	precache_model("models/p_law.mdl");
	precache_model("models/s_grenade.mdl");
}
public pfn_keyvalue( Entity )  
{ 
	new ClassName[ 20 ], Dummy[ 2 ];
	copy_keyvalue( ClassName, charsmax( ClassName ), Dummy, charsmax( Dummy ), Dummy, charsmax( Dummy ) );
	
	if( equal( ClassName, "info_map_parameters" ) ) 
	{ 
		remove_entity( Entity );
		return PLUGIN_HANDLED ;
	}
	return PLUGIN_CONTINUE;
}
public CmdStart(id, uc_handle)
{
	if(!is_user_alive(id))
		return FMRES_IGNORED;
	
	new button = get_uc(uc_handle, UC_Buttons);
	new flags = pev(id, pev_flags);
	new clip, ammo, weapon = get_user_weapon(id, clip, ammo);
	
	if(informacije_predmet_igraca[id][0] == 11 || klasa_igraca[id] == Assassin || informacije_predmet_igraca[id][0] == 47)
	{
		new oldbutton = pev(id, pev_oldbuttons);
		
		if((button & IN_JUMP) && !(flags & FL_ONGROUND) && !(oldbutton & IN_JUMP) && broj_skokova_igraca[id] > 0)
		{
			broj_skokova_igraca[id]--;
			new Float:velocity[3];
			pev(id, pev_velocity,velocity);
			velocity[2] = random_float(265.0,285.0);
			set_pev(id, pev_velocity,velocity);
		}
		else if(flags & FL_ONGROUND)
		{	
			broj_skokova_igraca[id] = 0;
			if(informacije_predmet_igraca[id][0] == 11)
				broj_skokova_igraca[id]++;
			if(klasa_igraca[id] == Assassin)
				broj_skokova_igraca[id]++;
			if(informacije_predmet_igraca[id][0] == 47)
				broj_skokova_igraca[id]+=2;
		}
	}
	if(button & IN_ATTACK)
	{
		new Float:punchangle[3];
		
		if(informacije_predmet_igraca[id][0] == 20)
			set_pev(id, pev_punchangle, punchangle);
		if(informacije_predmet_igraca[id][0] == 23)
		{
			set_pev(id, pev_punchangle, punchangle);
			for(new i=0; i<3;i++) 
				punchangle[i]*=0.9;
			set_pev(id, pev_punchangle, punchangle);
		}
	}
	if(informacije_predmet_igraca[id][0] == 28 && button & IN_JUMP && button & IN_DUCK && flags & FL_ONGROUND && get_gametime() > informacije_predmet_igraca[id][1]+4.0)
	{
		informacije_predmet_igraca[id][1] = floatround(get_gametime());
		new Float:velocity[3];
		VelocityByAim(id, 700, velocity);
		velocity[2] = random_float(265.0,285.0);
		set_pev(id, pev_velocity, velocity);
	}
	if(weapon == 1 && ima_bazuku[id])
	{ 
		new button = get_uc(uc_handle, UC_Buttons);
		new ent = find_ent_by_owner(-1, "weapon_p228", id);
		
		if(button & IN_ATTACK)
		{
			button &= ~IN_ATTACK;
			set_uc(uc_handle, UC_Buttons, button);
			
			if(!rakete_igraca[id] || reloading[id] || !idle[id]) 
				return FMRES_IGNORED;
			if(idle[id] && (get_gametime()-idle[id]<=0.4)) 
				return FMRES_IGNORED;
			
			new Float:Origin[3], Float:Angle[3], Float:Velocity[3];
			pev(id, pev_origin, Origin);
			pev(id, pev_v_angle, Angle);
			velocity_by_aim(id, 1000, Velocity);
			
			Angle[0] *= -1.0
			
			new ent = create_entity("info_target")
			set_pev(ent, pev_classname, "rocket");
			engfunc(EngFunc_SetModel, ent, "models/s_grenade.mdl");
			
			set_pev(ent, pev_solid, SOLID_BBOX);
			set_pev(ent, pev_movetype, MOVETYPE_TOSS);
			set_pev(ent, pev_owner, id);
			set_pev(ent, pev_mins, Float:{-1.0, -1.0, -1.0});
			set_pev(ent, pev_maxs, Float:{1.0, 1.0, 1.0});
			set_pev(ent, pev_gravity, 0.35);
			
			set_pev(ent, pev_origin, Origin);
			set_pev(ent, pev_velocity, Velocity);
			set_pev(ent, pev_angles, Angle);
			
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
			write_byte(TE_BEAMFOLLOW)
			write_short(ent)
			write_short(sprite_trail)
			write_byte(6)
			write_byte(3)
			write_byte(224)	
			write_byte(224)	
			write_byte(255)
			write_byte(100)
			message_end()	
			
			set_pev(id, pev_weaponanim, 7);
			new entwpn = find_ent_by_owner(-1, "weapon_p228", id);
			if(entwpn)
				set_pdata_float(entwpn, 48, 1.5+3.0, 4);
			set_pdata_float(id, 83, 1.5, 4)
			
			reloading[id] = true;
			emit_sound(id, CHAN_WEAPON, "weapons/law_shoot1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
			
			if(task_exists(id+3512)) 
				remove_task(id+3512);
			
			set_task(1.5, "task_launcher_reload", id+3512);
			rakete_igraca[id]--;
		}
		else if(button & IN_RELOAD)
		{
			button &= ~IN_RELOAD;
			set_uc(uc_handle, UC_Buttons, button);
			
			set_pev(id, pev_weaponanim, 0);
			set_pdata_float(id, 83, 0.5, 4);
			if(ent)
				set_pdata_float(ent, 48, 0.5+3.0, 4);
		}
		if(ent)
		{
			cs_set_weapon_ammo(ent, -1);
			cs_set_user_bpammo(id, 1, rakete_igraca[id]);
		}
	}
	else if(weapon != 1 && ima_bazuku[id])
		idle[id] = 0.0;
	
	return FMRES_IGNORED;
}
public cmd_setlvl(id, level, cid) 
{ 
	if(!cmd_access(id,level,cid,3)) 
		return PLUGIN_HANDLED; 
	
	new level_ratio = 25
	
	new arg1[33]; 
	new arg2[6]; 
	read_argv(1, arg1, 32); 
	read_argv(2, arg2, 5); 
	new player = cmd_target(id, arg1, 0); 
	if(!is_user_connected(player))
		return PLUGIN_HANDLED;
	new value = str_to_num(arg2); 
	
	iskustvo_igraca[player] =  value*(2*level_ratio);
	level_igraca[player] = 0; 
	ProveriNivo(player); 
	
	return PLUGIN_CONTINUE; 
}  
public Shop(id)
{
	new menu = menu_create("\yShop Menu \d:", "Shop_Handle");
	menu_additem(menu, "\yVelika Apoteka \r[Daje 100 HP] \yCijena: \r5000$");
	menu_additem(menu, "\yRed Bull \r[Veci Skok + Veca Brzina] \yCijena: \r7500$");
	menu_additem(menu, "\yLoto \r[Tiket za loto] \yCijena: \r2000$");
	menu_additem(menu, "\yMali Exp \r[Daje 250 XP] \yCijena: \r5000$");
	menu_additem(menu, "\yVeliki Exp \r[Daje 500 XP] \yCijena: \r10000$");
	menu_additem(menu, "\ySlucajni Predmet \yCijena: \r3000$");
	menu_display(id, menu);
}
public Shop_Handle(id, menu, item) 
{
	client_cmd(id, "spk QTM_CodMod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	menu_display(id, menu);
	new pare_igraca = cs_get_user_money(id);
	new hp = get_user_health(id);
	switch(item) 
	{ 
		case 0:
		{
			new cena = 5000;
			if (pare_igraca<cena)
			{
				ColorChat(id,GREEN,"[Shop] ^1Nemas dovoljno para.");
				return PLUGIN_CONTINUE;
			}
			if(hp >= maximalna_energija_igraca[id] || klasa_igraca[id] == Assassin)
			{
				ColorChat(id,GREEN,"[Shop] ^1Vec imate maximalnu energiju.");
				return PLUGIN_CONTINUE;
			}
			new ammount=100;
			new nova_energija = (hp+ammount<maximalna_energija_igraca[id])? hp+ammount: maximalna_energija_igraca[id];
			set_user_health(id, nova_energija);
			ColorChat(id,GREEN,"[Shop] ^1Kupio si^3 Veliku Apoteku");
			cs_set_user_money(id, pare_igraca-cena);
		}
		case 1:
		{
			new cena = 7500;
			if (pare_igraca<cena)
			{
				ColorChat(id,GREEN,"[Shop] ^1Nemas dovoljno para.");
				return PLUGIN_CONTINUE;
			}
			set_user_gravity(id,get_user_gravity(id) - 0.3);
			set_user_maxspeed(id,get_user_maxspeed(id) + 10.0);
			ColorChat(id,GREEN,"[Shop]^1 Kupio si^3 RedBull.");
			ColorChat(id,GREEN,"[RedBull]^1Sada ste dobili krila mozete da letite kao^3ptica.");
			cs_set_user_money(id, pare_igraca-cena)
		}
		case 2:
		{
			new cena = 2000;
			if (pare_igraca<cena)
			{
				ColorChat(id,GREEN,"[Shop] ^1Nemas dovoljno para.");
				return PLUGIN_CONTINUE;
			}
			cs_set_user_money(id, pare_igraca-cena);
			ColorChat(id,GREEN,"[Shop] ^1Kupili ste Loto Listic");
			ColorChat(id,GREEN,"[Shop] ^1Sacekajte par^3 sekundi^1 i vidite svoju^3 nagradu");
			
			new rand = random_num(0,13);
			switch(rand)
			{
				case 0:
				{
					ColorChat(id,GREEN,"[Shop] ^1Dobio si^3 100 $^1!")
					cs_set_user_money(id, pare_igraca + 100)
				}
				case 1:
				{
					ColorChat(id,GREEN,"[Shop] ^1Dobio si^3 Redbull^1!");
					ColorChat(id,GREEN,"[RedBull]^1Sada ste dobili krila mozete da letite kao^3ptica^1.");
					set_user_gravity(id,get_user_gravity(id) - 0.3);
					set_user_maxspeed(id,get_user_maxspeed(id) + 10.0);
				}
				case 2:
				{
					ColorChat(id,GREEN,"[Shop] ^1Nazalost niste nista^3 dobili^1!")
				}
				case 3:
				{
					ColorChat(id,GREEN,"[Shop] ^1Izgubili ste^3 150$^1!")
					cs_set_user_money(id, pare_igraca - 150)
				}
				case 4:
				{
					ColorChat(id,GREEN,"[Shop] ^1Dobili ste^3 1000$^1!")
					cs_set_user_money(id, pare_igraca + 1000)
				}
				case 5:
				{
					ColorChat(id,GREEN,"[Shop] ^1Dobili ste^3 Predmet^1!")
					DajPredmet(id, random_num(1, sizeof naziv_predmeta-1));
				}
				case 6:
				{
					ColorChat(id,GREEN,"[Shop] ^1Nazalost niste nista^3 dobili^1!")
				}
				case 7:
				{
					ColorChat(id,GREEN,"[Shop] ^1Izgubili ste^3 8000$^1!")
					cs_set_user_money(id, pare_igraca - 8000)
				}
				case 8:
				{
					ColorChat(id,GREEN,"[Shop] ^1Nazalost niste nista^3 dobili^1!")
				}
				case 9:
				{
					ColorChat(id,GREEN,"[Shop]^1 Dobili ste^3 1000 EXP ^1!")
					iskustvo_igraca[id] += iskustvo_za_mnogopara;
				}
				case 10:
				{
					ColorChat(id,GREEN,"[Shop]^1 Dobili ste^3 500 EXP^1!")
					iskustvo_igraca[id] += 500;
				}
				case 11:
				{
					ColorChat(id,GREEN,"[Shop] ^1 Cestitamo dobili ste^3 Premium Klasu:^3 Pjandura^1 mozete je koristit do kraja mape^1!")
					set_user_flags(id, ADMIN_LEVEL_F)
				}
				case 12:
				{
					ColorChat(id,GREEN,"[Shop]^1 Dobili ste^3 100 EXP^1 !")
					iskustvo_igraca[id] += 100;
				}
				case 13:
				{
					ColorChat(id,GREEN,"[Shop]^1 Izgubili ste^3 100 HP")
					new ammount=-100;
					new nova_energija = (hp+ammount<maximalna_energija_igraca[id])? hp+ammount: maximalna_energija_igraca[id];
					set_user_health(id, nova_energija);
				}
			}
			ProveriNivo(id);
			return PLUGIN_CONTINUE;
		}
		case 3:
		{
			new cena = 5000;
			if (pare_igraca<cena)
			{
				ColorChat(id,GREEN,"[Shop]^1 Nemas dovoljno para.");
				return PLUGIN_CONTINUE;
			}
			iskustvo_igraca[id] += iskustvo_za_pare;
			ColorChat(id,GREEN,"[Shop] ^1Kupio si ^3Mali EXP");
			cs_set_user_money(id, pare_igraca-cena)
			ProveriNivo(id);
		}
		case 4:
		{
			new cena = 10000;
			if (pare_igraca<cena)
			{
				ColorChat(id,GREEN,"[Shop]^1 Nemas dovoljno para.");
				return PLUGIN_CONTINUE;
			}
			iskustvo_igraca[id] += iskustvo_za_mnogopara;
			ColorChat(id,GREEN,"[Shop]^1Kupio si ^3Veliki EXP");
			cs_set_user_money(id, pare_igraca-cena)
			ProveriNivo(id);
		}		
		case 5:
		{
			new cena = 3000;						
			if (pare_igraca<cena)
			{
				ColorChat(id,RED,"[Shop]^1 Nemas dovoljno para!");
				return PLUGIN_CONTINUE;
			}
			cs_set_user_money(id, pare_igraca-cena)
			DajPredmet(id, random_num(1, sizeof naziv_predmeta-1));
		}
	}
	return PLUGIN_CONTINUE;
}
public Pocetak(id)
{
	if(!is_user_alive(id) || !is_user_connected(id))
		return PLUGIN_CONTINUE;
	
	if(nova_klasa_igraca[id])
	{
		klasa_igraca[id] = nova_klasa_igraca[id];
		nova_klasa_igraca[id] = 0;
		ima_bazuku[id] = false;
		rakete_igraca[id] = 0;
		strip_user_weapons(id);
		give_item(id, "weapon_knife");

		UcitajPodatke(id, klasa_igraca[id]);
	}
	if(!klasa_igraca[id])
	{
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	switch(klasa_igraca[id])
	{
		case Snajperista:
		{
			give_item(id, "weapon_awp");
			give_item(id, "weapon_scout");
			give_item(id, "weapon_deagle");
		}
		case Marinac:
		{
			give_item(id, "weapon_deagle");
		}
		case Strelac:
		{
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_deagle");
		}
		case Policajac:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_deagle");
		}
		case Pljackas:
		{
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_deagle");
		}
		case VatrenaPodrska:
		{
			give_item(id, "weapon_mp5navy");
			give_item(id, "weapon_deagle");
			broj_raketa_igraca[id] = 2;
		}
		case Miner:
		{
			give_item(id, "weapon_ump45");
			give_item(id, "weapon_deagle");
			broj_min_igraca[id] = 5;
		}
		case Bombarder:
		{
			give_item(id, "weapon_aug");
			give_item(id, "weapon_deagle");
			give_item(id, "weapon_hegrenade");
			give_item(id, "weapon_smokegrenade");
			give_item(id, "weapon_flashbang");
		}
		case PvtAllen:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 1;
		}
		case Gangster:
		{
			give_item(id, "weapon_elite");
		}
		case Mitraljzac:
		{
			give_item(id, "weapon_m249");
			give_item(id, "weapon_deagle");
		}
		case Mornar:
		{
			give_item(id, "weapon_mac10");
			give_item(id, "weapon_deagle");
		}
		case Brigadir:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_ump45");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 1;
		}
		case Crysis:
		{
			give_item(id, "weapon_aug");
			give_item(id, "weapon_elite");
			broj_dinamita_igraca[id] = 1;
		}
		case Demolitions:
		{
			give_item(id, "weapon_ump45");
			give_item(id, "weapon_elite");
			broj_dinamita_igraca[id] = 2;
		}
		case PotPukovnik:
		{
			give_item(id, "weapon_famas");
			give_item(id, "weapon_elite");
			broj_raketa_igraca[id] = 1;
		}
		case Spijun:
		{
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_deagle");
		}
		case Assassin:
		{
			give_item(id, "weapon_deagle");
		}
		case Major:
		{
			give_item(id, "weapon_p90");
			give_item(id, "weapon_deagle");
			broj_min_igraca[id] = 6;
		}
		case Soap:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_famas");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 2;
		}
		case Price:
		{
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_famas");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 2;
		}
		case Terrorista:
		{
			give_item(id, "weapon_galil");
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_elite");
			broj_dinamita_igraca[id] = 1;
		}
		case SWAT:
		{
			give_item(id, "weapon_p90");
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_famas");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 1;
		}
		case FBI:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_mac10");
			give_item(id, "weapon_p90");
			give_item(id, "weapon_deagle");
			broj_raketa_igraca[id] = 2;
		}
		case Pukovnik:
		{
			give_item(id, "weapon_aug");
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_mp5navy");
			give_item(id, "weapon_p90");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 2;
		}
		case Ghost:
		{
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_usp");
		}
		case Ninja:
		{
			give_item(id, "weapon_usp");
			give_item(id, "weapon_ak47");
		}
		case Komandos:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_p90");
			give_item(id, "weapon_deagle");
			broj_raketa_igraca[id] = 3;
		}
		case General:
		{
			give_item(id, "weapon_awp");
			give_item(id, "weapon_scout");
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 2;
		}
		case Shepherd:
		{
			give_item(id, "weapon_m4a1");
			give_item(id, "weapon_ak47");
			give_item(id, "weapon_awp");
			give_item(id, "weapon_scout");
			give_item(id, "weapon_famas");
			give_item(id, "weapon_p90");
			give_item(id, "weapon_deagle");
			broj_dinamita_igraca[id] = 1;
		}
	}
	if(poeni_igraca[id]>0)
		DodelaPoena(id);
	
	if(informacije_predmet_igraca[id][0] == 10 || informacije_predmet_igraca[id][0] == 9)
		give_item(id, "weapon_hegrenade");
	
	if(informacije_predmet_igraca[id][0] == 9)
		PromeniModel(id, 0);
	
	if(informacije_predmet_igraca[id][0] == 1)
		set_user_footsteps(id, 1);
	else
		set_user_footsteps(id, 0);
	
	if(informacije_predmet_igraca[id][0] == 13)
		give_item(id, "weapon_awp");
	
	if(informacije_predmet_igraca[id][0] == 31)
		give_item(id, "weapon_mp5navy");	
	
	if(informacije_predmet_igraca[id][0] == 31)
		give_item(id, "weapon_usp");	
	
	if(informacije_predmet_igraca[id][0] == 32)
		give_item(id, "weapon_m4a1");	
	
	if(informacije_predmet_igraca[id][0] == 33)
		give_item(id, "weapon_deagle");	
	
	if(informacije_predmet_igraca[id][0] == 34)
		give_item(id, "weapon_scout");		
	
	if(informacije_predmet_igraca[id][0] == 35)
		give_item(id, "weapon_awp");
	
	if(informacije_predmet_igraca[id][0] == 35)
		give_item(id, "weapon_ak47");	
	
	if(informacije_predmet_igraca[id][0] == 36)
		give_item(id, "weapon_m3");	
	
	if(informacije_predmet_igraca[id][0] == 37)
		give_item(id, "weapon_hegrenade");	
	
	if(informacije_predmet_igraca[id][0] == 38)
		give_item(id, "weapon_galil");	
	
	if(informacije_predmet_igraca[id][0] == 39)
		give_item(id, "weapon_awp");
	
	if(informacije_predmet_igraca[id][0] == 39)
		give_item(id, "weapon_deagle");	
		
	if(informacije_predmet_igraca[id][0] == 42)
		give_item(id, "weapon_m4a1");
		
	if(informacije_predmet_igraca[id][0] == 43)
		give_item(id, "weapon_ak47");
		
	if(informacije_predmet_igraca[id][0] == 40)
		set_user_gravity(id,get_user_gravity(id) - 0.4);
	
	if(informacije_predmet_igraca[id][0] == 16)
		give_item(id, "weapon_deagle");
	
	if(informacije_predmet_igraca[id][0] == 19)
		informacije_predmet_igraca[id][1] = 1;
	
	if(informacije_predmet_igraca[id][0] == 27)
		informacije_predmet_igraca[id][1] = 3;
	
	if(informacije_predmet_igraca[id][0] == 29)
		set_user_gravity(id,get_user_gravity(id) - 0.5);
	
	new weapons[32];
	new weaponsnum;
	get_user_weapons(id, weapons, weaponsnum);
	for(new i=0; i<weaponsnum; i++)
		if(is_user_alive(id))
		if(maxAmmo[weapons[i]] > 0)
		cs_set_user_bpammo(id, weapons[i], maxAmmo[weapons[i]]);
	
	PostaviAtribute(id)
	
	return PLUGIN_CONTINUE;
}
public PostaviAtribute(id)
{
	smanjene_povrede_igraca[id] = (0.7*(1.0-floatpower(1.1, -0.112311341*float(snaga_igraca[id]))));
	maximalna_energija_igraca[id] = energija_klasa[klasa_igraca[id]]+energija_igraca[id]*2;
	brzina_igraca[id] = (250*brzina_klase[klasa_igraca[id]]+floatround(kondicija_igraca[id]*1.2));
	
	if(informacije_predmet_igraca[id][0] == 18 && klasa_igraca[id] != Assassin)
	{
		maximalna_energija_igraca[id] += 100;
		brzina_igraca[id] -= 0.4;
	}
	
	if(informacije_predmet_igraca[id][0] == 25 && klasa_igraca[id] != Assassin)
	{
		maximalna_energija_igraca[id] += 50;
		brzina_igraca[id] -= 0.3;
	}
	if(informacije_predmet_igraca[id][0] == 30)
	{
		brzina_igraca[id] += 1.2;
	}
	if(informacije_predmet_igraca[id][0] == 48)
	{
		cs_set_user_money(id, cs_get_user_money(id)+8000);
	}
	if(informacije_predmet_igraca[id][0] == 49)
	{
		Drogiraj(id);
	}
	set_user_armor(id, oklop_klase[klasa_igraca[id]]);
	
	if(informacije_predmet_igraca[id][0] == 17)
		set_user_armor(id, 500);
	
	set_user_health(id, maximalna_energija_igraca[id]);
	
}

public Drogiraj(id)
{
	droga[id] = true
	message_begin( MSG_ONE, fovmsg, { 0, 0, 0 }, id )
	write_byte( 180 )
	message_end( )               
}  
public PocetakRunde()	
{
	freezetime = false;
	for(new id=0;id<=32;id++)
	{
		if(!is_user_alive(id))
			continue;
		
		set_task(0.1, "PostaviBrzinu", id+ZADATAK_POSTAVI_BRZINU);
		
		switch(get_user_team(id))
		{
			case 1: 
			{
				client_cmd(id, "spk QTM_CodMod/start2");
				give_item(id, "weapon_glock18");
			}
			case 2: 
			{
				client_cmd(id, "spk QTM_CodMod/start");
				give_item(id, "weapon_usp");
			}
		}
	}
}
public novaRunda()
{
	freezetime = true;
	new iEnt = find_ent_by_class(-1, "Mine");
	while(iEnt > 0) 
	{
		remove_entity(iEnt);
		iEnt = find_ent_by_class(iEnt, "Mine");	
	}
}
public TakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(!is_user_alive(this) || !is_user_connected(this) || informacije_predmet_igraca[this][0] == 24 || !is_user_connected(idattacker) || get_user_team(this) == get_user_team(idattacker) || !klasa_igraca[idattacker])
		return HAM_IGNORED;
	
	new health = get_user_health(this);
	new weapon = get_user_weapon(idattacker);
	
	if(health < 2)
		return HAM_IGNORED;
	
	if(informacije_predmet_igraca[this][0] == 27 && informacije_predmet_igraca[this][1]>0)
	{
		informacije_predmet_igraca[this][1]--;
		return HAM_SUPERCEDE;
	}
	
	if(snaga_igraca[this]>0)
		damage -= smanjene_povrede_igraca[this]*damage;
	
	if(informacije_predmet_igraca[this][0] == 2 || informacije_predmet_igraca[this][0] == 3)
		damage-=(float(informacije_predmet_igraca[this][1])<damage)? float(informacije_predmet_igraca[this][1]): damage;
	
	if(informacije_predmet_igraca[idattacker][0] == 5 && !UTIL_In_FOV(this, idattacker) && UTIL_In_FOV(idattacker, this))
		damage*=2.0;
	
	if(informacije_predmet_igraca[idattacker][0] == 10)
		damage+=informacije_predmet_igraca[idattacker][1];
	
	if(informacije_predmet_igraca[this][0] == 12)
		damage-=(5.0<damage)? 5.0: damage;
	
	if(weapon == CSW_AWP && informacije_predmet_igraca[idattacker][0] == 13)
		damage=float(health);
	
	if(weapon == CSW_AWP && informacije_predmet_igraca[idattacker][0] == 35)
		damage=float(health);	
	
	if(informacije_predmet_igraca[idattacker][0] == 21)
		damage+=10;
	
	if(informacije_predmet_igraca[idattacker][0] == 22)
		damage+=20;
	
	if(idinflictor != idattacker && entity_get_int(idinflictor, EV_INT_movetype) != 5)
	{
		if((informacije_predmet_igraca[idattacker][0] == 9 && random_num(1, informacije_predmet_igraca[idattacker][1]) == 1) || informacije_predmet_igraca[idattacker][0] == 10)
			damage = float(health);	
	}
	if(weapon == CSW_HEGRENADE)
	{
		if(klasa_igraca[idattacker] == Bombarder)
		{
			give_item(idattacker, "weapon_hegrenade")
			cs_set_user_bpammo(idattacker, CSW_HEGRENADE, 5)
		}
	}
	if(weapon == CSW_KNIFE)
	{
		if(klasa_igraca[this] == SWAT)
			return HAM_SUPERCEDE;
		if(informacije_predmet_igraca[this][0] == 4)
			damage=damage*1.4+inteligencija_igraca[idattacker];
		if(informacije_predmet_igraca[idattacker][0] == 8 || (klasa_igraca[idattacker] == Snajperista && random_num(1,2) == 1) || klasa_igraca[idattacker] == Marinac || klasa_igraca[idattacker] == Assassin && !(get_user_button(idattacker) & IN_ATTACK))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 31)
	{
		if(weapon == CSW_USP && !random(2))
			damage = float(health);
		
		if(weapon == CSW_MP5NAVY && !random(5))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 32)
	{
		if(weapon == CSW_M4A1 && !random(4))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 33)
	{
		if(weapon == CSW_DEAGLE && !random(3))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 36)
	{
		if(weapon == CSW_M3 && !random(3))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 37)
	{
		if(weapon == CSW_HEGRENADE && !random(3))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 38)
	{
		if(weapon == CSW_GALIL && !random(5))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 31)
	{
		if(weapon == CSW_AWP)
			damage = float(health);
		
		if(weapon == CSW_DEAGLE && !random(2))
			damage = float(health);
	}
	if(informacije_predmet_igraca[idattacker][0] == 34)
	{
		if(weapon == CSW_SCOUT && !random(1))
			damage = float(health);
	}
	if(klasa_igraca[idattacker] == Major)
	{
		if(weapon == CSW_M3 && !random(4))
			damage = float(health);
	}
	if(informacije_predmet_igraca[this][0] == 26 && random_num(1, informacije_predmet_igraca[this][1]) == 1)
	{
		SetHamParamEntity(3, this);
		SetHamParamEntity(1, idattacker);
	}
	SetHamParamFloat(4, damage);
	return HAM_IGNORED;
}
public Damage(id)
{
	new attacker = get_user_attacker(id);
	new damage = read_data(2);
	if(!is_user_alive(attacker) || !is_user_connected(attacker) || id == attacker || !klasa_igraca[attacker])
		return PLUGIN_CONTINUE;
	
	if(informacije_predmet_igraca[attacker][0] == 12 && random_num(1, informacije_predmet_igraca[id][1]) == 1)
		Display_Fade(id,1<<14,1<<14 ,1<<16,255,155,50,230);
	
	if(get_user_team(id) != get_user_team(attacker))
	{
		while(damage>20)
		{
			damage-=20;
			iskustvo_igraca[attacker]++;			
		}
	}
	ProveriNivo(attacker);
	return PLUGIN_CONTINUE;
}
public Death()
{
	new id = read_data(2);
	new attacker = read_data(1);
 
	if(!is_user_alive(attacker) || !is_user_connected(attacker))
		return PLUGIN_CONTINUE;
	new weapon = get_user_weapon(attacker);
	new energija = get_user_health(attacker);
	if(informacije_predmet_igraca[id][0])
	{
		if(snaga_predmeta[id] > 0) 
			snaga_predmeta[id]-=20;
	}
	if(snaga_predmeta[id] > 0) 
	{
		ColorChat(id, NORMAL, "^3[COD:MW4] ^4 Snaga Predmeta:^3 %i.", snaga_predmeta[id]);
	}
	else 
	{
		ColorChat(id, RED, "[COD:MW4] ^x01 Predmet: %s, je potpuno unisten.", naziv_predmeta[informacije_predmet_igraca[id][0]]);
		Obrisipredmet(id);
	}
	if(get_user_team(id) != get_user_team(attacker) && klasa_igraca[attacker])
	{
		new iskustvo_za_ubistvo = get_pcvar_num(cvar_xp_za_ubistvo);
		new novo_iskustvo = get_pcvar_num(cvar_xp_za_ubistvo); 

		if(klasa_igraca[id] == Assassin && klasa_igraca[attacker] != Assassin)
			novo_iskustvo += iskustvo_za_ubistvo*2
			
	    	if(informacije_predmet_igraca[attacker][0] == 46)
		{
			novo_iskustvo += iskustvo_za_ubistvo;
		}
		if(informacije_predmet_igraca[id][0] == 46 && informacije_predmet_igraca[attacker][0] != 46)
			novo_iskustvo += iskustvo_za_ubistvo*2;
	    
		if(level_igraca[id] > level_igraca[attacker])
			novo_iskustvo += (level_igraca[id]-level_igraca[attacker])*(iskustvo_za_ubistvo/10);
		
		if(klasa_igraca[attacker] == Assassin || informacije_predmet_igraca[attacker][0] == 15 && maxClip[weapon] != -1)
		{
			
			new nova_energija = (energija+20<maximalna_energija_igraca[attacker])? energija+20: maximalna_energija_igraca[attacker];
			set_user_clip(attacker, maxClip[weapon]);
			set_user_health(attacker, nova_energija);
		}  
		#if defined BOTY
		if(is_user_bot2(attacker) && random(9) == 0)
			IzbaciPredmet(id);
		#endif
		if(!informacije_predmet_igraca[attacker][0])
			DajPredmet(attacker, random_num(1, sizeof naziv_predmeta-1));

		if(informacije_predmet_igraca[attacker][0] == 14)
		{
			new nova_energija = (energija+50<maximalna_energija_igraca[attacker])? energija+50: maximalna_energija_igraca[attacker];
			set_user_health(attacker, nova_energija);
		}
		set_hudmessage(255, 212, 0, 0.50, 0.33, 1, 6.0, 4.0);
		ShowSyncHudMsg(attacker, SyncHudObj2, "+%i", novo_iskustvo);
		
		iskustvo_igraca[attacker] += novo_iskustvo;
	}
	ProveriNivo(attacker);
	
	if(informacije_predmet_igraca[id][0] == 7 && random_num(1, informacije_predmet_igraca[id][1]) == 1)
		set_task(0.1, "Provera", id+ZADATAK_PROVERA);
	
	return PLUGIN_CONTINUE;
}
public client_putinserver(id)
{
	DeleteSkills(id);
	ObrisiZadatke(id);
	Obrisipredmet(id);
	
	set_task(3.0, "PokaziInformacije", id+ZADATAK_POKAZI_INFORMACIJE);
	set_task(10.0, "PokaziReklame", id+ZADATAK_POKAZI_REKLAME);
}
public client_disconnected(id)
{
	SacuvajPodatke(id);
	DeleteSkills(id);
	ObrisiZadatke(id);	
	Obrisipredmet(id);

	remove_task(id+ZADATAK_POSTAVI_BRZINU);	

}
public DeleteSkills(id)
{
	klasa_igraca[id] = 0;
	level_igraca[id] = 0;
	iskustvo_igraca[id] = 0;
	poeni_igraca[id] = 0;
	energija_igraca[id] = 0;
	inteligencija_igraca[id] = 0;
	snaga_igraca[id] = 0;
	kondicija_igraca[id] = 0;
	maximalna_energija_igraca[id] = 0;
	brzina_igraca[id] = 0.00;
	get_user_name(id, naziv_igraca[id], 63);
  
	remove_task(id+ZADATAK_POSTAVI_BRZINU);
}
public ObrisiZadatke(id)
{
	remove_task(id+ZADATAK_POKAZI_INFORMACIJE);
	remove_task(id+ZADATAK_POKAZI_REKLAME);	
	remove_task(id+ZADATAK_POSTAVI_BRZINU);
	remove_task(id+ZADATAK_PROVERA); 
}
public OpisKlase(id)
{
	new menu = menu_create("Izaberi Klasu:", "OpisKlase_Handle");
	for(new i=1; i <sizeof naziv_klase_novi; i++)
		menu_additem(menu, naziv_klase_novi[i]);
	menu_setprop(menu, MPROP_EXITNAME, "Izlaz");
	menu_setprop(menu, MPROP_BACKNAME, "Prethodna strana");
	menu_setprop(menu, MPROP_NEXTNAME, "Sledeca strana");
	menu_display(id, menu);
	
	client_cmd(id, "spk QTM_CodMod/select");
}
public OpisKlase_Handle(id, menu, item)
{
	client_cmd(id, "spk QTM_CodMod/select");
	
	if(item++ == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	new opis[512];
	format(opis, charsmax(opis), "\rKlasa:\y%s^n%s", naziv_klase[item], novi_opis[item]);
	show_menu(id, 1023, opis);
	
	return PLUGIN_CONTINUE;
}
public IzaberiKlasu(id)
{
	new menu = menu_create("\yOdaberi Menu:", "IzaberiFrakciju_Handle");
	for(new i = 1;i<sizeof(frakcje);i++)
	{
		menu_additem(menu, frakcje[i]);
	}
	menu_display(id, menu);
	menu_setprop(menu, MPROP_EXITNAME, "\rIzadji");
}
public IzaberiFrakciju_Handle(id, menu2, item)
{       
	if(item == MENU_EXIT)
	{
		menu_destroy(menu2);
		return PLUGIN_CONTINUE;
	}
	item++;
	frakcija_igraca[id] = item;
	new menu = menu_create("\yIzaberi Klasu:", "IzaberiKlasu_Handle");
	new klasa[50];
	for(new i=1; i<sizeof naziv_klase; i++)
	{
		if(pripada[i] == item)
		{
			UcitajPodatke(id, i);
			format(klasa, 49, "\r%s %s \rLevel:\y %i", naziv_klase[i], sufix_za_klasu[i], level_igraca[id]);
			menu_additem(menu, klasa);
		}
	}
	UcitajPodatke(id, klasa_igraca[id]);
	
	menu_setprop(menu, MPROP_EXITNAME, "\rIzadji");
	menu_setprop(menu, MPROP_BACKNAME, "\yPredhodna Strana");
	menu_setprop(menu, MPROP_NEXTNAME, "\ySledeca Strana");
	menu_display(id, menu);
	
	client_cmd(id, "spk mw/select");
	
	return PLUGIN_CONTINUE;
}
public IzaberiKlasu_Handle(id, menu, item)
{
	client_cmd(id, "spk mw/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}       
	
	item++;
	
	new ile = 0;
	for(new i=1; i<sizeof naziv_klase; i++)
	{
		if(pripada[i] == frakcija_igraca[id])
		{
			ile++;
		}
		if(ile == item)
		{
			item = i;
			break;
		}
	}
	if(item == klasa_igraca[id])
	{
		ColorChat(id, NORMAL, "^3[COD:MW4]^4 Vec koristite tu klasu.");
		return PLUGIN_CONTINUE;
	}
 	new Timee[10];
    
    	get_time("%H", Timee, charsmax(Timee));
    
    	new DnevnoVreme = (equal(Timee, "09") || equal(Timee, "10") || equal(Timee, "11") || equal(Timee, "12") 
    	|| equal(Timee, "13") || equal(Timee, "14") || equal(Timee, "15") || equal(Timee, "16") 
    	|| equal(Timee, "17") || equal(Timee, "18") || equal(Timee, "19") || equal(Timee, "20")
	|| equal(Timee, "21"));  

	
	if(item == Assassin && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)  
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Major && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Soap && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Price && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Terrorista && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == SWAT && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == FBI && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Pukovnik && !(get_user_flags(id) & ADMIN_LEVEL_A) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Premium Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Ghost && !(get_user_flags(id) & ADMIN_LEVEL_B) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Super Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Ninja && !(get_user_flags(id) & ADMIN_LEVEL_C) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Super Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Komandos && !(get_user_flags(id) & ADMIN_LEVEL_D) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Super Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == General && !(get_user_flags(id) & ADMIN_LEVEL_E) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Super Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(item == Shepherd && !(get_user_flags(id) & ADMIN_LEVEL_F) && DnevnoVreme)
	{
		ColorChat(id, GREEN, "[COD:MW4]^4 Nemate Pristup Super Klasi.");
		IzaberiKlasu(id);
		return PLUGIN_CONTINUE;
	}
	if(klasa_igraca[id])
	{
		nova_klasa_igraca[id] = item;
		ColorChat(id, GREEN, "[COD:MW4]^4 Klasa ce biti promenjena u sledecoj rundi.");
	}
	else
	{
		klasa_igraca[id] = item;
		UcitajPodatke(id, klasa_igraca[id]);
		
		if(is_user_alive(id) && is_user_connected(id))
		{
			Pocetak(id)
		}
	}
	return PLUGIN_CONTINUE;
}
public DodelaPoena(id)
{
	new inteligencija[65], inteligencija10[65];
	new energija[60], energija10[60];
	new snaga[60], snaga10[60];
	new kondicija[60], kondicija10[60];
	new naslov[25];
	format(inteligencija, 64, "\yInteligencija: \r%i \y(Povecava napad)", inteligencija_igraca[id]);
	format(energija, 59, "\yEnergija: \r%i \y(Povecaca energiju)", energija_igraca[id]);
	format(snaga, 59, "\ySnaga: \r%i \y(Smanjuje povrede)", snaga_igraca[id]);
	format(kondicija, 59, "\yKondicija: \r%i \y(Povecava tempo hodanja)", kondicija_igraca[id]);
	format(inteligencija10, 64, "Dodaj 10 poena na inteligenciju");
	format(energija10, 59, "Dodaj 10 poena na energiju");
	format(snaga10, 59, "Dodaj 10 poena na snagu");
	format(kondicija10, 59, "Dodaj 10 poena na kondiciju");
	format(naslov, 24, "Dodeli poena(%i):", poeni_igraca[id]);
	new menu = menu_create(naslov, "DodelaPoena_Handler");
	menu_additem(menu, inteligencija);
	menu_additem(menu, energija);
	menu_additem(menu, snaga);
	menu_additem(menu, kondicija);
	menu_additem(menu, inteligencija10);
	menu_additem(menu, energija10);
	menu_additem(menu, snaga10);
	menu_additem(menu, kondicija10);
	menu_display(id, menu);
	#if defined BOTY
	if(is_user_bot2(id))
		DodelaPoena_Handler(id, menu, random(4));
	#endif
}
public DodelaPoena_Handler(id, menu, item)
{
	client_cmd(id, "spk QTM_CodMod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	if(poeni_igraca[id] < 1)
		return PLUGIN_CONTINUE;
	
	switch(item) 
	{ 
		case 0: 
		{	
			if(inteligencija_igraca[id]<5000)
			{
				inteligencija_igraca[id]++;
				poeni_igraca[id]--;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo inteligencije");
			
		}
		case 1: 
		{	
			if(energija_igraca[id]<5000)
			{
				energija_igraca[id]++;
				poeni_igraca[id]--;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo energije");
		}
		case 2: 
		{	
			if(snaga_igraca[id]<5000)
			{
				snaga_igraca[id]++;
				poeni_igraca[id]--;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo snage");
			
		}
		case 3: 
		{	
			if(kondicija_igraca[id]<5000)
			{
				kondicija_igraca[id]++;
				poeni_igraca[id]--;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo kondicije");
		}
		case 4:
		{
			if(poeni_igraca[id] < 10)
			{
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Nemate dovoljno poena");
			}
			else if(inteligencija_igraca[id]<5000)
			{
				inteligencija_igraca[id]+=10;
				poeni_igraca[id]-=10
			}
			else
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo inteligencije");
		}
		case 5: 
		{
			if(poeni_igraca[id] < 10)
			{
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Nemate dovoljno poena");
			}	
			else if(energija_igraca[id]<5000)
			{
				energija_igraca[id]+=10;
				poeni_igraca[id]-=10;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo energije");
		}
		case 6: 
		{
			if(poeni_igraca[id] < 10)
			{
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Nemate dovoljno poena");
			}	
			else if(snaga_igraca[id]<5000)
			{
				snaga_igraca[id]+=10;
				poeni_igraca[id]-=10;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo snage");
		}
		case 7: 
		{
			if(poeni_igraca[id] < 10)
			{
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Nemate dovoljno poena");
			}	
			else if(kondicija_igraca[id]<5000)
			{
				kondicija_igraca[id]+=10;
				poeni_igraca[id]-=10;
			}
			else 
				ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dostigli ste maximalni nivo kondicije");
		}
	}
	if(poeni_igraca[id]>0)
		DodelaPoena(id);
	
	return PLUGIN_CONTINUE;
}
public KomandaResetujPoene(id)
{	
	ColorChat(id, NORMAL, "^4[COD:MW4] ^1Poeni su resetovani");
	client_cmd(id, "spk QTM_CodMod/select");
	
	ResetujPoene(id)
}
public ResetujPoene(id)
{	
	poeni_igraca[id] = level_igraca[id]*2-2;
	inteligencija_igraca[id] = 0;
	energija_igraca[id] = 0;
	kondicija_igraca[id] = 0;
	snaga_igraca[id] = 0;
	
	if(poeni_igraca[id])
		DodelaPoena(id);
}
public KreirajMedKit(id)
{
	if(!broj_medkit_igraca[id])
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Nemate vise pakete za prvu pomoc");
		return PLUGIN_CONTINUE;
	}
	
	if(prethodna_raketa_igraca[id] + 5.0 > get_gametime())
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Mozate da lecite za 5s!");
		return PLUGIN_CONTINUE;
	}
	
	prethodna_raketa_igraca[id] = get_gametime();
	broj_medkit_igraca[id]--;
	
	new Float:origin[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	
	new ent = create_entity("info_target");
	entity_set_string(ent, EV_SZ_classname, "MedKit");
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_vector(ent, EV_VEC_origin, origin);
	entity_set_float(ent, EV_FL_ltime, halflife_time() + 7 + 0.1);
	
	
	entity_set_model(ent, "models/w_medkit.mdl");
	set_rendering ( ent, kRenderFxGlowShell, 255,0,0, kRenderFxNone, 255 ) 	;
	drop_to_floor(ent);
	
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.1);
	
	return PLUGIN_CONTINUE;
}
public MedKitThink(ent)
{
	new id = entity_get_edict(ent, EV_ENT_owner);
	new totem_dist = 300;
	new totem_heal = 5+floatround(inteligencija_igraca[id]*0.5);
	if (entity_get_edict(ent, EV_ENT_euser2) == 1)
	{		
		new Float:forigin[3], origin[3];
		entity_get_vector(ent, EV_VEC_origin, forigin);
		FVecIVec(forigin,origin);
		
		new entlist[33];
		new numfound = find_sphere_class(0,"player",totem_dist+0.0,entlist, 32,forigin);
		
		for (new i=0; i < numfound; i++)
		{		
			new pid = entlist[i];
			
			if (get_user_team(pid) != get_user_team(id))
				continue;
			
			new energija = get_user_health(pid);
			new nova_energija = (energija+totem_heal<maximalna_energija_igraca[pid])?energija+totem_heal:maximalna_energija_igraca[pid];
			if (is_user_alive(pid)) set_user_health(pid, nova_energija);		
		}
		entity_set_edict(ent, EV_ENT_euser2, 0);
		entity_set_float(ent, EV_FL_nextthink, halflife_time() + 1.5);
		
		return PLUGIN_CONTINUE;
	}
	if (entity_get_float(ent, EV_FL_ltime) < halflife_time() || !is_user_alive(id))
	{
		remove_entity(ent);
		return PLUGIN_CONTINUE;
	}
	if (entity_get_float(ent, EV_FL_ltime)-2.0 < halflife_time())
		set_rendering ( ent, kRenderFxNone, 255,255,255, kRenderTransAlpha, 100 ) ;
	
	new Float:forigin[3], origin[3];
	entity_get_vector(ent, EV_VEC_origin, forigin);
	FVecIVec(forigin,origin);
	
	//Find people near and give them health
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, origin );
	write_byte( TE_BEAMCYLINDER );
	write_coord( origin[0] );
	write_coord( origin[1] );
	write_coord( origin[2] );
	write_coord( origin[0] );
	write_coord( origin[1] + totem_dist );
	write_coord( origin[2] + totem_dist );
	write_short( sprite_white );
	write_byte( 0 ); // startframe
	write_byte( 0 ); // framerate
	write_byte( 10 ); // life
	write_byte( 10 ); // width
	write_byte( 255 ); // noise
	write_byte( 255 ); // r, g, b
	write_byte( 100 );// r, g, b
	write_byte( 100 ); // r, g, b
	write_byte( 128 ); // brightness
	write_byte( 5 ); // speed
	message_end();
	
	entity_set_edict(ent, EV_ENT_euser2 ,1);
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.5);
	
	return PLUGIN_CONTINUE;
}
public KreirajRakete(id)
{
	if(!broj_raketa_igraca[id])
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Iskoristili ste sve rakete");
		return PLUGIN_CONTINUE;
	}
	
	if(prethodna_raketa_igraca[id] + 2.0 > get_gametime())
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Mozate da koristite raketu za 2 sekunde!");
		return PLUGIN_CONTINUE;
	}
	
	if(is_user_alive(id))
	{	
			
		prethodna_raketa_igraca[id] = get_gametime();
		broj_raketa_igraca[id]--;
		new Float: Origin[3], Float: vAngle[3], Float: Velocity[3];
		
		entity_get_vector(id, EV_VEC_v_angle, vAngle);
		entity_get_vector(id, EV_VEC_origin , Origin);
		
		new Ent = create_entity("info_target");
		
		entity_set_string(Ent, EV_SZ_classname, "Rocket");
		entity_set_model(Ent, "models/rpgrocket.mdl");
		
		vAngle[0] *= -1.0;
		
		entity_set_origin(Ent, Origin);
		entity_set_vector(Ent, EV_VEC_angles, vAngle);
		
		entity_set_int(Ent, EV_INT_effects, 2);
		entity_set_int(Ent, EV_INT_solid, SOLID_BBOX);
		entity_set_int(Ent, EV_INT_movetype, MOVETYPE_FLY);
		entity_set_edict(Ent, EV_ENT_owner, id);
		
		VelocityByAim(id, 1000 , Velocity);
		entity_set_vector(Ent, EV_VEC_velocity ,Velocity);
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY) 
		write_byte(22) 
		write_short(Ent) 
		write_short(sprite_beam) 
		write_byte(45) 
		write_byte(4) 
		write_byte(255) 
		write_byte(105) 
		write_byte(180) 
		write_byte(25)
		message_end() 
	}	
	return PLUGIN_CONTINUE;
}
public KreirajDinamit(id)
{
	if(!broj_dinamita_igraca[id])
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Iskoristili ste sav dinamit");
		return PLUGIN_CONTINUE;
	}
	broj_dinamita_igraca[id]--;
	
	new Float:fOrigin[3];
	entity_get_vector(id, EV_VEC_origin, fOrigin);	
	
	new iOrigin[3];
	for(new i=0;i<3;i++)
		iOrigin[i] = floatround(fOrigin[i]);
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
	write_byte(TE_EXPLOSION);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_short(sprite_blast);
	write_byte(32);
	write_byte(20);
	write_byte(0);
	message_end();
	
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, iOrigin );
	write_byte( TE_BEAMCYLINDER );
	write_coord( iOrigin[0] );
	write_coord( iOrigin[1] );
	write_coord( iOrigin[2] );
	write_coord( iOrigin[0] );
	write_coord( iOrigin[1] + 300 );
	write_coord( iOrigin[2] + 300 );
	write_short( sprite_white );
	write_byte( 0 ); // startframe
	write_byte( 0 ); // framerate
	write_byte( 10 ); // life
	write_byte( 10 ); // width
	write_byte( 255 ); // noise
	write_byte( 255 ); // r, g, b
	write_byte( 100 );// r, g, b
	write_byte( 100 ); // r, g, b
	write_byte( 128 ); // brightness
	write_byte( 8 ); // speed
	message_end();
	
	new entlist[33];
	new numfound = find_sphere_class(id, "player", 300.0 , entlist, 32);
	
	for (new i=0; i < numfound; i++)
	{		
		new pid = entlist[i];
		
		if (!is_user_alive(pid) || get_user_team(id) == get_user_team(pid) || informacije_predmet_igraca[pid][0] == 24)
			continue;
		ExecuteHam(Ham_TakeDamage, pid, 0, id, 90.0+float(inteligencija_igraca[id]) , 1);
	}
	return PLUGIN_CONTINUE;
}
public PostaviMine(id)
{
	if(!broj_min_igraca[id])
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Iskoristili ste sve mine");
		return PLUGIN_CONTINUE;
	}
	
	new entlist[2];
	if(find_sphere_class(id, "func_buyzone", 750.0, entlist, 1))
	{
		set_hudmessage(255, 0, 0, 0.23, 0.10, 0, 6.0, 6.0);
		show_hudmessage(id, "Ne mozes postaviti mine blizu mesta respawna!");
		return PLUGIN_CONTINUE;
	}
	broj_min_igraca[id]--;
	
	new Float:origin[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	
	new ent = create_entity("info_target");
	entity_set_string(ent ,EV_SZ_classname, "Mine");
	entity_set_edict(ent ,EV_ENT_owner, id);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_origin(ent, origin);
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	
	entity_set_model(ent, "models/mine.mdl");
	entity_set_size(ent,Float:{-16.0,-16.0,0.0},Float:{16.0,16.0,2.0});
	
	drop_to_floor(ent);
	
	entity_set_float(ent,EV_FL_nextthink,halflife_time() + 0.01) ;
	
	set_rendering(ent,kRenderFxNone, 0,0,0, kRenderTransTexture,50)	;
	
	return PLUGIN_CONTINUE;
}
public DodirMine(ent, id)
{
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	if (get_user_team(attacker) != get_user_team(id))
	{
		new Float:fOrigin[3];
		entity_get_vector( ent, EV_VEC_origin, fOrigin);
		
		new iOrigin[3];
		for(new i=0;i<3;i++)
			iOrigin[i] = floatround(fOrigin[i]);
		
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
		write_byte(TE_EXPLOSION);
		write_coord(iOrigin[0]);
		write_coord(iOrigin[1]);
		write_coord(iOrigin[2]);
		write_short(sprite_blast);
		write_byte(32); // scale
		write_byte(20); // framerate
		write_byte(0);// flags
		message_end();
		new entlist[33];
		new numfound = find_sphere_class(ent,"player", 90.0 ,entlist, 32);
		
		for (new i=0; i < numfound; i++)
		{		
			new pid = entlist[i];
			
			if (!is_user_alive(pid) || get_user_team(attacker) == get_user_team(pid) || informacije_predmet_igraca[pid][0] == 24 || klasa_igraca[id] == Mitraljzac)
				continue;
			
			ExecuteHam(Ham_TakeDamage, pid, ent, attacker, 90.0+float(inteligencija_igraca[attacker]) , 1);
		}
		remove_entity(ent);
	}
}
public DodirRakete(ent)
{
	if ( !is_valid_ent(ent))
		return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:fOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, fOrigin);	
	
	new iOrigin[3];
	for(new i=0;i<3;i++)
		iOrigin[i] = floatround(fOrigin[i]);
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
	write_byte(TE_EXPLOSION);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_short(sprite_blast);
	write_byte(32); // scale
	write_byte(20); // framerate
	write_byte(0);// flags
	message_end();
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", 230.0, entlist, 32);
	
	for (new i=0; i < numfound; i++)
	{		
		new pid = entlist[i];
		
		if (!is_user_alive(pid) || get_user_team(attacker) == get_user_team(pid) || informacije_predmet_igraca[pid][0] == 24)
			continue;
		ExecuteHam(Ham_TakeDamage, pid, ent, attacker, 55.0+float(inteligencija_igraca[attacker]) , 1);
	}
	remove_entity(ent);
}
public fw_Touch(ent, id)
{
	if (!pev_valid(ent)) 
		return FMRES_IGNORED
	
	new ClassName[32]
	pev(ent, pev_classname, ClassName, charsmax(ClassName))
	
	if(equal(ClassName, "rocket"))
	{
		
		new attacker = pev(ent, pev_owner);
		new Float:entOrigin[3], Float:fDamage, Float:Origin[3];
		pev(ent, pev_origin, entOrigin);
		entOrigin[2] += 1.0;
		
		new Float:g_damage = 90.0+(inteligencija_igraca[attacker]/4);
		new Float:g_radius = 250.0+(inteligencija_igraca[attacker]/4);
		
		new victim = -1
		while((victim = engfunc(EngFunc_FindEntityInSphere, victim, entOrigin, g_radius)) != 0)
		{		
			if(!is_user_alive(victim) || get_user_team(attacker) == get_user_team(victim))
				continue;
			
			pev(victim, pev_origin, Origin);
			fDamage = g_damage - floatmul(g_damage, floatdiv(get_distance_f(Origin, entOrigin), g_radius));
			fDamage *= estimate_take_hurt(entOrigin, victim, 0)
			if(fDamage>0.0)
			{
				UTIL_Kill(attacker, victim, fDamage);
				
				if(get_user_team(attacker)!=get_user_team(victim)) 
					if(pev(victim, pev_health))
					ExecuteHam(Ham_TakeDamage, victim, ent, attacker, fDamage, DMG_BULLET)
				
			}
		} 	
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY); 
		write_byte(TE_EXPLOSION); 
		write_coord(floatround(entOrigin[0])); 
		write_coord(floatround(entOrigin[1])); 
		write_coord(floatround(entOrigin[2])); 
		write_short(sprite_blast); 
		write_byte(40);
		write_byte(30);
		write_byte(TE_EXPLFLAG_NONE); 
		message_end();
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(5)
		write_coord(floatround(entOrigin[0])); 
		write_coord(floatround(entOrigin[1])); 
		write_coord(floatround(entOrigin[2]));
		write_short(sprite_smoke);
		write_byte(35);
		write_byte(5);
		message_end();
		remove_entity(ent);
		return FMRES_IGNORED
	}
	return FMRES_IGNORED
}	
public CurWeapon(id)
{
	if(freezetime || !klasa_igraca[id])
		return PLUGIN_CONTINUE;
	
	new weapon = get_user_weapon(id);

	if(informacije_predmet_igraca[id][0] == 44 && maxClip[weapon] != -1)
		set_user_clip(id, maxClip[weapon]);

	PostaviBrzinu(id);
	
	set_task(0.1, "PostaviBrzinu", id+ZADATAK_POSTAVI_BRZINU);
	
	if(klasa_igraca[id] == Assassin && weapon == CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 1); 
	else if(klasa_igraca[id] == Assassin && weapon != CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 255);

	if(informacije_predmet_igraca[id][0] == 40 && weapon == CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 1); 
	else if(informacije_predmet_igraca[id][0] == 40 && weapon != CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 255);
		
	if(klasa_igraca[id] == Ninja && weapon == CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 1); 
	else if(klasa_igraca[id] == Ninja && weapon != CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 255);
		
	if(klasa_igraca[id] == Ghost && weapon == CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 1); 
	else if(klasa_igraca[id] == Ghost && weapon != CSW_KNIFE) 
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, 255);

	new weapons[32];
	new weaponsnum;
	get_user_weapons(id, weapons, weaponsnum);
	for(new i=0; i<weaponsnum; i++)
		if(is_user_alive(id))
			if(maxAmmo[weapons[i]] > 0)
				cs_set_user_bpammo(id, weapons[i], maxAmmo[weapons[i]]);

	return PLUGIN_CONTINUE;
}

public EmitSound(id, iChannel, szSound[], Float:fVol, Float:fAttn, iFlags, iPitch ) 
{
	if(!is_user_alive(id))
		return FMRES_IGNORED;
	
	if(equal(szSound, "common/wpn_denyselect.wav"))
	{
		KoristiPredmet(id);
		return FMRES_SUPERCEDE;
	}
	
	return FMRES_IGNORED;
}
public KoristiPredmet(id)
{
	if(informacije_predmet_igraca[id][0] == 19 && informacije_predmet_igraca[id][1]>0) 
	{
		set_user_health(id, maximalna_energija_igraca[id]);
		informacije_predmet_igraca[id][1]--;
	}
	if(broj_medkit_igraca[id]>0)
		KreirajMedKit(id);
	if(broj_raketa_igraca[id]>0)
		KreirajRakete(id);
	if(broj_min_igraca[id]>0)
		PostaviMine(id);
	if(broj_dinamita_igraca[id]>0)
		KreirajDinamit(id);
	
	return PLUGIN_HANDLED;
}
public SacuvajPodatke(id)
{
	if(!klasa_igraca[id])
		return PLUGIN_CONTINUE;
	
	new vaultkey[128],vaultdata[256], ID_igraca[64];
	format(vaultdata, charsmax(vaultdata),"#%i#%i#%i#%i#%i#%i", iskustvo_igraca[id], level_igraca[id], inteligencija_igraca[id], energija_igraca[id], snaga_igraca[id], kondicija_igraca[id]);
	
	get_user_authid(id, ID_igraca, charsmax(ID_igraca))
	
	format(vaultkey, charsmax(vaultkey),"%s-%i-cod", ID_igraca, klasa_igraca[id]);
	nvault_set(g_vault,vaultkey,vaultdata);
	
	return PLUGIN_CONTINUE;
}
public UcitajPodatke(id, klasa)
{
	new vaultkey[128],vaultdata[256], ID_igraca[64];
	
	get_user_authid(id, ID_igraca, charsmax(ID_igraca))
	
	format(vaultkey, charsmax(vaultkey),"%s-%i-cod", ID_igraca, klasa);
	nvault_get(g_vault,vaultkey,vaultdata,255);
	
	replace_all(vaultdata, 255, "#", " ");
	
	new playerdata[6][32];
	
	parse(vaultdata, playerdata[0], 31, playerdata[1], 31, playerdata[2], 31, playerdata[3], 31, playerdata[4], 31, playerdata[5], 31);
	
	iskustvo_igraca[id] = str_to_num(playerdata[0]);
	level_igraca[id] = str_to_num(playerdata[1])>0?str_to_num(playerdata[1]):1;
	inteligencija_igraca[id] = str_to_num(playerdata[2]);
	energija_igraca[id] = str_to_num(playerdata[3]);
	snaga_igraca[id] = str_to_num(playerdata[4]);
	kondicija_igraca[id] = str_to_num(playerdata[5]);
	poeni_igraca[id] = (level_igraca[id]-1)*2-inteligencija_igraca[id]-energija_igraca[id]-snaga_igraca[id]-kondicija_igraca[id];
	
	return PLUGIN_CONTINUE;
} 
public IzbaciPredmet(id)
{
	if(informacije_predmet_igraca[id][0])
	{
		ColorChat(id, NORMAL, "^4[COD:MW4] ^1Bacio si ^3%s.", naziv_predmeta[informacije_predmet_igraca[id][0]]);
		Obrisipredmet(id);
	}
	else
		ColorChat(id, NORMAL, "^4[COD:MW4] ^1Nemate nijedan predmet.", naziv_predmeta[informacije_predmet_igraca[id][0]]);
} 
public Obrisipredmet(id)
{
	informacije_predmet_igraca[id][0] = 0;
	informacije_predmet_igraca[id][1] = 0;

	if(is_user_alive(id))
	{
		set_user_footsteps(id, 0);
		set_rendering(id,kRenderFxGlowShell,0,0,0 ,kRenderTransAlpha, 255);
		PromeniModel(id, 1);
	}
}
public DajPredmet(id, predmet)
{
	Obrisipredmet(id);
	informacije_predmet_igraca[id][0] = predmet;
	snaga_predmeta[id] = 160;
	ColorChat(id, NORMAL, "^4[COD:MW4] ^1Dobio si ^3%s.", naziv_predmeta[informacije_predmet_igraca[id][0]]);	
	
	switch(predmet)
	{
		case 1:
		{
			set_user_footsteps(id, 1);
		}
		case 2:
		{
			informacije_predmet_igraca[id][1] = random_num(3,6);
		}
		case 3:
		{
			informacije_predmet_igraca[id][1] = random_num(6, 11);
		}
		case 5:
		{
			informacije_predmet_igraca[id][1] = random_num(6, 9);
		}
		case 6:
		{
			if(klasa_igraca[id] == Assassin)
			{
				DajPredmet(id, random_num(1, sizeof naziv_predmeta-1));
			}
			else
			{
				informacije_predmet_igraca[id][1] = random_num(1, 9999);
				set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransColor, informacije_predmet_igraca[id][1]);
			}
		}
		case 7:
		{
			informacije_predmet_igraca[id][1] = random_num(2, 4);
		}
		case 8:
		{
			if(klasa_igraca[id] == Marinac)
				DajPredmet(id, random_num(1, sizeof naziv_predmeta-1));
		}
		case 9:
		{
			informacije_predmet_igraca[id][1] = random_num(1, 3);
			PromeniModel(id, 0);
			give_item(id, "weapon_hegrenade");
		}
		case 10:
		{
			informacije_predmet_igraca[id][1] = random_num(4, 8);
			give_item(id, "weapon_hegrenade");
		}
		case 12:
		{
			informacije_predmet_igraca[id][1] = random_num(1, 4);
		}
		case 13:
		{
			give_item(id, "weapon_awp");
		}
		case 15:
		{
			if(klasa_igraca[id] == Marinac)
				DajPredmet(id, random_num(1, sizeof naziv_predmeta-1));
		}
		case 19:
		{
			informacije_predmet_igraca[id][1] = 1;
		}
		case 26:
		{
			informacije_predmet_igraca[id][1] = random_num(3, 6);
		}
		case 27:
		{
			informacije_predmet_igraca[id][1] = 3;
		}
	}
}
public OpisPredmeta(id, menu, item)
{
	new opis_predmeta[128];
	new slucajne_vrednosti[3];
	num_to_str(informacije_predmet_igraca[id][1], slucajne_vrednosti, 2);
	format(opis_predmeta, 127, opis_predmet[informacije_predmet_igraca[id][0]]);
	replace_all(opis_predmeta, 127, "LW", slucajne_vrednosti);
	if(item++ == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	new opis2[552]
	format(opis2, charsmax(opis2), "\rPredmet:\y%s^n\rOpis:\y%s", naziv_predmeta[informacije_predmet_igraca[id][0]], opis_predmeta);
	show_menu(id, 1023, opis2)
	return PLUGIN_CONTINUE;
}   
public Provera(id)
{
	id-=ZADATAK_PROVERA;
	ExecuteHamB(Ham_CS_RoundRespawn, id);
}  
public ProveriNivo(id)
{	
	if(level_igraca[id] < 1000)
	{
		while(iskustvo_igraca[id] >= iskustvo_levelu[level_igraca[id]])
		{
			level_igraca[id]++; 
			set_hudmessage(245, 200, 25, -1.0, 0.25, 0, 1.0, 2.0, 0.1, 0.2, 2);
			ShowSyncHudMsg(id, SyncHudObj3, "Dobrodosao na %i Level !", level_igraca[id]);
			client_cmd(id, "spk QTM_CodMod/levelup");
		}
		
		poeni_igraca[id] = (level_igraca[id]-1)*2-inteligencija_igraca[id]-energija_igraca[id]-snaga_igraca[id]-kondicija_igraca[id];
	}
	SacuvajPodatke(id);
}   
public PokaziInformacije(id) 
{   
	id -= ZADATAK_POKAZI_INFORMACIJE;
	
	set_task(0.1, "PokaziInformacije", id+ZADATAK_POKAZI_INFORMACIJE);
   
	if(is_user_connected(id) && !is_user_alive(id))
	{
		new target = entity_get_int(id, EV_INT_iuser2);
		
		if(!target)
			return PLUGIN_CONTINUE;
		
		set_hudmessage(250, 250, 250, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj, "Klasa: %s^nIskustvo: %i^nLevel: %i^nPredmet: %s^nEnergija: %d", naziv_klase[klasa_igraca[target]], iskustvo_igraca[target], level_igraca[target], naziv_predmeta[informacije_predmet_igraca[target][0]],get_user_health(target));
		
		return PLUGIN_CONTINUE;
	}
	set_hudmessage(0, 255, 0, 0.02, 0.17, 0, 0.0, 0.3, 0.0, 0.0);
	ShowSyncHudMsg(id, SyncHudObj, "[Klasa: %s]^n[Iskustvo: %i]^n[Level: %i]^n[Predmet: %s]^n[Energija: %d]", naziv_klase[klasa_igraca[id]], iskustvo_igraca[id], level_igraca[id], naziv_predmeta[informacije_predmet_igraca[id][0]],get_user_health(id));
	if(broj_medkit_igraca[id] != 0)
	{
		set_hudmessage(240, 220, 200, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj2, "[Medkit: %i]^n[Rakete: %i]", broj_medkit_igraca[id])
	}
	if(broj_raketa_igraca[id] != 0)
	{
		set_hudmessage(240, 220, 200, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj2, "[Rakete: %i]", broj_raketa_igraca[id])
	}
	if(broj_min_igraca[id] != 0)
	{
		set_hudmessage(240, 220, 200, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj2, "[Mine: %i]", broj_min_igraca[id])
	}
	if(broj_dinamita_igraca[id] != 0)
	{
		set_hudmessage(240, 220, 200, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj2, "[Dinamit: %i]", broj_dinamita_igraca[id])
	}	
	return PLUGIN_CONTINUE;

}    
public PokaziReklame(id)
{
	id-=ZADATAK_POKAZI_REKLAME;
	ColorChat(0, GREEN, "^4[COD:MW4] ^3 Besplatne Premium Klase od^4 22h^1 do^4 09h");
}

public Pomoc(id)
	show_menu(id, 1023, "\y/reset\w - Resetuje poene^n\y/klasa\w - Promeni klasu^n\y/drop\w - Izbaci predmet^n\y/predmet\w - Pokazuje opis vaseg predmeta^n\y/opis\w - Pokazuje opis klase^n\y+use\w - Koristi specijalne moci klase", -1, "Pomoc");
public PostaviBrzinu(id)
{
	id -= id > 32 ? ZADATAK_POSTAVI_BRZINU : 0
	
	if(klasa_igraca[id])
	{
		set_user_maxspeed(id, brzina_igraca[id])
	}
}
public PromeniModel(id,reset)
{
	if (id<1 || id>32 || !is_user_connected(id)) 
		return PLUGIN_CONTINUE;
	
	if (reset)
		cs_reset_user_model(id);
	else
	{
		new num = random_num(0,3);
		switch(get_user_team(id))
		{
			case 1: cs_set_user_model(id, Ubrania_CT[num]);
				case 2:cs_set_user_model(id, Ubrania_Terro[num]);
		}
	}
	return PLUGIN_CONTINUE;
}
public fw_traceline(Float:vecStart[3],Float:vecEnd[3],ignoreM,id,trace) 
{
	if(!is_user_connected(id))
		return;
	
	new hit = get_tr2(trace, TR_pHit);
	
	if(!is_user_connected(hit))
		return;
	
	new hitzone = get_tr2(trace, TR_iHitgroup);
	if(informacije_predmet_igraca[hit][0] == 41 && hitzone != HIT_HEAD)
		set_tr2(trace, TR_iHitgroup, 8);
	
	if(informacije_predmet_igraca[id][0] == 42 && !random(3) && get_user_weapon(id) == CSW_M4A1)
		set_tr2(trace, TR_iHitgroup, HIT_HEAD);	
		
	if(informacije_predmet_igraca[id][0] == 43 && !random(3) && get_user_weapon(id) == CSW_AK47)
		set_tr2(trace, TR_iHitgroup, HIT_HEAD);	
}
public client_PreThink(id)
{
	if (entity_get_int(id, EV_INT_button)& 2 && informacije_predmet_igraca[id][0] == 45) {
		new flags = entity_get_int(id, EV_INT_flags)
		
		if(!is_user_alive(id))
			return PLUGIN_HANDLED;
			
		if(flags & FL_WATERJUMP)
			return PLUGIN_CONTINUE;
			
		if(entity_get_int(id, EV_INT_waterlevel) >= 2 )
			return PLUGIN_CONTINUE;
			
		if(!(flags & FL_ONGROUND))
			return PLUGIN_CONTINUE;
		
		new Float:velocity[3]
		entity_get_vector(id, EV_VEC_velocity, velocity)
		velocity[2] += 250.0
		entity_set_vector(id, EV_VEC_velocity, velocity)
		
		entity_set_int(id, EV_INT_gaitsequence, 6)
	}
	return PLUGIN_CONTINUE
}
public DodirOruzija(weapon,id)
{
	if(!is_user_connected(id))
		return HAM_IGNORED;
	
	new model[23];
	pev(weapon, pev_model, model, 22);
	if (pev(weapon, pev_owner) == id || containi(model, "w_backpack") != -1)
		return HAM_IGNORED;
	return HAM_SUPERCEDE;
}
stock bool:UTIL_In_FOV(id,target)
{
	if (Find_Angle(id,target,9999.9) > 0.0)
		return true;
	
	return false;
}
stock UTIL_Kill(attacker, this, Float:damage)
{
	if(get_user_health(this) <= floatround(damage))
		lansirano[attacker][this] = true;	
}
#if defined BOTY
public is_user_bot2(id)
{
	new ping, loss
	get_user_ping(id, ping, loss)
	if(ping > 0 && loss > 0)
		return false
	return true
}
#endif
stock Float:Find_Angle(Core,Target,Float:dist)
{
	new Float:vec2LOS[2];
	new Float:flDot;
	new Float:CoreOrigin[3];
	new Float:TargetOrigin[3];
	new Float:CoreAngles[3];
	
	pev(Core,pev_origin,CoreOrigin);
	pev(Target,pev_origin,TargetOrigin);
	
	if (get_distance_f(CoreOrigin,TargetOrigin) > dist)
		return 0.0;
	
	pev(Core,pev_angles, CoreAngles);
	
	for ( new i = 0; i < 2; i++ )
		vec2LOS[i] = TargetOrigin[i] - CoreOrigin[i];
	
	new Float:veclength = Vec2DLength(vec2LOS);
	
	//Normalize V2LOS
	if (veclength <= 0.0)
	{
		vec2LOS[0] = 0.0;
		vec2LOS[1] = 0.0;
	}
	else
	{
		new Float:flLen = 1.0 / veclength;
		vec2LOS[0] = vec2LOS[0]*flLen;
		vec2LOS[1] = vec2LOS[1]*flLen;
	}
	//Do a makevector to make v_forward right
	engfunc(EngFunc_MakeVectors,CoreAngles);
	
	new Float:v_forward[3];
	new Float:v_forward2D[2];
	get_global_vector(GL_v_forward, v_forward);
	
	v_forward2D[0] = v_forward[0];
	v_forward2D[1] = v_forward[1];
	
	flDot = vec2LOS[0]*v_forward2D[0]+vec2LOS[1]*v_forward2D[1];
	
	if ( flDot > 0.5 )
	{
		return flDot;
	}
	return 0.0;
}
stock Float:Vec2DLength( Float:Vec[2] )  
{ 
	return floatsqroot(Vec[0]*Vec[0] + Vec[1]*Vec[1] );
}
stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
	message_begin( MSG_ONE, g_msg_screenfade,{0,0,0},id );
	write_short( duration );	// Duration of fadeout
	write_short( holdtime );	// Hold time of color
	write_short( fadetype );	// Fade type
	write_byte ( red );		// Red
	write_byte ( green );		// Green
	write_byte ( blue );		// Blue
	write_byte ( alpha );	// Alpha
	message_end();
}
public SetModel(ent, model[])
{
	if(!pev_valid(ent))
		return FMRES_IGNORED
	
	if(!equal(model, "models/w_p228.mdl")) 
		return FMRES_IGNORED;
	
	new id = pev(ent, pev_owner);
	if(!ima_bazuku[id])
		return FMRES_IGNORED;
	
	engfunc(EngFunc_SetModel, ent, "models/w_law.mdl");
	set_pev(ent, pev_iuser4, rakete_igraca[id]);
	ima_bazuku[id] = false;
	return FMRES_SUPERCEDE;
}
public message_DeathMsg()
{
	static killer, victim;
	killer = get_msg_arg_int(1);
	victim = get_msg_arg_int(2);
	
	if(lansirano[killer][victim])
	{
		lansirano[killer][victim] = false;
		set_msg_arg_string(4, "grenade");
		return PLUGIN_CONTINUE;
	}
	return PLUGIN_CONTINUE;
}
public task_launcher_reload(id)
{
	id -= 3512;
	reloading[id] = false;
	set_pev(id, pev_weaponanim, 0);
}
public Weapon_Deploy(ent)
{
	new id = get_pdata_cbase(ent, 41, 4);
	if(ima_bazuku[id])
	{
		set_pev(id, pev_viewmodel2, "models/v_law.mdl");
		set_pev(id, pev_weaponmodel2, "models/p_law.mdl");
	}
	return PLUGIN_CONTINUE;
}
public Weapon_WeaponIdle(ent)
{
	new id = get_pdata_cbase(ent, 41, 4);
	if(get_user_weapon(id) == 1 && ima_bazuku[id])
	{
		if(!idle[id]) 
			idle[id] = get_gametime();
	}
}
stock set_user_clip(id, ammo)
{
	new weaponname[32], weaponid = -1, weapon = get_user_weapon(id, _, _);
	get_weaponname(weapon, weaponname, 31);
	while ((weaponid = find_ent_by_class(weaponid, weaponname)) != 0)
		if(entity_get_edict(weaponid, EV_ENT_owner) == id) 
	{
		set_pdata_int(weaponid, 51, ammo, 4);
		return weaponid;
	}
	return 0;
}
stock Float:estimate_take_hurt(Float:fPoint[3], ent, ignored) 
{
	new Float:fOrigin[3];
	new tr;
	new Float:fFraction;
	pev(ent, pev_origin, fOrigin);
	engfunc(EngFunc_TraceLine, fPoint, fOrigin, DONT_IGNORE_MONSTERS, ignored, tr);
	get_tr2(tr, TR_flFraction, fFraction);
	
	if(fFraction == 1.0 || get_tr2(tr, TR_pHit) == ent)
	{
		return 1.0;
	}
	return 0.6;
}
public message_Health(msgid, dest, id)
{
	if(!is_user_alive(id))
		return PLUGIN_CONTINUE;
	
	static hp;
	hp = get_msg_arg_int(1);
	
	if(hp > 255 && (hp % 256) == 0)
		set_msg_arg_int(1, ARG_BYTE, ++hp);
	
	return PLUGIN_CONTINUE;
}
public BlokirajKomande()
	return PLUGIN_HANDLED;

public plugin_end() 
	nvault_close( g_vault )
public cmd_setpredmet(id, level, cid)
{
	if(!cmd_access(id,level,cid,3))
		return PLUGIN_HANDLED;
	
	new arg1[33];
	new arg2[6];
	
	read_argv(1, arg1, 32);
	read_argv(2, arg2, 5);
	
	new igrac  = cmd_target(id, arg1, 0)
	new predmet = str_to_num(arg2)
	
	if(!is_user_alive(igrac))
	{
		client_print(id, print_console, "Ne mozete dati predmet mrtvom igracu.");
		return PLUGIN_HANDLED;
	}
	if(predmet < 0 || predmet > sizeof naziv_predmeta-1)
	{
		client_print(id, print_console, "Uneli ste nevazeci broj predmeta.");
		return PLUGIN_HANDLED;
	}
	DajPredmet(igrac, predmet);
	
	if(get_cvar_num("cod_predmet_log"))
	{
		new vreme[9] ,authid[32], authid2[32], name2[32], name[32];
		get_user_authid(id, authid, 31);
		get_user_authid(igrac, authid2, 31);
		get_user_name(igrac, name2, 31);
		get_user_name(id, name, 31);
		get_time("%H:%M:%S", vreme, 8);
	}
	return PLUGIN_HANDLED;
}
public Komande(id)
	show_menu(id, 1023, "\r/reset\y -Ponovo podeli poene^n\r/shop\y - Otvari Shop^n\r/klasa\y - Izaberi klasu^n\r/drop\y - Izbaci predmet^n\r/predmet\y - Opis tvog predmeta^n\r/opis\y -Opis svih klasa^n\rna +use \y- Koristi specijalne moci klase^n\rna (+radio2) \y- Koristi killstreak^n\r/rs\y resetuje skor^n\r/pomoc\y Ukljucuje/Iskljucuje pomoc u chatu^n\r/def\y Kupuje def kit", -1, "Komande");
public Prodaj(id) 
{ 
	//client_cmd(id, "spk MW4/select");  
	
	if(!informacije_predmet_igraca[id][0]) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Nemate Predmet."); 
		return PLUGIN_CONTINUE; 
	} 
	else 
	{ 
		new pare_igraca; 
		pare_igraca = cs_get_user_money(id); 
		ColorChat(id, NORMAL, "^4[COD:MW4] ^1Prodao si ^3%s^1 za ^3$2500", naziv_predmeta[informacije_predmet_igraca[id][0]]); 
		Obrisipredmet(id); 
		cs_set_user_money(id, pare_igraca+2500);
	}
	return PLUGIN_CONTINUE;
}  
public DajNekomPredmet(id) 
{ 
	new menu = menu_create("Izaberi Igraca", "DajNekomPredmet_Handle"); 
	new cb = menu_makecallback("DajNekomPredmet_Callback"); 
	new broj_predmeta; 
	for(new i=0; i<=32; i++) 
	{ 
		if(!is_user_connected(i)) 
			continue; 
		daj_igracu[broj_predmeta++] = i; 
		menu_additem(menu, naziv_igraca[i], "0", 0, cb); 
	} 
	menu_display(id, menu); 
} 
public DajNekomPredmet_Handle(id, menu, item) 
{ 
	if(item < 1 || item > 32) return PLUGIN_CONTINUE; 
	
	if(!is_user_connected(daj_igracu[item])) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Igrac se diskonektovao."); 
		return PLUGIN_CONTINUE; 
	} 
	if(dobio_predmet[id]) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Morate sacekati sledecu rundu."); 
		return PLUGIN_CONTINUE; 
	} 
	if(!informacije_predmet_igraca[id][0]) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Nemate nijedan predmet."); 
		return PLUGIN_CONTINUE; 
	} 
	if(informacije_predmet_igraca[daj_igracu[item]][0]) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Ovaj igrac vec ima predmet."); 
		return PLUGIN_CONTINUE; 
	} 
	if(!is_user_alive(daj_igracu[item])) 
	{ 
		ColorChat(id, NORMAL, "^4[COD:MW4]^1 Igrac kome dajes mora biti ziv."); 
		return PLUGIN_CONTINUE; 
	} 
	
	dobio_predmet[daj_igracu[item]] = true; 
	DajPredmet(daj_igracu[item], informacije_predmet_igraca[id][0]); 
	informacije_predmet_igraca[daj_igracu[item]][1] = informacije_predmet_igraca[id][1]; 
	ColorChat(id, NORMAL, "^4[COD:MW4]^1 Nagradio ^3%s ^1sa ^3%s.", naziv_igraca[daj_igracu[item]], naziv_predmeta[informacije_predmet_igraca[id][0]]); 
	ColorChat(daj_igracu[item], NORMAL, "^4[COD:MW4]^1 Dobio si ^3 %s^1 od ^3%s.",naziv_predmeta[informacije_predmet_igraca[id][0]] , naziv_igraca[id]); 
	Obrisipredmet(id); 
	return PLUGIN_CONTINUE; 
} 
public DajNekomPredmet_Callback(id, menu, item) 
{ 
	if(daj_igracu[item] == id) 
		return ITEM_DISABLED; 
	return ITEM_ENABLED; 
}  
public Menu(id)
{
	new menu = menu_create("Menu:", "Menu_handle");
	menu_additem(menu, "\rKlasa\y(Klase Meni)");
	menu_additem(menu, "\rOpis Klase\y(Opis Klasa Meni)");
	menu_additem(menu, "\rShop\y(Shop Menu)");
	menu_display(id, menu);
}
public Menu_handle(id, menu, item) 
{
	//client_cmd(id, "spk QTM_CodMod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	switch(item) 
	{ 
		case 0:
		{
			IzaberiKlasu(id)
		}
		case 1:
		{
			OpisKlase(id)
		}
		case 2:
		{
			Shop(id)
		}
	}
	return PLUGIN_CONTINUE;
}
public KupiDefuse(id)
{
	new pare_igraca = cs_get_user_money(id);
	
	if(get_user_team(id) != 2)
	{
		ColorChat(id, NORMAL, "^3[COD:MW4]^4 Samo CT tim moze da kupi def");
		return PLUGIN_CONTINUE;
	}
	else if(pare_igraca < 200)
	{
		ColorChat(id, NORMAL, "^3[COD:MW4]^4 Nemate dovoljno Para");
		ColorChat(id, NORMAL, "^3[COD:MW4]^4 Imate^3 %i/ 200", pare_igraca);
		return PLUGIN_CONTINUE;
	}
	else if(cs_get_user_defuse(id) == 1)
	{
		ColorChat(id, NORMAL, "^3[COD:MW4]^4 Vec imate Defuse Kit");
		return PLUGIN_CONTINUE;
	}
	cs_set_user_money(id, pare_igraca-200);
	cs_set_user_defuse(id, 1);
	
	return PLUGIN_CONTINUE;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ ansicpg1250\\ deff0\\ deflang9242{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ f0\\ fs16 \n\\ par }
*/

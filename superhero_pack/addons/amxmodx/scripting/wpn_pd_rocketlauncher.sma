/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <weaponmod>
#include <weaponmod_stocks>
#include <xs>

#define PLUGIN "WPN Rocket Launcher ( PD )"
#define VERSION "0.1"
#define AUTHOR "SandStriker"

// Weapon information
new
	g_WPN_NAME[]	= "PD-Rocket Launcher",
	g_WPN_SHORT[]	= "rocketlauncher",
	g_WPN_CLASS[]	= "wpn_pd_rpg";

// Models
new
	g_P_MODEL[]	= "models/p_pd_rpg.mdl",
	g_V_MODEL[]	= "models/v_pd_rpg.mdl",
	g_W_MODEL[]	= "models/w_pd_rpg.mdl",
	g_INDICATORSPR[]= "sprites/rpg_indicator.spr",
	//g_SMOKESPR[]	= "sprites/smoke.spr",
	g_EXSPR[]	= "sprites/zerogxplode.spr",
	g_ROCKET[]	= "models/pd_rpgrocket.mdl";

// Sounds
new g_SOUND[][] = 
{
	"weapons/rocketlauncher_fire.wav",
	"weapons/rocketlauncher_reload.wav",
	"weapons/rocket_voice.wav"
};

enum rpg_seq
{
	rpg_idle,
	rpg_draw,
	rpg_down,
	rpg_idle2,
	rpg_draw2,
	rpg_down2,
	rpg_shoot,
	rpg_reload
};

//rpg settings
#define RPG_SHAKEFORCE		3.0
#define RPG_RUNSPEED		200.0
#define RPG_CLIPAMMO		1
#define RPG_MAXMAMMO		3
#define RPG_COST		4400

//rocket settings
#define RPG_SPEED		600	// Rocket fly speed.
#define RPG_SPEED_ROCKED	250	// Rocket fly speed for Rocked player.
#define RPG_RADIUS		300.0	// Rocket explosion radius.
#define RPG_DAMAGE		200.0	// Rocket explosion damage (in center).


//--------------------------------------
//don't change under.
#define RPG_REFIRERATE		1.0
#define RPG_REFIRERATE2		0.2
#define RPG_RELOADTIME		2.55
#define RPG_BULLETPERSHOT	1
#define RPG_ROCKET_MODE		pev_iuser1
#define	RPG_ROCKING		1
#define RPG_UNROCKING		0
#define RPG_INITROCK		0

new 
	g_wpnid,
	g_RocketClass,
	//g_Trail,
	g_Explosion,
	g_Indicator,
	g_rockingsystem[33]
;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	register_event("ResetHUD","RockingReset","b");
	register_forward(FM_Touch,"RPG_Touch");
	register_forward(FM_Think,"RPG_Think");
	register_forward(FM_PlayerPreThink,"RPG_PreThink");
	
	// Add your code here...
}

public plugin_cfg()
{
	g_RocketClass = engfunc(EngFunc_AllocString,"info_target");
	arrayset(g_rockingsystem,RPG_INITROCK,sizeof(g_rockingsystem));
	create_weapon();
}

public plugin_precache()
{
	//g_Trail = precache_model(g_SMOKESPR);
	g_Explosion = precache_model(g_EXSPR);
	g_Indicator = precache_model(g_INDICATORSPR);
	precache_model(g_P_MODEL);
	precache_model(g_V_MODEL);
	precache_model(g_W_MODEL);
	precache_model(g_ROCKET);
	precache_sound(g_SOUND[0]);
	precache_sound(g_SOUND[1]);
	precache_sound(g_SOUND[2]);
}

create_weapon()
{
	new wpnid = wpn_register_weapon(g_WPN_NAME, g_WPN_SHORT);
	if(wpnid == -1) return PLUGIN_CONTINUE;
	
	// Strings
	wpn_set_string(wpnid,wpn_viewmodel,	g_V_MODEL);
	wpn_set_string(wpnid,wpn_weaponmodel,	g_P_MODEL);
	wpn_set_string(wpnid,wpn_worldmodel,	g_W_MODEL);
	
	// Event handlers
	wpn_register_event(wpnid,event_attack1,		"ev_attack1");
	wpn_register_event(wpnid,event_attack2,		"ev_attack2");
	wpn_register_event(wpnid,event_draw,		"ev_draw");
	wpn_register_event(wpnid,event_reload,		"ev_reload");
	wpn_register_event(wpnid,event_hide,		"ev_holsdrop");
	wpn_register_event(wpnid,event_weapondrop_pre,	"ev_holsdrop");

	// Floats
	wpn_set_float(wpnid,wpn_refire_rate1,		RPG_REFIRERATE);
	wpn_set_float(wpnid,wpn_refire_rate2,		RPG_REFIRERATE2);
	wpn_set_float(wpnid,wpn_recoil1,		RPG_SHAKEFORCE);
	wpn_set_float(wpnid,wpn_run_speed,		RPG_RUNSPEED);
	wpn_set_float(wpnid,wpn_reload_time,		RPG_RELOADTIME);
	
	// Integers
	wpn_set_integer(wpnid,wpn_ammo1,		RPG_CLIPAMMO);
	wpn_set_integer(wpnid,wpn_ammo2,		RPG_MAXMAMMO);
	wpn_set_integer(wpnid,wpn_bullets_per_shot1,	RPG_BULLETPERSHOT);
	wpn_set_integer(wpnid,wpn_cost,			RPG_COST);
	g_wpnid = wpnid;
	return PLUGIN_CONTINUE;
}

public ev_draw(id)
{
	wpn_playanim(id,rpg_draw);
	RockingSystemClear(id);
	return PLUGIN_CONTINUE;
}

public ev_holsdrop(id)
{
	wpn_playanim(id,rpg_down);
	RockingSystemClear(id);
	return PLUGIN_CONTINUE;
}

public ev_reload(id)
{
	wpn_playanim (id ,rpg_reload);
	emit_sound(id, CHAN_ITEM,g_SOUND[1],1.0,ATTN_NORM,0,PITCH_NORM);

	return PLUGIN_CONTINUE;
}

public ev_attack1(id)
{
	new mode;
	if(g_rockingsystem[id] != RPG_INITROCK)
		mode = RPG_ROCKING;
	else
		mode = RPG_UNROCKING;
	CreateRocket(id, mode);
	return PLUGIN_CONTINUE;
}

public ev_attack2(id)
{
	new target,body;
	get_user_aiming(id,target,body);
	if(!get_entity_alive(target))
		return PLUGIN_CONTINUE;
	if(g_rockingsystem[id] == 0 || g_rockingsystem[id] != target)
		g_rockingsystem[id] = target;
	return PLUGIN_CONTINUE;
}

CreateRocket(id,mode)
{
	new rocket = engfunc(EngFunc_CreateNamedEntity,g_RocketClass);
	if(!rocket) return PLUGIN_CONTINUE;
	
	// Strings
	set_pev(rocket,pev_classname,g_WPN_CLASS);
	engfunc(EngFunc_SetModel,rocket,g_ROCKET);
	
	// Integer
	set_pev(rocket,pev_owner,id);
	set_pev(rocket,pev_movetype,MOVETYPE_FLY);
	set_pev(rocket,pev_solid,SOLID_BBOX);
	set_pev(rocket,RPG_ROCKET_MODE,mode);

	// Floats
	set_pev(rocket,pev_mins,Float:{-1.0,-1.0,-1.0});
	set_pev(rocket,pev_maxs,Float:{1.0,1.0,1.0});
	
	new Float:fStart[3];
	wpn_projectile_startpos(id,40,0,0,fStart);
	set_pev(rocket,pev_origin,fStart);
	
	new Float:fVel[3];
	if(mode == RPG_UNROCKING)
	{
		velocity_by_aim(id,RPG_SPEED,fVel);
	}else
	{
		velocity_by_aim(id,RPG_SPEED_ROCKED,fVel);
		set_pev(rocket,pev_enemy,g_rockingsystem[id]);
		set_pev(rocket, pev_nextthink,get_gametime()+0.1);
	}
	set_pev(rocket,pev_velocity,fVel);
	
	new Float:fAngles[3];
	vector_to_angle(fVel,fAngles);
	set_pev(rocket,pev_angles,fAngles);
	/*
	engfunc(EngFunc_MessageBegin,MSG_PAS, SVC_TEMPENTITY, {0,0,0}, 0);
	ewrite_byte(TE_BEAMFOLLOW);
	ewrite_short(rocket);
	ewrite_short(g_Trail);
	ewrite_byte(25);
	ewrite_byte(5);
	ewrite_byte(224);
	ewrite_byte(224);
	ewrite_byte(255);
	ewrite_byte(255);
	emessage_end();
	*/
	emit_sound(rocket, CHAN_WEAPON, g_SOUND[0], 1.0, ATTN_NORM, 0, PITCH_NORM);
	return rocket;
}

bool:get_entity_alive(ent)
{
	new deadflag = pev(ent,pev_deadflag);
	if(deadflag != DEAD_NO)
		return false;
	return true;
}

// Called each time an entity was touched
public RPG_Touch(ptr, ptd)
{
	if(pev_valid(ptr))
	{
		// Valid entity, check if it's a rocket
		static classname[32];
		pev(ptr, pev_classname, classname, 31);
		
		if(equal(classname, g_WPN_CLASS))
		{
			// RPG Rocket, get origin
			new Float:fOrigin[3];
			pev(ptr, pev_origin, fOrigin);
			
			// Explosion
			engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, 0);
			write_byte(TE_EXPLOSION);
			engfunc(EngFunc_WriteCoord, fOrigin[0]);
			engfunc(EngFunc_WriteCoord, fOrigin[1]);
			engfunc(EngFunc_WriteCoord, fOrigin[2]);
			write_short(g_Explosion);
			write_byte(30);
			write_byte(15);
			write_byte(0);
			message_end();
			
			// Create damage impact on rocket's location
			new attacker = pev(ptr, pev_owner);
			wpn_radius_damage(g_wpnid, attacker, ptr, RPG_RADIUS, RPG_DAMAGE, DMG_BLAST);
			wpn_entity_radius_damage ( attacker, RPG_DAMAGE, fOrigin, RPG_RADIUS );
			// Kill the rocket and reset data
			set_pev(ptr, pev_flags, FL_KILLME);
		}
	}
	return FMRES_IGNORED
}

public RPG_Think(ent)
{
	if(!pev_valid(ent)) return FMRES_IGNORED;
	static entname[32];
	pev(ent, pev_classname, entname, 31);
	if (!equal(entname, g_WPN_CLASS)) return FMRES_IGNORED;
	static Float:fCurrTime;
	fCurrTime = get_gametime();
	if(fCurrTime <= pev(ent,pev_nextthink)) return FMRES_IGNORED;
	if(pev(ent,RPG_ROCKET_MODE) == RPG_ROCKING)
	{
		RocketRockSystem(ent,pev(ent,pev_enemy),float(RPG_SPEED_ROCKED));
		new Float:Velocity[3];
		new Float:NewAngle[3];
		pev(ent, pev_velocity, Velocity);
		vector_to_angle(Velocity, NewAngle);
		set_pev(ent, pev_angles, NewAngle);
		set_pev(ent, pev_nextthink,fCurrTime+0.1);
	}
	
	return FMRES_IGNORED;
}

public RPG_PreThink(id)
{
	//no rocking.
	if(g_rockingsystem[id] == 0)
		return FMRES_IGNORED;

	//alive?
	if(!get_entity_alive(g_rockingsystem[id]))
		return FMRES_IGNORED;

	//g_indicator...
	RockingView(id,g_rockingsystem[id]);
	return FMRES_IGNORED;
}

stock RocketRockSystem(rocket, target, Float:speed)
{
	if (!pev_valid(rocket) || !pev_valid(target)) return 0;
	new Float:rkt_origin[3], Float:tgt_origin[3];
	pev(rocket, pev_origin, rkt_origin);
	pev(target, pev_origin, tgt_origin);

	new Float:diff[3];
	xs_vec_sub(tgt_origin,rkt_origin,diff);

	new Float:length = floatsqroot(floatpower(diff[0], 2.0) + floatpower(diff[1], 2.0) + floatpower(diff[2], 2.0));

	new Float:Velocity[3];
	xs_vec_mul_scalar(diff,(speed/length),Velocity);
	set_pev(rocket,pev_velocity,Velocity);
	return 1;
}

RockingView(id,target)
{
	new Float:tOrigin[3];
	pev(target,pev_origin,tOrigin);
	engfunc(EngFunc_MessageBegin, MSG_ONE,SVC_TEMPENTITY,tOrigin,id);
	write_byte(TE_SPRITE);
	engfunc(EngFunc_WriteCoord,tOrigin[0]);
	engfunc(EngFunc_WriteCoord,tOrigin[1]);
	engfunc(EngFunc_WriteCoord,tOrigin[2]);
	write_short(g_Indicator);
	write_byte(5);
	write_byte(255);
	message_end();
}

RockingSystemClear(id)
{
	g_rockingsystem[id] = 0;
}

public RockingReset(id)
{
	RockingSystemClear(id);
}

public client_putinserver(id)
{
	RockingSystemClear(id);
}

public client_disconnect(id)
{
	RockingSystemClear(id);
}



#include "../my_include/superheromod.inc"

#define YANDERE_HUD_TASKID 29383
#define YANDERE_STATS_TASKID 29626
#define YANDERE_ANGER_TASKID 29333
#define YANDERE_CRY_TASKID 30333

#define COUNTER_UP_SFX "shmod/Teliko/counter_plus_plus.wav"
#define YANDERE_WARCRY "shmod/yandere/Yanderu_war_cry.wav"

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Yandere"
new bool:gHasYandere[SH_MAXSLOTS+1]
new bool:gSuperAngry[SH_MAXSLOTS+1]
new bool:gIdleAngry[SH_MAXSLOTS+1]
new bool:gToPlaySound[SH_MAXSLOTS+1]
new bool:gPlayedSound[SH_MAXSLOTS+1]
new Float:gNormalDmgMult[SH_MAXSLOTS+1]
new Float:gNormalHeal[SH_MAXSLOTS+1]
new Float:gNormalHealRadius[SH_MAXSLOTS+1]
new Float:gNormalSpeed[SH_MAXSLOTS+1]


new const yandere_sentences[5][]={
		"Hiss.... Hiss.... Hiss.... Hiss.....",
		"Where are you... where... are you...",
		"Come out to plaaaaayyyy... There is NO WAY IM LETTING ANY OF YOU GO NOW!!!!!",
		"I hear their voices... I hear them... Then want... they want... red and black",
		"I want... all your blood. All of it.... and water the graves of my family with it."
		}
new m_spriteTexture
new hud_sync

new Float:base_dmg_mult,
Float:dmg_pct_per_inc,
Float:base_heal,
Float:heal_pct_per_inc,
Float:base_heal_radius,
Float:heal_radius_inc_per_inc,
Float:base_extra_speed,
Float:speed_inc_per_inc

new Float:angry_heal,
Float:angry_speed,
Float:angry_dmg_mult,
Float:angry_gravity,
Float:heal_base
new gHeroLevel

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Selfless Yandere", "1.0", "TastyMedula")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("yandere_level", "8")
	register_cvar("yandere_base_dmg_mult", "1.0")
	register_cvar("yandere_dmg_pct_per_inc", "0.35")
	register_cvar("yandere_heal", "1.0")
	register_cvar("yandere_heal_pct_per_inc", "0.35")
	register_cvar("yandere_heal_radius", "100")
	register_cvar("yandere_heal_base", "50.0")
	register_cvar("yandere_heal_radius_inc_per_inc", "50")
	register_cvar("yandere_base_extra_speed", "500")
	register_cvar("yandere_speed_inc_per_inc", "50")
	register_cvar("yandere_angry_heal", "0")
	register_cvar("yandere_angry_speed", "1000")
	register_cvar("yandere_angry_gravity", "0.25")
	register_cvar("yandere_angry_dmg_mult", "5.0")
	register_event("ResetHUD","newRound","b")
	hud_sync = CreateHudSyncObj()
	gHeroID=shCreateHero(gHeroName, "YANDERE!", "Heal alive teamates and avenge dead ones!", false, "yandere_level" )
	
	register_event("Damage", "yandere_damage", "b", "2!0")
	register_event("DeathMsg","death","a")
	
	register_srvcmd("yandere_init", "yandere_init")
	shRegHeroInit(gHeroName, "yandere_init")
}
public yandere_init()
{
	
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasYandere[id]=(hasPowers!=0)
	if(gHasYandere[id]){
		
		gNormalSpeed[id]=base_extra_speed
		gPlayedSound[id]=false
		set_task( 0.3, "yandere_loop", id+YANDERE_STATS_TASKID, "", 0, "b")
		set_task( 1.0, "yandere_hud_loop", id+YANDERE_HUD_TASKID, "", 0, "b")
		set_task( 1.0, "yandere_warcry", id+YANDERE_CRY_TASKID, "", 0, "b")
		set_task( 3.0, "yandere_sentence_loop", id+YANDERE_ANGER_TASKID, "", 0, "b")
	}
	else{
		remove_task(id+YANDERE_STATS_TASKID)
		remove_task(id+YANDERE_ANGER_TASKID)
		remove_task(id+YANDERE_HUD_TASKID)
		remove_task(id+YANDERE_CRY_TASKID)
	}
	
	
}
public get_yandere_alive(id){
	
	new ratio=0
	new CsTeams:user_team= cs_get_user_team(id)
	for(new i=1;i<=SH_MAXSLOTS;i++){
		if((i==id)||!is_user_connected(i)){
		
			
		}
		else if(is_user_alive(i)){
		
			new CsTeams:other_user_team=cs_get_user_team(i)
			if((user_team==other_user_team)){
		
				ratio++;
			}
		}
	
	
	}
	return ratio;


}
public get_alive_from_team(CsTeams:team){
	
	new ratio=0
	for(new i=1;i<=SH_MAXSLOTS;i++){
		if(!is_user_connected(i)){
		
			
		}
		else if(is_user_alive(i)){
		
			new CsTeams:other_user_team=cs_get_user_team(i)
			if((team==other_user_team)){
		
				ratio++;
			}
		}
	
	
	}
	return ratio;


}
public get_total_alive(){
	
	new ratio=0
	for(new i=1;i<=SH_MAXSLOTS;i++){
		if(!is_user_connected(i)){
		
			
		}
		else if(is_user_alive(i)){
			ratio++;
		}
	
	
	}
	return ratio;


}
public get_first_alive(){
	
	
	for(new i=1;i<=SH_MAXSLOTS;i++){
		
		if(!is_user_connected(i)){
		
			
		}
		else if(is_user_alive(i)){
		
			return i;
		}
	
	
	}
	return -1;


}
public yandere_sentence_loop(id){
	id-=YANDERE_ANGER_TASKID;
	
	if(sh_is_active()&&is_user_connected(id)&&is_user_alive(id)&&gHasYandere[id]&&gSuperAngry[id]&&gIdleAngry[id]){
		sh_chat_message(0,gHeroID,"%s",yandere_sentences[random_num(0,4)])
	}

}
yandere_update_idle(id){
		new butnprs
	
		gIdleAngry[id] = false
		butnprs = Entvars_Get_Int(id, EV_INT_button)
		
		if (butnprs&IN_ATTACK || butnprs&IN_ATTACK2 || butnprs&IN_RELOAD || butnprs&IN_USE) gIdleAngry[id] = true
		
		if (butnprs&IN_JUMP) gIdleAngry[id]  = true
		if (butnprs&IN_FORWARD || butnprs&IN_BACK || butnprs&IN_LEFT || butnprs&IN_RIGHT) gIdleAngry[id] = true
		if (butnprs&IN_MOVELEFT || butnprs&IN_MOVERIGHT) gIdleAngry[id]  = true
		


}
public get_yandere_dead(id){
	
	new ratio=0
	new CsTeams:user_team= cs_get_user_team(id)
	for(new i=1;i<=SH_MAXSLOTS;i++){
		if((i==id)||!is_user_connected(i)){
		
			
		}
		else if(!is_user_alive(i)){
		
			new CsTeams:other_user_team=cs_get_user_team(i)
			if((user_team==other_user_team)){
		
				ratio++;
			}
		}
	
	
	}
	return ratio;


}
public heal_aura(id){

	new origin[3]

	get_user_origin(id, origin, 1)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(27)
	write_coord(origin[0])	//pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(15)
	write_byte(20)			// r, g, b
	write_byte(200)		// r, g, b
	write_byte(40)			// r, g, b
	write_byte(3)			// life
	write_byte(1)			// decay
	message_end()

}
public kill_fx(origin[3]){

		message_begin(MSG_ALL, SVC_TEMPENTITY) 
		write_byte(10)	// TE_LAVASPLASH 
		write_coord(origin[0]) 
		write_coord(origin[1]) 
		write_coord(origin[2]-26) 
		message_end() 

}
public heal_stream(id, x)
{

	new origin[3]
	
	get_user_origin(id, origin, 1)
		
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( 8 )
	write_short(id)				// start entity
	write_short(x)				// entity
	write_short(m_spriteTexture)		// model
	write_byte( 0 ) 				// starting frame
	write_byte( 30 )  			// frame rate
	write_byte( 1)  			// life
	write_byte( 45)  		// line width
	write_byte( 0 )  			// noise amplitude
	write_byte( 0 )				// r, g, b
	write_byte( 60 )				// r, g, b
	write_byte( 255 )				// r, g, b
	write_byte( 255 )				// brightness
	write_byte( 8 )				// scroll speed
	message_end()

}
public heal_players_in_radius(id){
	
	new client_origin[3],teamate_origin[3],distance
	get_user_origin(id,client_origin);
	new CsTeams:user_team= cs_get_user_team(id)
	for(new i=1;i<=SH_MAXSLOTS&&!gSuperAngry[id];i++){
		
		if((i==id)||!is_user_connected(i)){
		
			
		}
		else if(is_user_alive(i)){
			new CsTeams:other_user_team=cs_get_user_team(i)
			if((user_team==other_user_team)){
				get_user_origin(i,teamate_origin)
				distance=get_distance(client_origin,teamate_origin)
				if(distance<gNormalHealRadius[id]){
					new Float:mate_health=float(get_user_health(i))
					new Float: new_health=floatadd(mate_health,floatmul(gNormalHeal[id],heal_base))
					set_user_health(i,floatround(new_health))
					heal_stream(id,i)
				}
			}
		}
	
	
	}
	heal_aura(id)


}

status_hud(id){

	new hud_msg[500];
	new color[4];
	format(hud_msg,500,"[SH] %s:Super angry? %s^nMates alive: %d^nMates dead: %d^nYour damage mult: %f^nYour heal stat: %f^nYour heal radius: %f^nYour gravity: %f^nYour max speed: %f^n",
					gHeroName,
					gSuperAngry[id]? "YES!":"No.",
					get_yandere_alive(id),
					get_yandere_dead(id),
					gNormalDmgMult[id],
					gNormalHeal[id],
					gNormalHealRadius[id],
					get_user_gravity(id),
					get_user_maxspeed(id));
	if(gSuperAngry[id]){
	
		color[0]=255;
		color[1]=0;
		color[2]=0;
		color[3]=1;
	
	}
	//255, 140, 234
	else{
		color[0]=255;
		color[1]=140;
		color[2]=234;
		color[3]=0;
	}
	
	set_hudmessage(color[0], color[1], color[2],1.0, 0.7, color[3], 0.0, 1.0,0.0,0.0,3)
	ShowSyncHudMsg(id, hud_sync, "%s", hud_msg)
	
	
}


public yandere_loop(id){

	id-=YANDERE_STATS_TASKID;
	
	if(gHasYandere[id]){
	
		update_stats(id)
	
	
	}


}
public yandere_hud_loop(id){

	id-=YANDERE_HUD_TASKID;
	
	if(gHasYandere[id]){
	
		status_hud(id)
	
	
	}


}
public yandere_warcry(id){
	id-=YANDERE_CRY_TASKID
	
	if(!sh_is_active()||!is_user_connected(id)||!is_user_alive(id)||!gHasYandere[id]||!gSuperAngry[id]) return
	
	if(gSuperAngry[id]&&gToPlaySound[id]&&!gPlayedSound[id]&&hasRoundStarted()&&gHasYandere[id]){
		new client_name[128]
		get_user_name(id,client_name,127)
		sh_chat_message(0,gHeroID,"%s: Ok. NOW Im mad!",client_name);
		emit_sound(0, CHAN_AUTO, YANDERE_WARCRY, 1.0, 0.0, 0, PITCH_NORM)
		gToPlaySound[id]=false;
		gPlayedSound[id]=true
	}
}
public update_normal_stats(id){
	
	new mates_dead=get_yandere_dead(id);
	new mates_alive=get_yandere_alive(id);
	gNormalDmgMult[id]=floatadd(base_dmg_mult,floatmul(dmg_pct_per_inc,float(mates_dead)));
	gNormalHeal[id]=floatadd(base_heal,floatmul(heal_pct_per_inc,float(mates_alive)));
	gNormalHealRadius[id]=floatadd(base_heal_radius,floatmul(heal_radius_inc_per_inc,float(mates_alive)));
	if(!sh_get_stun(id)){
		sh_reset_max_speed(id)
		new Float:maxspeed=get_user_maxspeed(id)
		set_user_maxspeed(id,floatmax(floatadd(gNormalSpeed[id],floatmul(speed_inc_per_inc,float(mates_dead))),maxspeed));
	}
	gIdleAngry[id]=false;
	gToPlaySound[id]=false;
	sh_reset_min_gravity(id)
	gSuperAngry[id]= mates_alive>0? false:true
	
}
public update_angry_stats(id){
	
	new mates_alive=get_yandere_alive(id);
	gNormalDmgMult[id]=angry_dmg_mult
	gNormalHeal[id]=float(0)
	gNormalHealRadius[id]=float(0)
	set_user_maxspeed(id,angry_speed);
	gToPlaySound[id]=true;
	set_user_gravity(id,angry_gravity)
	gSuperAngry[id]= mates_alive>0? false:true
	
}
update_stats(id){
	
	if(gHasYandere[id]){
		if(gSuperAngry[id]){
			
			yandere_update_idle(id)
			update_angry_stats(id)
			sh_set_rendering(id, 255, 0, 0, 255,kRenderFxGlowShell, kRenderTransAlpha)
		
		}
		else{
			update_normal_stats(id)
			set_user_rendering(id)
		
		}
	
	
	}


}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS();
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{

	gHeroLevel=get_cvar_num("yandere_level")
	base_dmg_mult=get_cvar_float("yandere_base_dmg_mult")
	dmg_pct_per_inc=get_cvar_float("yandere_dmg_pct_per_inc")
	base_heal=get_cvar_float("yandere_heal")
	heal_pct_per_inc=get_cvar_float("yandere_heal_pct_per_inc")
	base_heal_radius=get_cvar_float("yandere_heal_radius")
	heal_base=get_cvar_float("yandere_heal_base")
	heal_radius_inc_per_inc=get_cvar_float("yandere_heal_radius_inc_per_inc")
	base_extra_speed=get_cvar_float("yandere_base_extra_speed")
	speed_inc_per_inc=get_cvar_float("yandere_speed_inc_per_inc")
	angry_heal=get_cvar_float("yandere_angry_heal")
	angry_speed=get_cvar_float("yandere_angry_speed")
	angry_gravity=get_cvar_float("yandere_angry_gravity")
	angry_dmg_mult=get_cvar_float("yandere_angry_dmg_mult")
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{
	if ( gHasYandere[id]&&is_user_alive(id) && shModActive() ) {
		gPlayedSound[id]=false
		gNormalSpeed[id]=base_extra_speed
	}
	return PLUGIN_HANDLED
	
}
public yandere_damage(id)
{
	if ( !shModActive() || !is_user_alive(id)||!is_user_connected(id) ) return
	
	new  damage= read_data(2)
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	if ( (attacker <= 0 || attacker > SH_MAXSLOTS )|| (attacker==id)||!is_user_connected(attacker)) return
	
	new CsTeams:att_team=CS_TEAM_UNASSIGNED;
	att_team=cs_get_user_team(attacker)
	if(cs_get_user_team(id)==att_team){
	
		return;
	
	}
	if ( gHasYandere[attacker] && is_user_alive(id) ) {
		new extraDamage = floatround(damage * gNormalDmgMult[attacker] - damage)
		if (extraDamage > 0) shExtraDamage(id, attacker, extraDamage, "yandere rage", false)
	
	}
	if(gHasYandere[id]){
		
		heal_players_in_radius(id)
	}
}
public plugin_precache()
{
	m_spriteTexture = precache_model("sprites/laserbeam.spr")
	engfunc(EngFunc_PrecacheSound,YANDERE_WARCRY)
	
}
public sh_round_end(){

	new total_alive=get_total_alive()
	
	if(total_alive!=1){
		return;
	
	}
	new last_alive=get_first_alive()
	if(gHasYandere[last_alive]){
		new client_name[128]
		get_user_name(last_alive,client_name,127)
		sh_chat_message(0,gHeroID,"%s : What... have I done...",client_name)
	
	}
	
	

}
public death()
{	
	new id = read_data(2)
	new killer= read_data(1)
	if ( gHasYandere[killer]&&gSuperAngry[killer] )
	{
		new origin[3];
		get_user_origin(id,origin)
		kill_fx(origin)
	}
}

